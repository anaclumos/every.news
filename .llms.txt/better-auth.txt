# https://www.better-auth.com/docs llms-full.txt

Docs

On this pageInstallation

# Username

The username plugin wraps the email and password authenticator and adds username support. This allows users to sign in and sign up with their username instead of their email.

## [Installation](https://www.better-auth.com/docs/plugins/username\#installation)

### [Add Plugin to the server](https://www.better-auth.com/docs/plugins/username\#add-plugin-to-the-server)

auth.ts

```
import { betterAuth } from "better-auth"
import { username } from "better-auth/plugins"

const auth = betterAuth({
    plugins: [\
        username()\
    ]
})
```

### [Migrate the database](https://www.better-auth.com/docs/plugins/username\#migrate-the-database)

Run the migration or generate the schema to add the necessary fields and tables to the database.

migrategenerate

```
npx @better-auth/cli migrate
```

See the [Schema](https://www.better-auth.com/docs/plugins/username#schema) section to add the fields manually.

### [Add the client plugin](https://www.better-auth.com/docs/plugins/username\#add-the-client-plugin)

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
import { usernameClient } from "better-auth/client/plugins"

const authClient = createAuthClient({
    plugins: [\
        usernameClient()\
    ]
})
```

## [Usage](https://www.better-auth.com/docs/plugins/username\#usage)

### [Signup with username](https://www.better-auth.com/docs/plugins/username\#signup-with-username)

To sign up a user with username, you can use the existing `signUp.email` function provided by the client. The `signUp` function should take a new `username` property in the object.

auth-client.ts

```
const data = await authClient.signUp.email({
    email: "email@domain.com",
    name: "Test User",
    password: "password1234",
    username: "test"
})
```

### [Signin with username](https://www.better-auth.com/docs/plugins/username\#signin-with-username)

To signin a user with username, you can use the `signIn.username` function provided by the client. The `signIn` function takes an object with the following properties:

- `username`: The username of the user.
- `password`: The password of the user.

auth-client.ts

```
const data = await authClient.signIn.username({
    username: "test",
    password: "password1234",
})
```

### [Update username](https://www.better-auth.com/docs/plugins/username\#update-username)

To update the username of a user, you can use the `updateUser` function provided by the client.

auth-client.ts

```
const data = await authClient.updateUser({
    username: "new-username"
})
```

## [Schema](https://www.better-auth.com/docs/plugins/username\#schema)

The plugin requires 1 field to be added to the user table:

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| username | string | - | The username of the user |

## [Options](https://www.better-auth.com/docs/plugins/username\#options)

### [Min Username Length](https://www.better-auth.com/docs/plugins/username\#min-username-length)

The minimum length of the username. Default is `3`.

auth.ts

```
import { betterAuth } from "better-auth"
import { username } from "better-auth/plugins"

const auth = betterAuth({
    plugins: [\
        username({\
            minUsernameLength: 5\
        })\
    ]
})
```

### [Max Username Length](https://www.better-auth.com/docs/plugins/username\#max-username-length)

The maximum length of the username. Default is `30`.

auth.ts

```
import { betterAuth } from "better-auth"
import { username } from "better-auth/plugins"

const auth = betterAuth({
    plugins: [\
        username({\
            maxUsernameLength: 100\
        })\
    ]
})
```

### [Username Validator](https://www.better-auth.com/docs/plugins/username\#username-validator)

A function that validates the username. The function should return false if the username is invalid. By default, the username should only contain alphanumeric characters and underscores.

auth.ts

```
import { betterAuth } from "better-auth"
import { username } from "better-auth/plugins"

const auth = betterAuth({
    plugins: [\
        username({\
            usernameValidator: (username) => {\
                if (username === "admin") {\
                    return false\
                }\
            }\
        })\
    ]
})
```

[**Two-Factor Authentication (2FA)** \\
Enhance your app's security with two-factor authentication.](https://www.better-auth.com/docs/plugins/2fa) [**Anonymous** \\
Anonymous plugin for Better Auth.](https://www.better-auth.com/docs/plugins/anonymous)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/username#installation) [Add Plugin to the server](https://www.better-auth.com/docs/plugins/username#add-plugin-to-the-server) [Migrate the database](https://www.better-auth.com/docs/plugins/username#migrate-the-database) [Add the client plugin](https://www.better-auth.com/docs/plugins/username#add-the-client-plugin) [Usage](https://www.better-auth.com/docs/plugins/username#usage) [Signup with username](https://www.better-auth.com/docs/plugins/username#signup-with-username) [Signin with username](https://www.better-auth.com/docs/plugins/username#signin-with-username) [Update username](https://www.better-auth.com/docs/plugins/username#update-username) [Schema](https://www.better-auth.com/docs/plugins/username#schema) [Options](https://www.better-auth.com/docs/plugins/username#options) [Min Username Length](https://www.better-auth.com/docs/plugins/username#min-username-length) [Max Username Length](https://www.better-auth.com/docs/plugins/username#max-username-length) [Username Validator](https://www.better-auth.com/docs/plugins/username#username-validator)Docs

On this pageInstallation

# JWT

The JWT plugin provides endpoints to retrieve a JWT token and a JWKS endpoint to verify the token.

This plugin is not meant as a replacement for the session.
It's meant to be used for services that can't use the session.

## [Installation](https://www.better-auth.com/docs/plugins/jwt\#installation)

### [Add the plugin to your **auth** config](https://www.better-auth.com/docs/plugins/jwt\#add-the-plugin-to-your-auth-config)

auth.ts

```
import { betterAuth } from "better-auth"
import { jwt } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [\
        jwt(),\
    ]
})
```

### [Migrate the database](https://www.better-auth.com/docs/plugins/jwt\#migrate-the-database)

Run the migration or generate the schema to add the necessary fields and tables to the database.

migrategenerate

```
npx @better-auth/cli migrate
```

See the [Schema](https://www.better-auth.com/docs/plugins/jwt#schema) section to add the fields manually.

## [Usage](https://www.better-auth.com/docs/plugins/jwt\#usage)

Once you've installed the plugin, you can start using the JWT & JWKS plugin to get the token and the JWKS through their respective endpoints.

## [JWT](https://www.better-auth.com/docs/plugins/jwt\#jwt)

### [Retrieve the token](https://www.better-auth.com/docs/plugins/jwt\#retrieve-the-token)

To get the token, call the `/token`, this will return the following:

```
  {
    "token": "ey..."
  }
```

Make sure to include the token in the Authorization header of your requests.

```
await fetch("/api/auth/token", {
  headers: {
    "Authorization": `Bearer ${token}`
  },
})
```

### [Verifying the token](https://www.better-auth.com/docs/plugins/jwt\#verifying-the-token)

The token can be verified in your own service, without the need for an additional verify call or database check.
For this JWKS is used, the public key can be fetched from the `/api/auth/jwks` endpoint.

Since this key is not subject to a frequent change, it can be cached indefinitely.
The Key ID (kid) that was used to sign a JWT is included in the header of the token.
In the case a JWT with a different kid is received it is recommended to fetch the JWKS again.

```
  {
    "keys": [\
        {\
            "crv": "Ed25519",\
            "x": "bDHiLTt7u-VIU7rfmcltcFhaHKLVvWFy-_csKZARUEU",\
            "kty": "OKP",\
            "kid": "c5c7995d-0037-4553-8aee-b5b620b89b23"\
        }\
    ]
  }
```

## [Schema](https://www.better-auth.com/docs/plugins/jwt\#schema)

The JWT plugin adds the following tables to the database:

### [JWKS](https://www.better-auth.com/docs/plugins/jwt\#jwks)

Table Name: `jwks`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | Unique identifier for each web key |
| publicKey | string | - | The public part of the web key |
| privateKey | string | - | The private part of the web key |
| createdAt | Date | - | Timestamp of when the web key was created |

## [Options](https://www.better-auth.com/docs/plugins/jwt\#options)

### [Algorithm of the Key Pair](https://www.better-auth.com/docs/plugins/jwt\#algorithm-of-the-key-pair)

The algorithm used for the generation of the keypair. The default is **EdDSA** with the **Ed25519** curve. Below are the available options:

auth.ts

```
jwt({
  jwks: {
    keyPairConfig: {
      alg: "EdDSA",
      crv: "Ed25519"
    }
  }
})
```

#### [EdDSA](https://www.better-auth.com/docs/plugins/jwt\#eddsa)

- **Default Curve**: `Ed25519`
- **Optional Property**: `crv`
  - Available options: `Ed25519`, `Ed448`
  - Default: `Ed25519`

#### [ES256](https://www.better-auth.com/docs/plugins/jwt\#es256)

- No additional properties

#### [RSA256](https://www.better-auth.com/docs/plugins/jwt\#rsa256)

- **Optional Property**: `modulusLength`
  - Expects a number
  - Default: `2048`

#### [PS256](https://www.better-auth.com/docs/plugins/jwt\#ps256)

- **Optional Property**: `modulusLength`
  - Expects a number
  - Default: `2048`

#### [ECDH-ES](https://www.better-auth.com/docs/plugins/jwt\#ecdh-es)

- **Optional Property**: `crv`
  - Available options: `P-256`, `P-384`, `P-521`
  - Default: `P-256`

#### [ES512](https://www.better-auth.com/docs/plugins/jwt\#es512)

- No additional properties

### [Disable private key encryption](https://www.better-auth.com/docs/plugins/jwt\#disable-private-key-encryption)

By default, the private key is encrypted using AES256 GCM. You can disable this by setting the `disablePrivateKeyEncryption` option to `true`.

For security reasons, it's recommended to keep the private key encrypted.

auth.ts

```
jwt({
  jwks: {
    disablePrivateKeyEncryption: true
  }
})
```

### [Modify JWT payload](https://www.better-auth.com/docs/plugins/jwt\#modify-jwt-payload)

By default the entire user object is added to the JWT payload. You can modify the payload by providing a function to the `definePayload` option.

auth.ts

```
jwt({
  jwt: {
    definePayload: (user) => {
      return {
        id: user.id,
        email: user.email,
        role: user.role
      }
    }
  }
})
```

### [Modify Issuer, Audience or Expiration time](https://www.better-auth.com/docs/plugins/jwt\#modify-issuer-audience-or-expiration-time)

If none is given, the BASE\_URL is used as the issuer and the audience is set to the BASE\_URL. The expiration time is set to 15 minutes.

auth.ts

```
jwt({
  jwt: {
    issuer: "https://example.com",
    audience: "https://example.com",
    expirationTime: "1h"
  }
})
```

[**Open API** \\
Open API reference for Better Auth.](https://www.better-auth.com/docs/plugins/open-api) [**Community Plugins** \\
A list of recommended community plugins.](https://www.better-auth.com/docs/plugins/community-plugins)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/jwt#installation) [Add the plugin to your **auth** config](https://www.better-auth.com/docs/plugins/jwt#add-the-plugin-to-your-auth-config) [Migrate the database](https://www.better-auth.com/docs/plugins/jwt#migrate-the-database) [Usage](https://www.better-auth.com/docs/plugins/jwt#usage) [JWT](https://www.better-auth.com/docs/plugins/jwt#jwt) [Retrieve the token](https://www.better-auth.com/docs/plugins/jwt#retrieve-the-token) [Verifying the token](https://www.better-auth.com/docs/plugins/jwt#verifying-the-token) [Schema](https://www.better-auth.com/docs/plugins/jwt#schema) [JWKS](https://www.better-auth.com/docs/plugins/jwt#jwks) [Options](https://www.better-auth.com/docs/plugins/jwt#options) [Algorithm of the Key Pair](https://www.better-auth.com/docs/plugins/jwt#algorithm-of-the-key-pair) [EdDSA](https://www.better-auth.com/docs/plugins/jwt#eddsa) [ES256](https://www.better-auth.com/docs/plugins/jwt#es256) [RSA256](https://www.better-auth.com/docs/plugins/jwt#rsa256) [PS256](https://www.better-auth.com/docs/plugins/jwt#ps256) [ECDH-ES](https://www.better-auth.com/docs/plugins/jwt#ecdh-es) [ES512](https://www.better-auth.com/docs/plugins/jwt#es512) [Disable private key encryption](https://www.better-auth.com/docs/plugins/jwt#disable-private-key-encryption) [Modify JWT payload](https://www.better-auth.com/docs/plugins/jwt#modify-jwt-payload) [Modify Issuer, Audience or Expiration time](https://www.better-auth.com/docs/plugins/jwt#modify-issuer-audience-or-expiration-time)# All of the changes made will beavailable here.

Better Auth is comprehensive authentication library for TypeScript that provides a wide range of features to make authentication easier and more secure.

* * *

[Documentation](https://www.better-auth.com/docs) [GitHub](https://github.com/better-auth/better-auth) [Community](https://discord.gg/GYC3W7tZzb)

[BETTER-AUTH.](https://x.com/better_auth)

## Feb 24, 2025       [v1.1.21](https://www.better-auth.com/changelogs\#v1.1.21)   Feb 24, 2025

### 🐞 Bug Fixes

- **open-api**: Add authentication schemes – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **origin-check**: Add tests for callback URLs with malicious patterns – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)

##### [View changes on GitHub](https://github.com/better-auth/better-auth/compare/v1.1.20...v1.1.21)

## Feb 24, 2025       [v1.1.20](https://www.better-auth.com/changelogs\#v1.1.20)   Feb 24, 2025

### 🚀 Features

- **email-otp**: Add option to set a function to generate OTPs – [![@CordlessWool](https://github.com/CordlessWool.png)](https://github.com/CordlessWool)
- **sso**: Sign in using the providerId – [![@kamilkisiela](https://github.com/kamilkisiela.png)](https://github.com/kamilkisiela)

### 🐞 Bug Fixes

- Add email verification for in place email updates – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- Add callback URL to update email verification link – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **one-tap**:
  - Update import path for generateRandomString to fix unsupported crypto import for react native  -  by @Bekacru [<samp>(ac848)</samp>](https://github.com/better-auth/better-auth/commit/ac848bb9)
  - Remove random string generator for nonce to fix expo client  -  by @Bekacru [<samp>(6440a)</samp>](https://github.com/better-auth/better-auth/commit/6440a107)
- **organizaiton**:
  - Restrict admins from removing or updating owners or members with creator roles  -  by @Bekacru in https://github.com/better-auth/better-auth/issues/1520 [<samp>(28cc6)</samp>](https://github.com/better-auth/better-auth/commit/28cc66bf)
- **origin-check**:
  - Exclude URLs with double slashes  -  by @Bekacru [<samp>(d9c57)</samp>](https://github.com/better-auth/better-auth/commit/d9c57e1f)
  - Prevent URLs with double slashes from being trusted  -  by @Bekacru [<samp>(24659)</samp>](https://github.com/better-auth/better-auth/commit/24659aef)
- **session**:
  - Include expiresAt in session data for HMAC verification  -  by @Bekacru [<samp>(da62e)</samp>](https://github.com/better-auth/better-auth/commit/da62e635)

##### [View changes on GitHub](https://github.com/better-auth/better-auth/compare/v1.1.19...v1.1.20)

## Feb 20, 2025       [v1.1.19](https://www.better-auth.com/changelogs\#v1.1.19)   Feb 20, 2025

### 🚀 Features

- **cli**: Add support for auth.server.ts – [![@ardasoyturk](https://github.com/ardasoyturk.png)](https://github.com/ardasoyturk)
- **mongodb-adapter**: Support custom ID generation in MongoDB adapter – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **one-tap**: Improve Google One Tap integration with JWT verification and improved prompt handling – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **two-factor**: Activate two factor with email OTP to avoid Insecure skipVerificationOnEnable – [![@GregorWedlich](https://github.com/GregorWedlich.png)](https://github.com/GregorWedlich)

### 🐞 Bug Fixes

- **admin**:
  - Impersonate user session expiration  -  by @Kinfe123 in https://github.com/better-auth/better-auth/issues/1471 [<samp>(072c5)</samp>](https://github.com/better-auth/better-auth/commit/072c5975)
  - Unban should reset expiration date and reason  -  by @Kinfe123 in https://github.com/better-auth/better-auth/issues/1469 [<samp>(954b1)</samp>](https://github.com/better-auth/better-auth/commit/954b1dcb)
- **api**:
  - Config in `getSessionFromCtx` overrides query param  -  by @Kinfe123 in https://github.com/better-auth/better-auth/issues/1496 [<samp>(261fe)</samp>](https://github.com/better-auth/better-auth/commit/261fe931)
- **auth**:
  - Use options.baseURL instead of ctx.baseURL on trusted origins  -  by @Bekacru [<samp>(5dfb7)</samp>](https://github.com/better-auth/better-auth/commit/5dfb7888)
- **db**:
  - Normalize email to lowercase in change email verification  -  by @Bekacru [<samp>(d80a1)</samp>](https://github.com/better-auth/better-auth/commit/d80a12a4)
- **email-otp**:
  - Don’t save email address as user name  -  by @benkingcode and **benkingcode** in https://github.com/better-auth/better-auth/issues/1519 [<samp>(5f6cb)</samp>](https://github.com/better-auth/better-auth/commit/5f6cbe94)
- **generic-oauth**:
  - Support allowDifferentEmails on Generic OAuth Plugin  -  by @alessandrojean in https://github.com/better-auth/better-auth/issues/1481 [<samp>(9c3b5)</samp>](https://github.com/better-auth/better-auth/commit/9c3b5c37)
- **jwt-plugin**:
  - Include alg in jwks response  -  by @runreal-warman [<samp>(459e7)</samp>](https://github.com/better-auth/better-auth/commit/459e7d96)
- **oauth**:
  - Set tokens on oauth account created during link  -  by @thiagofelix in https://github.com/better-auth/better-auth/issues/1462 [<samp>(e5133)</samp>](https://github.com/better-auth/better-auth/commit/e5133202)
- **oidc-plugin**:
  - User info endpoint casing to match OIDC spec  -  by @stephenlacy in https://github.com/better-auth/better-auth/issues/1446 [<samp>(2ecd3)</samp>](https://github.com/better-auth/better-auth/commit/2ecd3f42)
  - DeleteVerificationValue call by id  -  by @runreal-warman [<samp>(c0bd4)</samp>](https://github.com/better-auth/better-auth/commit/c0bd4287)
  - Store and handle nonce value  -  by @runreal-warman [<samp>(c39e1)</samp>](https://github.com/better-auth/better-auth/commit/c39e1031)
  - Sub is required /userinfo response  -  by @runreal-warman in https://github.com/better-auth/better-auth/issues/1504 [<samp>(8ac1f)</samp>](https://github.com/better-auth/better-auth/commit/8ac1ffea)
- **open-api**:
  - Convert path parameters to OpenAPI format  -  by @Phanuwat-Pao in https://github.com/better-auth/better-auth/issues/1437 [<samp>(da2fd)</samp>](https://github.com/better-auth/better-auth/commit/da2fd0b7)
  - Add missing `id` field in generated OpenAPI for each schema (Models)  -  by @astahmer in https://github.com/better-auth/better-auth/issues/1491 [<samp>(add38)</samp>](https://github.com/better-auth/better-auth/commit/add3820c)
- **passkey**:
  - Remove client export from the server plugin  -  by @Bekacru in https://github.com/better-auth/better-auth/issues/1511 [<samp>(bf47a)</samp>](https://github.com/better-auth/better-auth/commit/bf47aaed)

##### [View changes on GitHub](https://github.com/better-auth/better-auth/compare/v1.1.18...v1.1.19)

## Feb 14, 2025       [v1.1.18](https://www.better-auth.com/changelogs\#v1.1.18)   Feb 14, 2025

### 🚀 Features

- Custom generate token function for magic links – [![@t3duk](https://github.com/t3duk.png)](https://github.com/t3duk)
- Support function for trusted origins configuration – [![@ping-maxwell](https://github.com/ping-maxwell.png)](https://github.com/ping-maxwell)[![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **admin**: Set user password – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **generic-oauth**: OAuth2 link account – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **organization**: Leave organization – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **username**: Add default validation and options for validating username – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)

### 🐞 Bug Fixes

- Remove zod type export from clients – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- Log error in handleOAuthUserInfo – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- Use Partial for body and query in InferRoute type – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- Database hooks should use Partial types to avoid overwriting previous hooks returns – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **cli**: Add on delete cascade constraint to drizzle references – [![@gregtjack](https://github.com/gregtjack.png)](https://github.com/gregtjack)
- **expo**: Headers should be retrieved from APIError in OAuth hook – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **phone-number**: Ensure callbackOnVerification is called after user verification – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **rate-limit**: Use the passed model name for rate limiter storage – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)

##### [View changes on GitHub](https://github.com/better-auth/better-auth/compare/v1.1.17...v1.1.18)Docs

On this pageUser table

# User & Accounts

Beyond authenticating users, Better Auth also provides a set of methods to manage users. This includes, updating user information, changing passwords, and more.

## [User table](https://beta.better-auth.com/docs/concepts/users-accounts\#user-table)

The user table stores the user data. The user table has the following fields:

- `id`: The user id.
- `email`: The email of the user.
- `name`: The name of the user.
- `image`: The image of the user.
- `createdAt`: The creation date of the user.
- `updatedAt`: The last update date of the user.

The user table can be extended using [additional fields](https://beta.better-auth.com/docs/concepts/database#extending-core-schema) or by plugins to store additional data.

## [Update User](https://beta.better-auth.com/docs/concepts/users-accounts\#update-user)

### [Update User Information](https://beta.better-auth.com/docs/concepts/users-accounts\#update-user-information)

To update user information, you can use the `updateUser` function provided by the client. The `updateUser` function takes an object with the following properties:

```
await authClient.updateUser({
    image: "https://example.com/image.jpg",
    name: "John Doe",
})
```

### [Change Email](https://beta.better-auth.com/docs/concepts/users-accounts\#change-email)

To allow users to change their email, first enable the `changeEmail` feature, which is disabled by default. Set `changeEmail.enabled` to `true`:

```
export const auth = betterAuth({
    user: {
        changeEmail: {
            enabled: true,
        }
    }
})
```

For users with a verified email, provide the `sendChangeEmailVerification` function. This function triggers when a user changes their email, sending a verification email with a URL and token. If the current email isn't verified, the change happens immediately without verification.

```
export const auth = betterAuth({
    user: {
        changeEmail: {
            enabled: true,
            sendChangeEmailVerification: async ({ user, newEmail, url, token }, request) => {
                await sendEmail({
                    to: user.email, // verification email must be sent to the current user email to approve the change
                    subject: 'Approve email change',
                    text: `Click the link to approve the change: ${url}`
                })
            }
        }
    }
})
```

Once enabled, use the `changeEmail` function on the client to update a user’s email. The user must verify their current email before changing it.

```
await authClient.changeEmail({
    newEmail: "new-email@email.com",
    callbackURL: "/dashboard", //to redirect after verification
});
```

After verification, the new email is updated in the user table, and a confirmation is sent to the new address.

If the current email is unverified, the new email is updated without the verification step.

### [Change Password](https://beta.better-auth.com/docs/concepts/users-accounts\#change-password)

Password of a user isn't stored in the user table. Instead, it's stored in the account table. To change the password of a user, you can use the `changePassword` function provided by the client. The `changePassword` function takes an object with the following properties:

```
await authClient.changePassword({
    newPassword: "newPassword123",
    currentPassword: "oldPassword123",
    revokeOtherSessions: true, // revoke all other sessions the user is signed into
});
```

### [Set Password](https://beta.better-auth.com/docs/concepts/users-accounts\#set-password)

If a user was registered using OAuth or other providers, they won't have a password or a credential account. In this case, you can use the `setPassword` action to set a password for the user. For security reasons, this function can only be called from the server. We recommend having users go through a 'forgot password' flow to set a password for their account.

```
await auth.api.setPassword({
    newPassword: "password",
    headers: //
});
```

## [Delete User](https://beta.better-auth.com/docs/concepts/users-accounts\#delete-user)

Better Auth provides a utility to hard delete a user from your database. It's disabled by default, but you can enable it easily by passing `enabled:true`

```
export const auth = betterAuth({
    //...other config
    user: {
        deleteUser: {
            enabled: true
        }
    }
})
```

Once enabled, you can call `authClient.deleteUser` to permanently delete user data from your database.

### [Adding Verification Before Deletion](https://beta.better-auth.com/docs/concepts/users-accounts\#adding-verification-before-deletion)

For added security, you’ll likely want to confirm the user’s intent before deleting their account. A common approach is to send a verification email. Better Auth provides a `sendDeleteAccountVerification` utility for this purpose.

Here’s how you can set it up:

```
export const auth = betterAuth({
    user: {
        deleteUser: {
            enabled: true,
            sendDeleteAccountVerification: async (
                {
                    user,   // The user object
                    url, // The auto-generated URL for deletion
                    token  // The verification token  (can be used to generate custom URL)
                },
                request  // The original request object (optional)
            ) => {
                // Your email sending logic here
                // Example: sendEmail(data.user.email, "Verify Deletion", data.url);
            },
        },
    },
});
```

**How callback verification works:**

- **Callback URL**: The url provided in `sendDeleteAccountVerification` is a pre-generated link that deletes the user data when accessed.

delete-user.ts

```
await authClient.deleteUser({
    callbackURL: "/goodbye" // you can provide a callback URL to redirect after deletion
});
```

- **Authentication Check**: The user must be signed in to the account they’re attempting to delete.
If they aren’t signed in, the deletion process will fail.

If you have sent a custom URL, you can use the `deleteUser` method with the token to delete the user.

delete-user.ts

```
await authClient.deleteUser({
    token
});
```

### [Authentication Requirements](https://beta.better-auth.com/docs/concepts/users-accounts\#authentication-requirements)

To delete a user, the user must meet one of the following requirements:

1. A valid password

if the user has a password, they can delete their account by providing the password.

delete-user.ts

```
await authClient.deleteUser({
    password: "password"
});
```

2. Fresh session

The user must have a `fresh` session token, meaning the user must have signed in recently. This is checked if the password is not provided.

By default `session.freshAge` is set to `60 * 60 * 24` (1 day). You can change this value by passing the `session` object to the `auth` configuration. If it is set to `0`, the freshness check is disabled.

delete-user.ts

```
await authClient.deleteUser();
```

3. The user must provide a token generated by the `sendDeleteAccountVerification` callback.

delete-user.ts

```
await authClient.deleteUser({
    token
});
```

### [Callbacks](https://beta.better-auth.com/docs/concepts/users-accounts\#callbacks)

**beforeDelete**: This callback is called before the user is deleted. You can use this callback to perform any cleanup or additional checks before deleting the user.

auth.ts

```
export const auth = betterAuth({
    user: {
        deleteUser: {
            enabled: true,
            beforeDelete: async (user) => {
                // Perform any cleanup or additional checks here
            },
        },
    },
});
```

you can also throw `APIError` to interrupt the deletion process.

auth.ts

```
import { betterAuth } from "better-auth";
import { APIError } from "better-auth/api";

export const auth = betterAuth({
    user: {
        deleteUser: {
            enabled: true,
            beforeDelete: async (user, request) => {
                if (user.email.includes("admin")) {
                    throw new APIError("BAD_REQUEST", {
                        message: "Admin accounts can't be deleted",
                    });
                }
            },
        },
    },
});
```

**afterDelete**: This callback is called after the user is deleted. You can use this callback to perform any cleanup or additional actions after the user is deleted.

auth.ts

```
export const auth = betterAuth({
    user: {
        deleteUser: {
            enabled: true,
            afterDelete: async (user, request) => {
                // Perform any cleanup or additional actions here
            },
        },
    },
});
```

## [Accounts](https://beta.better-auth.com/docs/concepts/users-accounts\#accounts)

Better Auth supports multiple authentication methods. Each authentication method is called a provider. For example, email and password authentication is a provider, Google authentication is a provider, etc.

When a user signs in using a provider, an account is created for the user. The account stores the authentication data returned by the provider. This data includes the access token, refresh token, and other information returned by the provider.

### [Account table](https://beta.better-auth.com/docs/concepts/users-accounts\#account-table)

The account table stores the authentication data of the user. The account table has the following fields:

- `id`: The unique identifier of the account.
- `userId`: The id of the user.
- `accountId`: The id of the account provided by the OAuth provider. (optional)
- `providerId`: The id of the provider. (optional)
- `accessToken`: The access token of the account. Returned by the provider. (optional)
- `refreshToken`: The refresh token of the account. Returned by the provider. (optional)
- `expiresAt`: The time when the access token expires. (optional)
- `password`: The password of the account. Mainly used for email and password authentication. (optional)

### [List User Accounts](https://beta.better-auth.com/docs/concepts/users-accounts\#list-user-accounts)

To list user accounts you can use `client.user.listAccounts` method. Which will return all accounts associated with a user.

```
const accounts = await authClient.listAccounts();
```

### [Account Linking](https://beta.better-auth.com/docs/concepts/users-accounts\#account-linking)

Account linking enables users to associate multiple authentication methods with a single account. With Better Auth, users can connect additional social sign-ons or OAuth providers to their existing accounts if the provider confirms the user's email as verified.

If account linking is disabled, no accounts can be linked, regardless of the provider or email verification status.

auth.ts

```
const auth = new BetterAuth({
    account: {
        accountLinking: {
            enabled: true,
        }
    },
});
```

#### [Forced Linking](https://beta.better-auth.com/docs/concepts/users-accounts\#forced-linking)

You can specify a list of "trusted providers." When a user logs in using a trusted provider, their account will be automatically linked even if the provider doesn’t confirm the email verification status. Use this with caution as it may increase the risk of account takeover.

auth.ts

```
const auth = new BetterAuth({
    account: {
        accountLinking: {
            enabled: true,
            trustedProviders: ["google", "github"]
        }
    },
});
```

#### [Manually Linking Accounts](https://beta.better-auth.com/docs/concepts/users-accounts\#manually-linking-accounts)

Users already signed in can manually link their account to additional social providers or credential-based accounts.

- **Linking Social Accounts:** Use the `user.linkSocial` method on the client to link a social provider to the user's account.








```
await authClient.linkSocial({
      provider: "google", // Provider to link
      callbackURL: "/callback" // Callback URL after linking completes
});
```








If you want your users to be able to link a social account with a different email address than the user, or if you want to use a provider that does not return email addresses, you will need to enable this in the account linking settings.






auth.ts









```
const auth = betterAuth({
      account: {
          accountLinking: {
              allowDifferentEmails: true
          }
      },
});
```

- **Linking Credential-Based Accounts:** To link a credential-based account (e.g., email and password), users can initiate a "forgot password" flow, or you can call the `setPassword` method on the server.








```
await auth.api.setPassword({
      headers: /* headers containing the user's session token */,
      password: /* new password */
});
```


`setPassword` can't be called from the client for security reasons.

### [Account Unlinking](https://beta.better-auth.com/docs/concepts/users-accounts\#account-unlinking)

You can unlink a user account by providing a `providerId`.

```
await authClient.unlinkAccount({
    providerId: "google"
});
```

If the `providerId` doesn't exist, it will throw an error. Additionally, if the user only has one account, the unlinking process will fail to prevent account lockout.

[**TypeScript** \\
Better Auth TypeScript integration.](https://beta.better-auth.com/docs/concepts/typescript) [**Email & Password** \\
Implementing email and password authentication with Better Auth.](https://beta.better-auth.com/docs/authentication/email-password)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[User table](https://beta.better-auth.com/docs/concepts/users-accounts#user-table) [Update User](https://beta.better-auth.com/docs/concepts/users-accounts#update-user) [Update User Information](https://beta.better-auth.com/docs/concepts/users-accounts#update-user-information) [Change Email](https://beta.better-auth.com/docs/concepts/users-accounts#change-email) [Change Password](https://beta.better-auth.com/docs/concepts/users-accounts#change-password) [Set Password](https://beta.better-auth.com/docs/concepts/users-accounts#set-password) [Delete User](https://beta.better-auth.com/docs/concepts/users-accounts#delete-user) [Adding Verification Before Deletion](https://beta.better-auth.com/docs/concepts/users-accounts#adding-verification-before-deletion) [Authentication Requirements](https://beta.better-auth.com/docs/concepts/users-accounts#authentication-requirements) [Callbacks](https://beta.better-auth.com/docs/concepts/users-accounts#callbacks) [Accounts](https://beta.better-auth.com/docs/concepts/users-accounts#accounts) [Account table](https://beta.better-auth.com/docs/concepts/users-accounts#account-table) [List User Accounts](https://beta.better-auth.com/docs/concepts/users-accounts#list-user-accounts) [Account Linking](https://beta.better-auth.com/docs/concepts/users-accounts#account-linking) [Forced Linking](https://beta.better-auth.com/docs/concepts/users-accounts#forced-linking) [Manually Linking Accounts](https://beta.better-auth.com/docs/concepts/users-accounts#manually-linking-accounts) [Account Unlinking](https://beta.better-auth.com/docs/concepts/users-accounts#account-unlinking)Docs

On this pageGet your OAuth credentials

# Apple

### [Get your OAuth credentials](https://www.better-auth.com/docs/authentication/apple\#get-your-oauth-credentials)

To use Apple sign in, you need a client ID and client secret. You can get them from the [Apple Developer Portal](https://developer.apple.com/account/resources/authkeys/list).

Apple requires a little harder setup to get a client secret. You can use the guide below to get your client secret.

[Creating a client secret](https://developer.apple.com/documentation/accountorganizationaldatasharing/creating-a-client-secret)

### [Configure the provider](https://www.better-auth.com/docs/authentication/apple\#configure-the-provider)

To configure the provider, you need to add it to the `socialProviders` option of the auth instance.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        apple: {
            clientId: process.env.APPLE_CLIENT_ID as string,
            clientSecret: process.env.APPLE_CLIENT_SECRET as string,
            // Optional
            appBundleIdentifier: process.env.APPLE_APP_BUNDLE_IDENTIFIER as string,
        },
    },
})
```

On native iOS, it doesn't use the service id but the app id (bundle id) as client id, so if using the service id as clientId in signIn.social() with idToken, it throws an error: JWTClaimValidationFailed: unexpected "aud" claim value. So you need to provide the appBundleIdentifier when you want to sign in with Apple using the ID Token.

## [Usage](https://www.better-auth.com/docs/authentication/apple\#usage)

### [Sign In with Apple](https://www.better-auth.com/docs/authentication/apple\#sign-in-with-apple)

To sign in with Apple, you can use the `signIn.social` function provided by the client. The `signIn` function takes an object with the following properties:

- `provider`: The provider to use. It should be set to `apple`.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "apple"
    })
}
```

### [Sign In with Apple With ID Token](https://www.better-auth.com/docs/authentication/apple\#sign-in-with-apple-with-id-token)

To sign in with Apple using the ID Token, you can use the `signIn.social` function to pass the ID Token.

This is useful when you have the ID Token from Apple on the client-side and want to use it to sign in on the server.

If id token is provided no redirection will happen, and the user will be signed in directly.

auth-client.ts

```
    await authClient.signIn.social({
        provider: "apple",
        idToken: {
            token: // Apple ID Token,
            nonce: // Nonce (optional)
            accessToken: // Access Token (optional)
        }
    })
```

[**Email & Password** \\
Implementing email and password authentication with Better Auth.](https://www.better-auth.com/docs/authentication/email-password) [**Discord** \\
Discord provider setup and usage.](https://www.better-auth.com/docs/authentication/discord)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Get your OAuth credentials](https://www.better-auth.com/docs/authentication/apple#get-your-oauth-credentials) [Configure the provider](https://www.better-auth.com/docs/authentication/apple#configure-the-provider) [Usage](https://www.better-auth.com/docs/authentication/apple#usage) [Sign In with Apple](https://www.better-auth.com/docs/authentication/apple#sign-in-with-apple) [Sign In with Apple With ID Token](https://www.better-auth.com/docs/authentication/apple#sign-in-with-apple-with-id-token)Docs

On this pageGet your Google credentials

# Google

### [Get your Google credentials](https://www.better-auth.com/docs/authentication/google\#get-your-google-credentials)

To use Google as a social provider, you need to get your Google credentials. You can get them by creating a new project in the [Google Cloud Console](https://console.cloud.google.com/apis/dashboard).

In the Google Cloud Console > Credentials > Authorized redirect URIs, make sure to set the redirect URL to `http://localhost:3000/api/auth/callback/google` for local development. For production, make sure to set the redirect URL as your application domain, e.g. `https://example.com/api/auth/callback/google`. If you change the base path of the auth routes, you should update the redirect URL accordingly.

### [Configure the provider](https://www.better-auth.com/docs/authentication/google\#configure-the-provider)

To configure the provider, you need to pass the `clientId` and `clientSecret` to `socialProviders.google` in your auth configuration.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        google: {
            clientId: process.env.GOOGLE_CLIENT_ID as string,
            clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,
        },
    },
})
```

## [Usage](https://www.better-auth.com/docs/authentication/google\#usage)

### [Sign In with Google](https://www.better-auth.com/docs/authentication/google\#sign-in-with-google)

To sign in with Google, you can use the `signIn.social` function provided by the client. The `signIn` function takes an object with the following properties:

- `provider`: The provider to use. It should be set to `google`.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "google"
    })
}
```

### [Sign In with Google With ID Token](https://www.better-auth.com/docs/authentication/google\#sign-in-with-google-with-id-token)

To sign in with Google using the ID Token, you can use the `signIn.social` function to pass the ID Token.

This is useful when you have the ID Token from Google on the client-side and want to use it to sign in on the server.

If id token is provided no redirection will happen, and the user will be signed in directly.

auth-client.ts

```
const data = await authClient.signIn.social({
    provider: "google",
    idToken: {
        token: // Google ID Token,
        accessToken: // Google Access Token
    }
})
```

If you want to use google one tap, you can use the [One Tap Plugin](https://www.better-auth.com/docs/plugins/one-tap) guide.

[**GitHub** \\
GitHub provider setup and usage.](https://www.better-auth.com/docs/authentication/github) [**Microsoft** \\
Microsoft provider setup and usage.](https://www.better-auth.com/docs/authentication/microsoft)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Get your Google credentials](https://www.better-auth.com/docs/authentication/google#get-your-google-credentials) [Configure the provider](https://www.better-auth.com/docs/authentication/google#configure-the-provider) [Usage](https://www.better-auth.com/docs/authentication/google#usage) [Sign In with Google](https://www.better-auth.com/docs/authentication/google#sign-in-with-google) [Sign In with Google With ID Token](https://www.better-auth.com/docs/authentication/google#sign-in-with-google-with-id-token)Docs

On this pageCreate API Route

# Next.js integration

Better Auth can be easily integrated with Next.js. It'll also comes with utilities to make it easier to use Better Auth with Next.js.

Before you start, make sure you have a Better Auth instance configured. If you haven't done that yet, check out the [installation](https://www.better-auth.com/docs/installation).

### [Create API Route](https://www.better-auth.com/docs/integrations/next\#create-api-route)

We need to mount the handler to an API route. Create a route file inside `/api/auth/[...all]` directory. And add the following code:

api/auth/\[...all\]/route.ts

```
import { auth } from "@/lib/auth";
import { toNextJsHandler } from "better-auth/next-js";

export const { GET, POST } = toNextJsHandler(auth.handler);
```

You can change the path on your better-auth configuration but it's recommended to keep it as `/api/auth/[...all]`

For `pages` route, you need to use `toNodeHandler` instead of `toNextJsHandler` and set `bodyParser` to `false` in the `config` object. Here is an example:

pages/api/auth/\[...all\].ts

```
import { toNodeHandler } from "better-auth/node"
import { auth } from "@/lib/auth"

// Disallow body parsing, we will parse it manually
export const config = { api: { bodyParser: false } }

export default toNodeHandler(auth.handler)
```

## [Create a client](https://www.better-auth.com/docs/integrations/next\#create-a-client)

Create a client instance. You can name the file anything you want. Here we are creating `client.ts` file inside the `lib/` directory.

auth-client.ts

```
import { createAuthClient } from "better-auth/react" // make sure to import from better-auth/react

export const authClient =  createAuthClient({
    //you can pass client configuration here
})
```

Once you have created the client, you can use it to sign up, sign in, and perform other actions.
Some of the actions are reactive. The client use [nano-store](https://github.com/nanostores/nanostores) to store the state and re-render the components when the state changes.

The client also uses [better-fetch](https://github.com/bekacru/better-fetch) to make the requests. You can pass the fetch configuration to the client.

## [RSC and Server actions](https://www.better-auth.com/docs/integrations/next\#rsc-and-server-actions)

The `api` object exported from the auth instance contains all the actions that you can perform on the server. Every endpoint made inside Better Auth is a invocable as a function. Including plugins endpoints.

**Example: Getting Session on a server action**

server.ts

```
import { auth } from "@/lib/auth"
import { headers } from "next/headers"

const someAuthenticatedAction = async () => {
    "use server";
    const session = await auth.api.getSession({
        headers: await headers()
    })
};
```

**Example: Getting Session on a RSC**

```
import { auth } from "@/lib/auth"
import { headers } from "next/headers"

export async function ServerComponent() {
    const session = await auth.api.getSession({
        headers: await headers()
    })
    if(!session) {
        return <div>Not authenticated</div>
    }
    return (
        <div>
            <h1>Welcome {session.user.name}</h1>
        </div>
    )
}
```

### [Server Action Cookies](https://www.better-auth.com/docs/integrations/next\#server-action-cookies)

When you call a function that needs to set cookies, like `signInEmail` or `signUpEmail` in a server action, cookies won’t be set. This is because server actions need to use the `cookies` helper from Next.js to set cookies.

To simplify this, you can use the `nextCookies` plugin, which will automatically set cookies for you whenever a `Set-Cookie` header is present in the response.

auth.ts

```
import { betterAuth } from "better-auth";
import { nextCookies } from "better-auth/next-js";

export const auth = betterAuth({
    //...your config
    plugins: [nextCookies()] // make sure this is the last plugin in the array
})
```

Now, when you call functions that set cookies, they will be automatically set.

```
"use server";
import { auth } from "@/lib/auth"

const signIn = async () => {
    await auth.api.signInEmail({
        body: {
            email: "user@email.com",
            password: "password",
        }
    })
}
```

## [Middleware](https://www.better-auth.com/docs/integrations/next\#middleware)

In Next.js middleware, it's recommended to only check for the existence of a session cookie to handle redirection. To avoid blocking requests by making API or database calls.

You can use the `getSessionCookie` helper from Better Auth for this purpose:

```
import { NextRequest, NextResponse } from "next/server";
import { getSessionCookie } from "better-auth";

export async function middleware(request: NextRequest) {
	const sessionCookie = getSessionCookie(request); // Optionally pass config as the second argument if cookie name or prefix is customized.
	if (!sessionCookie) {
		return NextResponse.redirect(new URL("/", request.url));
	}
	return NextResponse.next();
}

export const config = {
	matcher: ["/dashboard"], // Specify the routes the middleware applies to
};
```

If you need the full session object, you'll have to fetch it from the `/get-session` API route. Since Next.js middleware doesn't support running Node.js APIs directly, you must make an HTTP request.

The example uses [better-fetch](https://better-fetch.vercel.app/), but you can use any fetch library.

```
import { betterFetch } from "@better-fetch/fetch";
import type { auth } from "@/lib/auth";
import { NextRequest, NextResponse } from "next/server";

type Session = typeof auth.$Infer.Session;

export async function middleware(request: NextRequest) {
	const { data: session } = await betterFetch<Session>("/api/auth/get-session", {
		baseURL: request.nextUrl.origin,
		headers: {
			cookie: request.headers.get("cookie") || "", // Forward the cookies from the request
		},
	});

	if (!session) {
		return NextResponse.redirect(new URL("/sign-in", request.url));
	}

	return NextResponse.next();
}

export const config = {
	matcher: ["/dashboard"], // Apply middleware to specific routes
};
```

[**Remix Integration** \\
Integrate Better Auth with Remix.](https://www.better-auth.com/docs/integrations/remix) [**Nuxt Integration** \\
Integrate Better Auth with Nuxt.](https://www.better-auth.com/docs/integrations/nuxt)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Create API Route](https://www.better-auth.com/docs/integrations/next#create-api-route) [Create a client](https://www.better-auth.com/docs/integrations/next#create-a-client) [RSC and Server actions](https://www.better-auth.com/docs/integrations/next#rsc-and-server-actions) [Server Action Cookies](https://www.better-auth.com/docs/integrations/next#server-action-cookies) [Middleware](https://www.better-auth.com/docs/integrations/next#middleware)Docs

On this pageInstallation

# Email OTP

The Email OTP plugin allows user to sign-in, verify their email, or reset their password using a one-time password (OTP) sent to their email address.

## [Installation](https://www.better-auth.com/docs/plugins/email-otp\#installation)

### [Add the plugin to your auth config](https://www.better-auth.com/docs/plugins/email-otp\#add-the-plugin-to-your-auth-config)

To enable email otp in your app, you need to add the `emailOTP` plugin to your auth config.

auth.ts

```
import { betterAuth } from "better-auth"
import { emailOTP } from "better-auth/plugins"

export const auth = betterAuth({
    // ... other config options
    plugins: [\
        emailOTP({\
                async sendVerificationOTP({ email, otp, type}) {\
					// Implement the sendVerificationOTP method to send the OTP to the user's email address\
				},\
        })\
    ]
})
```

### [Add the client plugin](https://www.better-auth.com/docs/plugins/email-otp\#add-the-client-plugin)

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
import { emailOTPClient } from "better-auth/client/plugins"

const authClient =  createAuthClient({
    plugins: [\
        emailOTPClient()\
    ]
})
```

## [Usage](https://www.better-auth.com/docs/plugins/email-otp\#usage)

### [Send OTP](https://www.better-auth.com/docs/plugins/email-otp\#send-otp)

First, send an OTP to the user's email address.

example.ts

```
const { data, error } = await authClient.emailOtp.sendVerificationOtp({
    email: "user-email@email.com",
    type: "sign-in" // or "email-verification", "forget-password"
})
```

### [SignIn with OTP](https://www.better-auth.com/docs/plugins/email-otp\#signin-with-otp)

Once the user provides the OTP, you can sign in the user using the `signIn.emailOTP()` method.

example.ts

```
const { data, error } = await authClient.signIn.emailOtp({
    email: "user-email@email.com",
    otp: "123456"
})
```

If the user is not registered, they'll be automatically registered. If you want to prevent this, you can pass `disableSignUp` as `true` in the options.

### [Verify Email](https://www.better-auth.com/docs/plugins/email-otp\#verify-email)

To verify the user's email address, use the `verifyEmail()` method.

example.ts

```
const { data, error } = await authClient.emailOtp.verifyEmail({
    email: "user-email@email.com",
    otp: "123456"
})
```

### [Reset Password](https://www.better-auth.com/docs/plugins/email-otp\#reset-password)

To reset the user's password, use the `resetPassword()` method.

example.ts

```
const { data, error } = await authClient.emailOtp.resetPassword({
    email: "user-email@email.com",
    otp: "123456",
    password: "password"
})
```

## [Options](https://www.better-auth.com/docs/plugins/email-otp\#options)

- `sendVerificationOTP`: A function that sends the OTP to the user's email address. The function receives an object with the following properties:
  - `email`: The user's email address.
  - `otp`: The OTP to send.
  - `type`: The type of OTP to send. Can be "sign-in", "email-verification", or "forget-password".

### [Example](https://www.better-auth.com/docs/plugins/email-otp\#example)

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    plugins: [\
        emailOTP({\
            async sendVerificationOTP({\
                email,\
                otp,\
                type\
            }) {\
                if (type === "sign-in") {\
                    // Send the OTP for sign-in\
                } else if (type === "email-verification") {\
                    // Send the OTP for email verification\
                } else {\
                    // Send the OTP for password reset\
                }\
            },\
        })\
    ]
})
```

- `otpLength`: The length of the OTP. Defaults to `6`.
- `expiresIn`: The expiry time of the OTP in seconds. Defaults to `300` seconds.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    plugins: [\
        emailOTP({\
            otpLength: 8,\
            expiresIn: 600\
        })\
    ]
})
```

- `sendVerificationOnSignUp`: A boolean value that determines whether to send the OTP when a user signs up. Defaults to `false`.

- `disableSignUp`: A boolean value that determines whether to prevent automatic sign-up when the user is not registered. Defaults to `false`.

- `generateOTP`: A function that generates the OTP. Defaults to a random 6-digit number.


[**Magic link** \\
Magic link plugin](https://www.better-auth.com/docs/plugins/magic-link) [**Passkey** \\
Passkey](https://www.better-auth.com/docs/plugins/passkey)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/email-otp#installation) [Add the plugin to your auth config](https://www.better-auth.com/docs/plugins/email-otp#add-the-plugin-to-your-auth-config) [Add the client plugin](https://www.better-auth.com/docs/plugins/email-otp#add-the-client-plugin) [Usage](https://www.better-auth.com/docs/plugins/email-otp#usage) [Send OTP](https://www.better-auth.com/docs/plugins/email-otp#send-otp) [SignIn with OTP](https://www.better-auth.com/docs/plugins/email-otp#signin-with-otp) [Verify Email](https://www.better-auth.com/docs/plugins/email-otp#verify-email) [Reset Password](https://www.better-auth.com/docs/plugins/email-otp#reset-password) [Options](https://www.better-auth.com/docs/plugins/email-otp#options) [Example](https://www.better-auth.com/docs/plugins/email-otp#example)Docs

On this pageMount the handler

# Express Integration

This guide will show you how to integrate Better Auth with [express.js](https://expressjs.com/).

Before you start, make sure you have a Better Auth instance configured. If you haven't done that yet, check out the [installation](https://www.better-auth.com/docs/installation).

Note that CommonJS (cjs) isn't supported. Use ECMAScript Modules (ESM) by setting `"type": "module"` in your `package.json` or configuring your `tsconfig.json` to use ES modules.

### [Mount the handler](https://www.better-auth.com/docs/integrations/express\#mount-the-handler)

To enable Better Auth to handle requests, we need to mount the handler to an API route. Create a catch-all route to manage all requests to `/api/auth/*` (or any other path specified in your Better Auth options).

Don’t use `express.json()` before the Better Auth handler. Use it only for other routes, or the client API will get stuck on "pending".

server.ts

```
import express from "express";
import { toNodeHandler } from "better-auth/node";
import { auth } from "./auth";

const app = express();
const port = 3005;

app.all("/api/auth/*", toNodeHandler(auth));

// Mount express json middleware after Better Auth handler
// or only apply it to routes that don't interact with Better Auth
app.use(express.json());

app.listen(port, () => {
	console.log(`Example app listening on port ${port}`);
});
```

After completing the setup, start your server. Better Auth will be ready to use. You can send a `GET` request to the `/ok` endpoint ( `/api/auth/ok`) to verify that the server is running.

### [Cors Configuration](https://www.better-auth.com/docs/integrations/express\#cors-configuration)

To add CORS (Cross-Origin Resource Sharing) support to your Express server when integrating Better Auth, you can use the `cors` middleware. Below is an updated example showing how to configure CORS for your server:

```
import express from "express";
import cors from "cors"; // Import the CORS middleware
import { toNodeHandler, fromNodeHeaders } from "better-auth/node";
import { auth } from "./auth";

const app = express();
const port = 3005;

// Configure CORS middleware
app.use(
  cors({
    origin: "http://your-frontend-domain.com", // Replace with your frontend's origin
    methods: ["GET", "POST", "PUT", "DELETE"], // Specify allowed HTTP methods
    credentials: true, // Allow credentials (cookies, authorization headers, etc.)
  })
);
```

### [Getting the User Session](https://www.better-auth.com/docs/integrations/express\#getting-the-user-session)

To retrieve the user's session, you can use the `getSession` method provided by the `auth` object. This method requires the request headers to be passed in a specific format. To simplify this process, Better Auth provides a `fromNodeHeaders` helper function that converts Node.js request headers to the format expected by Better Auth (a `Headers` object).

Here's an example of how to use `getSession` in an Express route:

server.ts

```
import { fromNodeHeaders } from "better-auth/node";
import { auth } from "./auth"; //your better auth instance

app.get("/api/me", async (req, res) => {
 	const session = await auth.api.getSession({
      headers: fromNodeHeaders(req.headers),
    });
	return res.json(session);
});
```

[**Hono Integration** \\
Integrate Better Auth with Hono.](https://www.better-auth.com/docs/integrations/hono) [**Elysia Integration** \\
Integrate Better Auth with Elysia.](https://www.better-auth.com/docs/integrations/elysia)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Mount the handler](https://www.better-auth.com/docs/integrations/express#mount-the-handler) [Cors Configuration](https://www.better-auth.com/docs/integrations/express#cors-configuration) [Getting the User Session](https://www.better-auth.com/docs/integrations/express#getting-the-user-session)# 500

## Internal Server Error.[BETTER-AUTH.](https://demo.better-auth.com/)

Toggle theme

### Better Auth.

Official demo to showcase [better-auth.](https://better-auth.com/) features and capabilities.

All features on this demo are Implemented with better auth without any custom backend code

Email & Password.Organization \| Teams.Passkeys.Multi Factor.Password Reset.Email Verification.Roles & Permissions.Rate Limiting.Session Management.

[Sign In](https://demo.better-auth.com/sign-in)Docs

On this pageInstallation

# Phone Number

The phone number plugin extends the authentication system by allowing users to sign in and sign up using their phone number. It includes OTP (One-Time Password) functionality to verify phone numbers.

## [Installation](https://www.better-auth.com/docs/plugins/phone-number\#installation)

### [Add Plugin to the server](https://www.better-auth.com/docs/plugins/phone-number\#add-plugin-to-the-server)

auth.ts

```
import { betterAuth } from "better-auth"
import { phoneNumber } from "better-auth/plugins"

const auth = betterAuth({
    plugins: [\
        phoneNumber({\
            sendOTP: ({ phoneNumber, code }, request) => {\
                // Implement sending OTP code via SMS\
            }\
        })\
    ]
})
```

### [Migrate the database](https://www.better-auth.com/docs/plugins/phone-number\#migrate-the-database)

Run the migration or generate the schema to add the necessary fields and tables to the database.

migrategenerate

```
npx @better-auth/cli migrate
```

See the [Schema](https://www.better-auth.com/docs/plugins/phone-number#schema) section to add the fields manually.

### [Add the client plugin](https://www.better-auth.com/docs/plugins/phone-number\#add-the-client-plugin)

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
import { phoneNumberClient } from "better-auth/client/plugins"

const authClient =  createAuthClient({
    plugins: [\
        phoneNumberClient()\
    ]
})
```

## [Usage](https://www.better-auth.com/docs/plugins/phone-number\#usage)

### [Send OTP for Verification](https://www.better-auth.com/docs/plugins/phone-number\#send-otp-for-verification)

To send an OTP to a user's phone number for verification, you can use the `sendVerificationCode` endpoint.

auth-client.ts

```
await authClient.phoneNumber.sendOtp({
    phoneNumber: "+1234567890"
})
```

### [Verify Phone Number](https://www.better-auth.com/docs/plugins/phone-number\#verify-phone-number)

After the OTP is sent, users can verify their phone number by providing the code.

auth-client.ts

```
const isVerified = await authClient.phoneNumber.verify({
    phoneNumber: "+1234567890",
    code: "123456"
})
```

When the phone number is verified, the `phoneNumberVerified` field in the user table is set to `true`. If `disableSession` is not set to `true`, a session is created for the user. Additionally, if `callbackOnVerification` is provided, it will be called.

### [Allow Sign-Up with Phone Number](https://www.better-auth.com/docs/plugins/phone-number\#allow-sign-up-with-phone-number)

to allow users to sign up using their phone number, you can pass `signUpOnVerification` option to your plugin configuration. It requires you to pass `getTempEmail` function to generate a temporary email for the user.

auth.ts

```
export const auth = betterAuth({
    plugins: [\
        phoneNumber({\
            sendOTP: ({ phoneNumber, code }, request) => {\
                // Implement sending OTP code via SMS\
            },\
            signUpOnVerification: {\
                getTempEmail: (phoneNumber) => {\
                    return `${phoneNumber}@my-site.com`\
                },\
                //optionally, you can also pass `getTempName` function to generate a temporary name for the user\
                getTempName: (phoneNumber) => {\
                    return phoneNumber //by default, it will use the phone number as the name\
                }\
            }\
        })\
    ]
})
```

### [SignIn with Phone number](https://www.better-auth.com/docs/plugins/phone-number\#signin-with-phone-number)

In addition to signing in a user using send-verify flow, you can also use phone number as an identifier and sign in a user using phone number and password.

```
await authClient.signIn.phoneNumber({
    phoneNumber: "+123456789",
    password: "password",
    rememberMe: true //optional defaults to true
})
```

### [Update Phone Number](https://www.better-auth.com/docs/plugins/phone-number\#update-phone-number)

Updating phone number uses the same process as verifying a phone number. The user will receive an OTP code to verify the new phone number.

auth-client.ts

```
await authClient.phoneNumber.sendOtp({
    phoneNumber: "+1234567890" // New phone number
})
```

Then verify the new phone number with the OTP code.

auth-client.ts

```
const isVerified = await authClient.phoneNumber.verify({
    phoneNumber: "+1234567890",
    code: "123456",
    updatePhoneNumber: true // Set to true to update the phone number
})
```

if user session exist the phone number will be updated automatically

### [Disable Session Creation](https://www.better-auth.com/docs/plugins/phone-number\#disable-session-creation)

By default, the plugin creates a session for the user after verifying the phone number. You can disable this behavior by passing `disableSession: true` to the `verify` method.

auth-client.ts

```
const isVerified = await authClient.phoneNumber.verify({
    phoneNumber: "+1234567890",
    code: "123456",
    disableSession: true
})
```

## [Options](https://www.better-auth.com/docs/plugins/phone-number\#options)

- `otpLength`: The length of the OTP code to be generated. Default is `6`.
- `sendOTP`: A function that sends the OTP code to the user's phone number. It takes the phone number and the OTP code as arguments.
- `verifyOTP`: A custom function to verify the OTP code. It takes the phone number and the OTP code as arguments and returns a boolean indicating whether the code is valid.
- `expiresIn`: The time in seconds after which the OTP code expires. Default is `300` seconds.
- `callbackOnVerification`: A function that is called after the phone number is verified. It takes the phone number and the user object as the first argument and a request object as the second argument.

```
export const auth = betterAuth({
    plugins: [\
        phoneNumber({\
            sendOTP: ({ phoneNumber, code }, request) => {\
                // Implement sending OTP code via SMS\
            },\
            callbackOnVerification: async ({ phoneNumber, user }, request) => {\
                // Implement callback after phone number verification\
            }\
        })\
    ]
})
```

- `phoneNumberValidator`: A custom function to validate the phone number. It takes the phone number as an argument and returns a boolean indicating whether the phone number is valid.
- `signUpOnVerification`: An object with the following properties:
  - `getTempEmail`: A function that generates a temporary email for the user. It takes the phone number as an argument and returns the temporary email.
  - `getTempName`: A function that generates a temporary name for the user. It takes the phone number as an argument and returns the temporary name.

## [Schema](https://www.better-auth.com/docs/plugins/phone-number\#schema)

The plugin requires 2 fields to be added to the user table

### [User Table](https://www.better-auth.com/docs/plugins/phone-number\#user-table)

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| phoneNumber | string | - | The phone number of the user |
| phoneNumberVerified | boolean | - | Whether the phone number is verified or not |

[**Anonymous** \\
Anonymous plugin for Better Auth.](https://www.better-auth.com/docs/plugins/anonymous) [**Magic link** \\
Magic link plugin](https://www.better-auth.com/docs/plugins/magic-link)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/phone-number#installation) [Add Plugin to the server](https://www.better-auth.com/docs/plugins/phone-number#add-plugin-to-the-server) [Migrate the database](https://www.better-auth.com/docs/plugins/phone-number#migrate-the-database) [Add the client plugin](https://www.better-auth.com/docs/plugins/phone-number#add-the-client-plugin) [Usage](https://www.better-auth.com/docs/plugins/phone-number#usage) [Send OTP for Verification](https://www.better-auth.com/docs/plugins/phone-number#send-otp-for-verification) [Verify Phone Number](https://www.better-auth.com/docs/plugins/phone-number#verify-phone-number) [Allow Sign-Up with Phone Number](https://www.better-auth.com/docs/plugins/phone-number#allow-sign-up-with-phone-number) [SignIn with Phone number](https://www.better-auth.com/docs/plugins/phone-number#signin-with-phone-number) [Update Phone Number](https://www.better-auth.com/docs/plugins/phone-number#update-phone-number) [Disable Session Creation](https://www.better-auth.com/docs/plugins/phone-number#disable-session-creation) [Options](https://www.better-auth.com/docs/plugins/phone-number#options) [Schema](https://www.better-auth.com/docs/plugins/phone-number#schema) [User Table](https://www.better-auth.com/docs/plugins/phone-number#user-table)Own Your Auth

The most comprehensive authentication framework for TypeScript.

git:(main)  x

npm addbetter-auth

[Get Started](https://beta.better-auth.com/docs)
Create Sign in Box

auth.ts

client.ts

Copy code

01

02

03

04

05

06

07

08

09

10

11

12

```px-4

export const auth = betterAuth({
	database: new Pool({
		connectionString: DATABASE_URL,
	}),
    emailAndPassword: {
        enabled: true,
    },
	plugins: [\
	  organization(),\
      twoFactor(),\
	]
})
```

[Demo](https://demo.better-auth.com/)

Framework Agnostic

Supports for popular **frameworks**.

Supports popular frameworks, including React, Vue, Svelte, Astro, Solid, Next.js, Nuxt, Tanstack Start, Hono, and more. [Learn more](https://beta.better-auth.com/docs)

Authentication

Email & Password **Authentication**.

Built-in support for email and password authentication, with session and account management features. [Learn more](https://beta.better-auth.com/docs)

Social Sign-on

Support multiple **OAuth providers**.

Allow users to sign in with their accounts, including GitHub, Google, Discord, Twitter, and more. [Learn more](https://beta.better-auth.com/docs)

Two Factor

Multi Factor **Authentication**.

Secure your users accounts with two factor authentication with a few lines of code. [Learn more](https://beta.better-auth.com/docs)

Multi Tenant

**Organization** Members and Invitation.

Multi tenant support with members, organization, teams and invitation with access control. [Learn more](https://beta.better-auth.com/docs)

Plugin Ecosystem

A lot more features with **plugins**.

Improve your application experience with our official plugins and those created by the community. [Learn more](https://beta.better-auth.com/docs)

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"Digging into better-auth.com this weekend. Check it out really cool lib."

![avatar](https://pbs.twimg.com/profile_images/1849574174785732608/ltlLcyaT_400x400.jpg)

##### Kevin Kern

Developer

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1849386198537560064/NKFdXusJ_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"I love the js ecosystem. There’s always something disruptive happening. Just heard about @better\_auth."

![avatar](https://pbs.twimg.com/profile_images/1835593762833354752/1bN3_d3F_400x400.jpg)

##### Tim⚡Dev

Developer

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"Digging into better-auth.com this weekend. Check it out really cool lib."

![avatar](https://pbs.twimg.com/profile_images/1849574174785732608/ltlLcyaT_400x400.jpg)

##### Kevin Kern

Developer

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1849386198537560064/NKFdXusJ_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"I love the js ecosystem. There’s always something disruptive happening. Just heard about @better\_auth."

![avatar](https://pbs.twimg.com/profile_images/1835593762833354752/1bN3_d3F_400x400.jpg)

##### Tim⚡Dev

Developer

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"Digging into better-auth.com this weekend. Check it out really cool lib."

![avatar](https://pbs.twimg.com/profile_images/1849574174785732608/ltlLcyaT_400x400.jpg)

##### Kevin Kern

Developer

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1849386198537560064/NKFdXusJ_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"I love the js ecosystem. There’s always something disruptive happening. Just heard about @better\_auth."

![avatar](https://pbs.twimg.com/profile_images/1835593762833354752/1bN3_d3F_400x400.jpg)

##### Tim⚡Dev

Developer

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"Digging into better-auth.com this weekend. Check it out really cool lib."

![avatar](https://pbs.twimg.com/profile_images/1849574174785732608/ltlLcyaT_400x400.jpg)

##### Kevin Kern

Developer

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1849386198537560064/NKFdXusJ_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"I love the js ecosystem. There’s always something disruptive happening. Just heard about @better\_auth."

![avatar](https://pbs.twimg.com/profile_images/1835593762833354752/1bN3_d3F_400x400.jpg)

##### Tim⚡Dev

Developer

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"Digging into better-auth.com this weekend. Check it out really cool lib."

![avatar](https://pbs.twimg.com/profile_images/1849574174785732608/ltlLcyaT_400x400.jpg)

##### Kevin Kern

Developer

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1849386198537560064/NKFdXusJ_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"I love the js ecosystem. There’s always something disruptive happening. Just heard about @better\_auth."

![avatar](https://pbs.twimg.com/profile_images/1835593762833354752/1bN3_d3F_400x400.jpg)

##### Tim⚡Dev

Developer

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"Digging into better-auth.com this weekend. Check it out really cool lib."

![avatar](https://pbs.twimg.com/profile_images/1849574174785732608/ltlLcyaT_400x400.jpg)

##### Kevin Kern

Developer

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1849386198537560064/NKFdXusJ_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"I love the js ecosystem. There’s always something disruptive happening. Just heard about @better\_auth."

![avatar](https://pbs.twimg.com/profile_images/1835593762833354752/1bN3_d3F_400x400.jpg)

##### Tim⚡Dev

Developer

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"Digging into better-auth.com this weekend. Check it out really cool lib."

![avatar](https://pbs.twimg.com/profile_images/1849574174785732608/ltlLcyaT_400x400.jpg)

##### Kevin Kern

Developer

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1849386198537560064/NKFdXusJ_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"I love the js ecosystem. There’s always something disruptive happening. Just heard about @better\_auth."

![avatar](https://pbs.twimg.com/profile_images/1835593762833354752/1bN3_d3F_400x400.jpg)

##### Tim⚡Dev

Developer

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"Digging into better-auth.com this weekend. Check it out really cool lib."

![avatar](https://pbs.twimg.com/profile_images/1849574174785732608/ltlLcyaT_400x400.jpg)

##### Kevin Kern

Developer

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1849386198537560064/NKFdXusJ_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"I love the js ecosystem. There’s always something disruptive happening. Just heard about @better\_auth."

![avatar](https://pbs.twimg.com/profile_images/1835593762833354752/1bN3_d3F_400x400.jpg)

##### Tim⚡Dev

Developer

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"Digging into better-auth.com this weekend. Check it out really cool lib."

![avatar](https://pbs.twimg.com/profile_images/1849574174785732608/ltlLcyaT_400x400.jpg)

##### Kevin Kern

Developer

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1849386198537560064/NKFdXusJ_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"I love the js ecosystem. There’s always something disruptive happening. Just heard about @better\_auth."

![avatar](https://pbs.twimg.com/profile_images/1835593762833354752/1bN3_d3F_400x400.jpg)

##### Tim⚡Dev

Developer

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"Digging into better-auth.com this weekend. Check it out really cool lib."

![avatar](https://pbs.twimg.com/profile_images/1849574174785732608/ltlLcyaT_400x400.jpg)

##### Kevin Kern

Developer

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1849386198537560064/NKFdXusJ_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"I love the js ecosystem. There’s always something disruptive happening. Just heard about @better\_auth."

![avatar](https://pbs.twimg.com/profile_images/1835593762833354752/1bN3_d3F_400x400.jpg)

##### Tim⚡Dev

Developer

"Solved auth for my next project and I’m pretty happy with it: @better\_auth with @prisma serverless database. What a great team!."

![avatar](https://pbs.twimg.com/profile_images/1788425134170066944/wPanxB4f_400x400.jpg)

##### Paul Jasper

Indie hacker

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"Better Auth looks so nice and complete. Will definitely try it out after v1. I am currently with Nuxt Auth Utils it is great to start but Better Auth might be the way to go for bigger projects. 👀."

![avatar](https://pbs.twimg.com/profile_images/1532002119972274177/D3SKwakL_400x400.jpg)

##### Yusuf Mansur Özer

Developer

"Solved auth for my next project and I’m pretty happy with it: @better\_auth with @prisma serverless database. What a great team!."

![avatar](https://pbs.twimg.com/profile_images/1788425134170066944/wPanxB4f_400x400.jpg)

##### Paul Jasper

Indie hacker

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"Better Auth looks so nice and complete. Will definitely try it out after v1. I am currently with Nuxt Auth Utils it is great to start but Better Auth might be the way to go for bigger projects. 👀."

![avatar](https://pbs.twimg.com/profile_images/1532002119972274177/D3SKwakL_400x400.jpg)

##### Yusuf Mansur Özer

Developer

"Solved auth for my next project and I’m pretty happy with it: @better\_auth with @prisma serverless database. What a great team!."

![avatar](https://pbs.twimg.com/profile_images/1788425134170066944/wPanxB4f_400x400.jpg)

##### Paul Jasper

Indie hacker

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"Better Auth looks so nice and complete. Will definitely try it out after v1. I am currently with Nuxt Auth Utils it is great to start but Better Auth might be the way to go for bigger projects. 👀."

![avatar](https://pbs.twimg.com/profile_images/1532002119972274177/D3SKwakL_400x400.jpg)

##### Yusuf Mansur Özer

Developer

"Solved auth for my next project and I’m pretty happy with it: @better\_auth with @prisma serverless database. What a great team!."

![avatar](https://pbs.twimg.com/profile_images/1788425134170066944/wPanxB4f_400x400.jpg)

##### Paul Jasper

Indie hacker

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"Better Auth looks so nice and complete. Will definitely try it out after v1. I am currently with Nuxt Auth Utils it is great to start but Better Auth might be the way to go for bigger projects. 👀."

![avatar](https://pbs.twimg.com/profile_images/1532002119972274177/D3SKwakL_400x400.jpg)

##### Yusuf Mansur Özer

Developer

"Solved auth for my next project and I’m pretty happy with it: @better\_auth with @prisma serverless database. What a great team!."

![avatar](https://pbs.twimg.com/profile_images/1788425134170066944/wPanxB4f_400x400.jpg)

##### Paul Jasper

Indie hacker

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"Better Auth looks so nice and complete. Will definitely try it out after v1. I am currently with Nuxt Auth Utils it is great to start but Better Auth might be the way to go for bigger projects. 👀."

![avatar](https://pbs.twimg.com/profile_images/1532002119972274177/D3SKwakL_400x400.jpg)

##### Yusuf Mansur Özer

Developer

"Solved auth for my next project and I’m pretty happy with it: @better\_auth with @prisma serverless database. What a great team!."

![avatar](https://pbs.twimg.com/profile_images/1788425134170066944/wPanxB4f_400x400.jpg)

##### Paul Jasper

Indie hacker

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"Better Auth looks so nice and complete. Will definitely try it out after v1. I am currently with Nuxt Auth Utils it is great to start but Better Auth might be the way to go for bigger projects. 👀."

![avatar](https://pbs.twimg.com/profile_images/1532002119972274177/D3SKwakL_400x400.jpg)

##### Yusuf Mansur Özer

Developer

"Solved auth for my next project and I’m pretty happy with it: @better\_auth with @prisma serverless database. What a great team!."

![avatar](https://pbs.twimg.com/profile_images/1788425134170066944/wPanxB4f_400x400.jpg)

##### Paul Jasper

Indie hacker

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"Better Auth looks so nice and complete. Will definitely try it out after v1. I am currently with Nuxt Auth Utils it is great to start but Better Auth might be the way to go for bigger projects. 👀."

![avatar](https://pbs.twimg.com/profile_images/1532002119972274177/D3SKwakL_400x400.jpg)

##### Yusuf Mansur Özer

Developer

"Solved auth for my next project and I’m pretty happy with it: @better\_auth with @prisma serverless database. What a great team!."

![avatar](https://pbs.twimg.com/profile_images/1788425134170066944/wPanxB4f_400x400.jpg)

##### Paul Jasper

Indie hacker

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"Better Auth looks so nice and complete. Will definitely try it out after v1. I am currently with Nuxt Auth Utils it is great to start but Better Auth might be the way to go for bigger projects. 👀."

![avatar](https://pbs.twimg.com/profile_images/1532002119972274177/D3SKwakL_400x400.jpg)

##### Yusuf Mansur Özer

Developer

"Solved auth for my next project and I’m pretty happy with it: @better\_auth with @prisma serverless database. What a great team!."

![avatar](https://pbs.twimg.com/profile_images/1788425134170066944/wPanxB4f_400x400.jpg)

##### Paul Jasper

Indie hacker

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"Better Auth looks so nice and complete. Will definitely try it out after v1. I am currently with Nuxt Auth Utils it is great to start but Better Auth might be the way to go for bigger projects. 👀."

![avatar](https://pbs.twimg.com/profile_images/1532002119972274177/D3SKwakL_400x400.jpg)

##### Yusuf Mansur Özer

Developer

"Solved auth for my next project and I’m pretty happy with it: @better\_auth with @prisma serverless database. What a great team!."

![avatar](https://pbs.twimg.com/profile_images/1788425134170066944/wPanxB4f_400x400.jpg)

##### Paul Jasper

Indie hacker

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"Better Auth looks so nice and complete. Will definitely try it out after v1. I am currently with Nuxt Auth Utils it is great to start but Better Auth might be the way to go for bigger projects. 👀."

![avatar](https://pbs.twimg.com/profile_images/1532002119972274177/D3SKwakL_400x400.jpg)

##### Yusuf Mansur Özer

Developer

Own your auth

**Roll your own auth with confidence in minutes!**

[Star on GitHub\\
\\
8.1k](https://github.com/better-auth/better-auth)

* * *# 500

## Internal Server Error.Docs

On this pageOverview

# Testing in Better Auth

## [Overview](https://www.better-auth.com/docs/contribute/testing\#overview)

We use Vitest as our testing framework of choice. Currently, we focus on unit tests, with plans to expand to integration testing in the future.
This guide will help you understand our testing philosophy and how to write effective tests.

We expect you to have knowledge of Vitest before you start writing tests. If
you're new to Vitest, we recommend you read the [Vitest\\
documentation](https://vitest.dev/guide/) first.

## [Testing Philosophy](https://www.better-auth.com/docs/contribute/testing\#testing-philosophy)

Our approach to testing emphasizes:

- Simplicity over complexity
- Real implementations over mocks
- Co-location of tests with source code
- Minimal test setup
- Clear and readable test cases

## [Getting Started](https://www.better-auth.com/docs/contribute/testing\#getting-started)

### [Setup](https://www.better-auth.com/docs/contribute/testing\#setup)

```
# Install dependencies including Vitest
pnpm install

# Run tests
pnpm run test
```

## [Test Structure](https://www.better-auth.com/docs/contribute/testing\#test-structure)

### [File Organization](https://www.better-auth.com/docs/contribute/testing\#file-organization)

We follow a co-location strategy for tests. Place your test files next to the source files they test:

auth

auth.ts

auth.test.ts

plugins

oauth.ts

oauth.test.ts

### [Test File Naming](https://www.better-auth.com/docs/contribute/testing\#test-file-naming)

- Use `.test.ts` extension for test files
- Name test files after the module they test
- For TypeScript, use `.test.ts` or `.test.tsx` for React components

## [Writing Tests](https://www.better-auth.com/docs/contribute/testing\#writing-tests)

### [Basic Test Structure](https://www.better-auth.com/docs/contribute/testing\#basic-test-structure)

This is just example code, and isn't meant to be used as-is. It's meant to
demonstrate the structure of a test file.

auth.test.ts

```
//...
import { describe, it, expect } from "vitest";
import { getTestInstance } from "./test-utils/test-instance";

describe("Authentication Module", () => {
  it("should successfully authenticate a user", async () => {
    const { client } = getTestInstance();
    const result = await client.signIn.email({
      email: "hello@gmail.com",
      password: "123456",
    });

    expect(result.success).toBe(true);
    expect(result.user).toBeDefined();
  });
});
```

### [Using `getTestInstance`](https://www.better-auth.com/docs/contribute/testing\#using-gettestinstance)

The test instance provides multiple handy properties that you can use to test your feature.

```
import { getTestInstance } from "../test-utils";

const {
  client,
  auth,
  cookieSetter,
  customFetchImpl,
  db,
  sessionSetter,
  signInWithTestUser,
  signInWithUser,
  testUser,
} = getTestInstance();
```

Only create custom instances when needed

```
import { getTestInstance } from "../test-utils";

const { auth } = getTestInstance({
  customConfig: {
    // your custom configuration
  },
});
```

## [Best Practices](https://www.better-auth.com/docs/contribute/testing\#best-practices)

### [Do's](https://www.better-auth.com/docs/contribute/testing\#dos)

- Write descriptive test names that explain the expected behavior
- Test both success and failure cases
- Keep tests focused and atomic
- Use setup and teardown when needed
- Test edge cases and boundary conditions

This is just example code, and isn't meant to be used as-is. It's meant to
demonstrate the best Practices of testing.

```
describe("User Authentication", () => {
  it("should reject invalid credentials", async () => {
    const { client } = getTestInstance();
    const result = await client.signIn.email({
      email: "invalid@example.com",
      password: "wrong",
    });

    expect(result.success).toBe(false);
    expect(result.error).toBeDefined();
  });

  it("should handle empty inputs appropriately", async () => {
    const { client } = getTestInstance();
    const result = await client.signIn.email({
      email: "",
      password: "",
    });

    expect(result.success).toBe(false);
    expect(result.error).toMatch(/required/);
  });
});
```

### [Don'ts](https://www.better-auth.com/docs/contribute/testing\#donts)

- Don't create unnecessary mocks
- Don't test implementation details
- Don't create separate test folders
- Don't write brittle tests
- Don't test external libraries

## [Future Plans](https://www.better-auth.com/docs/contribute/testing\#future-plans)

- Implement integration testing
- Add end-to-end testing
- Expand API testing coverage
- Add performance testing
- Implement snapshot testing where appropriate

## [Contributing](https://www.better-auth.com/docs/contribute/testing\#contributing)

When submitting a PR:

- Ensure all tests pass
- Add tests for new features
- Update tests for modified features
- Follow existing test patterns
- Include meaningful assertions

Need help? Feel free to reach out in our [Discord server](https://discord.gg/GYC3W7tZzb)!

[**Areas To Contribute** \\
Areas to contribute to BetterAuth](https://www.better-auth.com/docs/contribute/areas-to-contribute) [**Documenting** \\
Documentation Guide for Better Auth](https://www.better-auth.com/docs/contribute/documenting)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Overview](https://www.better-auth.com/docs/contribute/testing#overview) [Testing Philosophy](https://www.better-auth.com/docs/contribute/testing#testing-philosophy) [Getting Started](https://www.better-auth.com/docs/contribute/testing#getting-started) [Setup](https://www.better-auth.com/docs/contribute/testing#setup) [Test Structure](https://www.better-auth.com/docs/contribute/testing#test-structure) [File Organization](https://www.better-auth.com/docs/contribute/testing#file-organization) [Test File Naming](https://www.better-auth.com/docs/contribute/testing#test-file-naming) [Writing Tests](https://www.better-auth.com/docs/contribute/testing#writing-tests) [Basic Test Structure](https://www.better-auth.com/docs/contribute/testing#basic-test-structure) [Using `getTestInstance`](https://www.better-auth.com/docs/contribute/testing#using-gettestinstance) [Best Practices](https://www.better-auth.com/docs/contribute/testing#best-practices) [Do's](https://www.better-auth.com/docs/contribute/testing#dos) [Don'ts](https://www.better-auth.com/docs/contribute/testing#donts) [Future Plans](https://www.better-auth.com/docs/contribute/testing#future-plans) [Contributing](https://www.better-auth.com/docs/contribute/testing#contributing)Docs

On this pageGet your GitLab credentials

# GitLab

### [Get your GitLab credentials](https://www.better-auth.com/docs/authentication/gitlab\#get-your-gitlab-credentials)

To use GitLab sign in, you need a client ID and client secret. [GitLab OAuth documentation](https://docs.gitlab.com/ee/api/oauth2.html).

Make sure to set the redirect URL to `http://localhost:3000/api/auth/callback/gitlab` for local development. For production, you should set it to the URL of your application. If you change the base path of the auth routes, you should update the redirect URL accordingly.

### [Configure the provider](https://www.better-auth.com/docs/authentication/gitlab\#configure-the-provider)

To configure the provider, you need to import the provider and pass it to the `socialProviders` option of the auth instance.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        gitlab: {
            clientId: process.env.GITLAB_CLIENT_ID as string,
            clientSecret: process.env.GITLAB_CLIENT_SECRET as string,
            issuer: process.env.GITLAB_ISSUER as string,
        },
    },
})
```

### [Sign In with GitLab](https://www.better-auth.com/docs/authentication/gitlab\#sign-in-with-gitlab)

To sign in with GitLab, you can use the `signIn.social` function provided by the client. The `signIn` function takes an object with the following properties:

- `provider`: The provider to use. It should be set to `gitlab`.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "gitlab"
    })
}
```

[**LinkedIn** \\
LinkedIn Provider](https://www.better-auth.com/docs/authentication/linkedin) [**Reddit** \\
Reddit provider setup and usage.](https://www.better-auth.com/docs/authentication/reddit)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Get your GitLab credentials](https://www.better-auth.com/docs/authentication/gitlab#get-your-gitlab-credentials) [Configure the provider](https://www.better-auth.com/docs/authentication/gitlab#configure-the-provider) [Sign In with GitLab](https://www.better-auth.com/docs/authentication/gitlab#sign-in-with-gitlab)[BETTER-AUTH.](https://demo.better-auth.com/)

Toggle theme

Sign InSign Up

### Sign In

Enter your email below to login to your account

Email

Password [Forgot your password?](https://demo.better-auth.com/forget-password)

Show password

Remember me

Login

Sign-in with Passkey

Secured by better-auth.

### Sign Up

Enter your information to create an account

First name

Last name

Email

Password

Show password

Confirm Password

Show password

Profile Image (optional)

Create an account

Secured by better-auth.Docs

On this pageGet your GitHub credentials

# GitHub

### [Get your GitHub credentials](https://www.better-auth.com/docs/authentication/github\#get-your-github-credentials)

To use GitHub sign in, you need a client ID and client secret. You can get them from the [GitHub Developer Portal](https://github.com/settings/developers).

Make sure to set the redirect URL to `http://localhost:3000/api/auth/callback/github` for local development. For production, you should set it to the URL of your application. If you change the base path of the auth routes, you should update the redirect URL accordingly.

### [Configure the provider](https://www.better-auth.com/docs/authentication/github\#configure-the-provider)

To configure the provider, you need to import the provider and pass it to the `socialProviders` option of the auth instance.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        github: {
            clientId: process.env.GITHUB_CLIENT_ID as string,
            clientSecret: process.env.GITHUB_CLIENT_SECRET as string,
        },
    },
})
```

### [Sign In with GitHub](https://www.better-auth.com/docs/authentication/github\#sign-in-with-github)

To sign in with GitHub, you can use the `signIn.social` function provided by the client. The `signIn` function takes an object with the following properties:

- `provider`: The provider to use. It should be set to `github`.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "github"
    })
}
```

[**Facebook** \\
Facebook provider setup and usage.](https://www.better-auth.com/docs/authentication/facebook) [**Google** \\
Google provider setup and usage.](https://www.better-auth.com/docs/authentication/google)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Get your GitHub credentials](https://www.better-auth.com/docs/authentication/github#get-your-github-credentials) [Configure the provider](https://www.better-auth.com/docs/authentication/github#configure-the-provider) [Sign In with GitHub](https://www.better-auth.com/docs/authentication/github#sign-in-with-github)Docs

On this pageMount the handler

# SvelteKit Integration

Before you start, make sure you have a Better Auth instance configured. If you haven't done that yet, check out the [installation](https://www.better-auth.com/docs/installation).

### [Mount the handler](https://www.better-auth.com/docs/integrations/svelte-kit\#mount-the-handler)

We need to mount the handler to SvelteKit server hook.

hooks.server.ts

```
import { auth } from "$lib/auth";
import { svelteKitHandler } from "better-auth/svelte-kit";

export async function handle({ event, resolve }) {
	return svelteKitHandler({ event, resolve, auth });
}
```

## [Create a client](https://www.better-auth.com/docs/integrations/svelte-kit\#create-a-client)

Create a client instance. You can name the file anything you want. Here we are creating `client.ts` file inside the `lib/` directory.

auth-client.ts

```
import { createAuthClient } from "better-auth/svelte" // make sure to import from better-auth/svelte

export const authClient = createAuthClient({
    // you can pass client configuration here
})
```

Once you have created the client, you can use it to sign up, sign in, and perform other actions.
Some of the actions are reactive. The client use [nano-store](https://github.com/nanostores/nanostores) to store the state and reflect changes when there is a change like a user signing in or out affecting the session state.

### [Example usage](https://www.better-auth.com/docs/integrations/svelte-kit\#example-usage)

```
<script lang="ts">
  import { authClient } from "$lib/client";
  const session = authClient.useSession();
</script>
    <div>
      {#if $session.data}
        <div>
          <p>
            {$session?.data?.user.name}
          </p>
          <button
            on:click={async () => {
              await authClient.signOut();
            }}
          >
            Sign Out
          </button>
        </div>
      {:else}
        <button
          on:click={async () => {
            await authClient.signIn.social({
              provider: "github",
            });
          }}
        >
          Continue with github
        </button>
      {/if}
    </div>
```

### [Example: Getting User session and role in a layout](https://www.better-auth.com/docs/integrations/svelte-kit\#example-getting-user-session-and-role-in-a-layout)

+layout.server.ts

```
import type { LayoutServerLoad } from './$types';
import { error, redirect } from '@sveltejs/kit';
import { auth } from '$lib/auth';


export const load: LayoutServerLoad = async ({ request }) => {
    const session = await auth.api.getSession({
          headers: request.headers
    });
    if (!session) {
        console.log('Admin : No session');
        throw redirect(302, '/login');
    }
    if (session.user.role !== 'admin') {
        console.log('Admin : Not admin');
        throw error(403, 'Forbidden');
    }
};
```

### [Example: Storing session on locals and protecting a route with layout](https://www.better-auth.com/docs/integrations/svelte-kit\#example-storing-session-on-locals-and-protecting-a-route-with-layout)

We first get the session and set it to event.locals

hooks.server.ts

```
import type { Handle } from '@sveltejs/kit';
import { auth } from '$lib/auth-client';

export const handle: Handle = async ({ event, resolve }) => {
  // Get the session
  const session = await auth.api.getSession({
    headers: event.request.headers
  });
  // Set session and user to locals
  event.locals.session = session?.data?.session;
  event.locals.user = session?.data?.user;

  const response = await resolve(event);
  return response;
};
```

Then on the +layout.server.ts of the protected routes

+layout.server.ts

```
import type { LayoutServerLoad } from './$types';
import { error, redirect } from '@sveltejs/kit';

export const load: LayoutServerLoad = async ({ locals }) => {
    const session = locals.session;
    const user = locals.user;

    if (!session) {
        console.log('Admin : No session');
        throw redirect(302, '/login');
    }
    if (user?.role !== 'admin') {
        console.log('Admin : Not admin');
        throw error(403, 'Forbidden');
    }
};
```

if you do this , make sure to also set the types on your app.d.ts

app.d.ts

```
// See https://kit.svelte.dev/docs/types#app
// for information about these interfaces

declare global {
	namespace App {
		interface Locals {
			session: Session | undefined;
			user: User | undefined;
		}
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface Platform {}
	}
}

export { };
```

[**Nuxt Integration** \\
Integrate Better Auth with Nuxt.](https://www.better-auth.com/docs/integrations/nuxt) [**SolidStart Integration** \\
Integrate Better Auth with SolidStart.](https://www.better-auth.com/docs/integrations/solid-start)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Mount the handler](https://www.better-auth.com/docs/integrations/svelte-kit#mount-the-handler) [Create a client](https://www.better-auth.com/docs/integrations/svelte-kit#create-a-client) [Example usage](https://www.better-auth.com/docs/integrations/svelte-kit#example-usage) [Example: Getting User session and role in a layout](https://www.better-auth.com/docs/integrations/svelte-kit#example-getting-user-session-and-role-in-a-layout) [Example: Storing session on locals and protecting a route with layout](https://www.better-auth.com/docs/integrations/svelte-kit#example-storing-session-on-locals-and-protecting-a-route-with-layout)Docs

On this pageGet your Spotify Credentials

# Spotify

### [Get your Spotify Credentials](https://www.better-auth.com/docs/authentication/spotify\#get-your-spotify-credentials)

To use Spotify sign in, you need a client ID and client secret. You can get them from the [Spotify Developer Portal](https://developer.spotify.com/dashboard/applications).

Make sure to set the redirect URL to `http://localhost:3000/api/auth/callback/spotify` for local development. For production, you should set it to the URL of your application. If you change the base path of the auth routes, you should update the redirect URL accordingly.

### [Configure the provider](https://www.better-auth.com/docs/authentication/spotify\#configure-the-provider)

To configure the provider, you need to import the provider and pass it to the `socialProviders` option of the auth instance.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({

    socialProviders: {
        spotify: {
            clientId: process.env.SPOTIFY_CLIENT_ID as string,
            clientSecret: process.env.SPOTIFY_CLIENT_SECRET as string,
        },
    },
})
```

### [Sign In with Spotify](https://www.better-auth.com/docs/authentication/spotify\#sign-in-with-spotify)

To sign in with Spotify, you can use the `signIn.social` function provided by the client. The `signIn` function takes an object with the following properties:

- `provider`: The provider to use. It should be set to `spotify`.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "spotify"
    })
}
```

[**Reddit** \\
Reddit provider setup and usage.](https://www.better-auth.com/docs/authentication/reddit) [**Other Social Providers** \\
Other social providers setup and usage.](https://www.better-auth.com/docs/authentication/other-social-providers)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Get your Spotify Credentials](https://www.better-auth.com/docs/authentication/spotify#get-your-spotify-credentials) [Configure the provider](https://www.better-auth.com/docs/authentication/spotify#configure-the-provider) [Sign In with Spotify](https://www.better-auth.com/docs/authentication/spotify#sign-in-with-spotify)Docs

On this pageUsing a Plugin

# Plugins

Plugins are a key part of Better Auth, they let you extend the base functionalities. You can use them to add new authentication methods, features, or customize behaviors.

Better Auth offers comes with many built-in plugins ready to use. Check the plugins section for details. You can also create your own plugins.

## [Using a Plugin](https://www.better-auth.com/docs/concepts/plugins\#using-a-plugin)

Plugins can be a server-side plugin, a client-side plugin, or both.

To add a plugin on the server, include it in the `plugins` array in your auth configuration. The plugin will initialize with the provided options.

server.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    plugins: [\
        // Add your plugins here\
    ]
});
```

Client plugins are added when creating the client. Most plugin require both server and client plugins to work correctly.
The Better Auth auth client on the frontend uses the `createAuthClient` function provided by `better-auth/client`.

auth-client.ts

```
import { createAuthClient } from "better-auth/client";

const authClient =  createAuthClient({
    plugins: [\
        // Add your client plugins here\
    ]
});
```

We recommend keeping the auth-client and your normal auth instance in separate files.

auth

server.ts

auth-client.ts

## [Creating a Plugin](https://www.better-auth.com/docs/concepts/plugins\#creating-a-plugin)

To get started, you'll need a server plugin.
Server plugins are the backbone of all plugins, and client plugins are there to provide an interface with frontend APIs to easily work with your server plugins.

If your server plugins has endpoints that needs to be called from the client, you'll also need to create a client plugin.

### [What can a plugin do?](https://www.better-auth.com/docs/concepts/plugins\#what-can-a-plugin-do)

- Create custom `endpoint` s to perform any action you want.
- Extend database tables with custom `schemas`.
- Use a `middleware` to target a group of routes using it's route matcher, and run only when those routes are called through a request.
- Use `hooks` to target a specific route or request. And if you want to run the hook even if the endpoint is called directly.
- Use `onRequest` or `onResponse` if you want to do something that affects all requests or responses.
- Create custom `rate-limit` rule.

## [Create a Server plugin](https://www.better-auth.com/docs/concepts/plugins\#create-a-server-plugin)

To create a server plugin you need to pass an object that satisfies the `BetterAuthPlugin` interface.

The only required property is `id`, which is a unique identifier for the plugin.
Both server and client plugins can use the same `id`.

plugin.ts

```
import type { BetterAuthPlugin } from "better-auth";

export const myPlugin = ()=>{
    return {
        id: "my-plugin",
    } satisfies BetterAuthPlugin
}
```

You don't have to make the plugin a function, but it's recommended to do so. This way you can pass options to the plugin and it's consistent with the built-in plugins.

### [Endpoints](https://www.better-auth.com/docs/concepts/plugins\#endpoints)

To add endpoints to the server, you can pass `endpoints` which requires an object with the key being any `string` and the value being an `AuthEndpoint`.

To create an Auth Endpoint you'll need to import `createAuthEndpoint` from `better-auth`.

Better Auth uses wraps around another library called [Better Call](https://github.com/bekacru/better-call) to create endpoints. Better call is a simple ts web framework made by the same team behind Better Auth.

plugin.ts

```
import { createAuthEndpoint } from "better-auth/api";

const myPlugin = ()=> {
    return {
        id: "my-plugin",
        endpoints: {
            getHelloWorld: createAuthEndpoint("/my-plugin/hello-world", {
                method: "GET",
            }, async(ctx) => {
                return ctx.json({
                    message: "Hello World"
                })
            })
        }
    } satisfies BetterAuthPlugin
}
```

Create Auth endpoints wraps around `createEndpoint` from Better Call. Inside the `ctx` object, it'll provide another object called `context` that give you access better-auth specific contexts including `options`, `db`, `baseURL` and more.

**Context Object**

- `appName`: The name of the application. Defaults to "Better Auth".
- `options`: The options passed to the Better Auth instance.
- `tables`: Core tables definition. It is an object which has the table name as the key and the schema definition as the value.
- `baseURL`: the baseURL of the auth server. This includes the path. For example, if the server is running on `http://localhost:3000`, the baseURL will be `http://localhost:3000/api/auth` by default unless changed by the user.
- `session`: The session configuration. Includes `updateAge` and `expiresIn` values.
- `secret`: The secret key used for various purposes. This is defined by the user.
- `authCookie`: The default cookie configuration for core auth cookies.
- `logger`: The logger instance used by Better Auth.
- `db`: The Kysely instance used by Better Auth to interact with the database.
- `adapter`: This is the same as db but it give you `orm` like functions to interact with the database. (we recommend using this over `db` unless you need raw sql queries or for performance reasons)
- `internalAdapter`: These are internal db calls that are used by Better Auth. For example, you can use these calls to create a session instead of using `adapter` directly. `internalAdapter.createSession(userId)`
- `createAuthCookie`: This is a helper function that let's you get a cookie `name` and `options` for either to `set` or `get` cookies. It implements things like `__secure` prefix and `__host` prefix for cookies based on

For other properties, you can check the [Better Call](https://github.com/bekacru/better-call) documentation and the [source code](https://github.com/better-auth/better-auth/blob/main/packages/better-auth/src/init.ts).

**Rules for Endpoints**

- Makes sure you use kebab-case for the endpoint path
- Make sure to only use `POST` or `GET` methods for the endpoints.
- Any function that modifies a data should be a `POST` method.
- Any function that fetches data should be a `GET` method.
- Make sure to use the `createAuthEndpoint` function to create API endpoints.
- Make sure your paths are unique to avoid conflicts with other plugins. If you're using a common path, add the plugin name as a prefix to the path. ( `/my-plugin/hello-world` instead of `/hello-world`.)

### [Schema](https://www.better-auth.com/docs/concepts/plugins\#schema)

You can define a database schema for your plugin by passing a `schema` object. The schema object should have the table name as the key and the schema definition as the value.

plugin.ts

```
import { BetterAuthPlugin } from "better-auth/plugins";

const myPlugin = ()=> {
    return {
        id: "my-plugin",
        schema: {
            myTable: {
                fields: {
                    name: {
                        type: "string"
                    }
                },
                modelName: "myTable" // optional if you want to use a different name than the key
            }
        }
    } satisfies BetterAuthPlugin
}
```

**Fields**

By default better-auth will create an `id` field for each table. You can add additional fields to the table by adding them to the `fields` object.

The key is the column name and the value is the column definition. The column definition can have the following properties:

`type`: The type of the filed. It can be `string`, `number`, `boolean`, `date`.

`required`: if the field should be required on a new record. (default: `false`)

`unique`: if the field should be unique. (default: `false`)

`reference`: if the field is a reference to another table. (default: `null`) It takes an object with the following properties:

- `model`: The table name to reference.
- `field`: The field name to reference.
- `onDelete`: The action to take when the referenced record is deleted. (default: `null`)

**Other Schema Properties**

`disableMigration`: if the table should not be migrated. (default: `false`)

plugin.ts

```
const myPlugin = (opts: PluginOptions)=>{
    return {
        id: "my-plugin",
        schema: {
            rateLimit: {
                fields: {
                    key: {
                        type: "string",
                    },
                },
                disableMigration: opts.storage.provider !== "database",
            },
        },
    } satisfies BetterAuthPlugin
}
```

if you add additional fields to a `user` or `session` table, the types will be inferred automatically on `getSession` and `signUpEmail` calls.

plugin.ts

```

const myPlugin = ()=>{
    return {
        id: "my-plugin",
        schema: {
            user: {
                fields: {
                    age: {
                        type: "number",
                    },
                },
            },
        },
    } satisfies BetterAuthPlugin
}
```

This will add an `age` field to the `user` table and all `user` returning endpoints will include the `age` field and it'll be inferred properly by typescript.

Don't store sensitive information in `user` or `session` table. Crate a new table if you need to store sensitive information.

### [Hooks](https://www.better-auth.com/docs/concepts/plugins\#hooks)

Hooks are used to run code before or after an action is performed, either from a client or directly on the server. You can add hooks to the server by passing a `hooks` object, which should contain `before` and `after` properties.

plugin.ts

```
import {  createAuthMiddleware } from "better-auth/plugins";

const myPlugin = ()=>{
    return {
        id: "my-plugin",
        hooks: {
            before: [{\
                    matcher: (context)=>{\
                        return context.headers.get("x-my-header") === "my-value"\
                    },\
                    handler: createAuthMiddleware(async(ctx)=>{\
                        //do something before the request\
                        return  {\
                            context: ctx // if you want to modify the context\
                        }\
                    })\
                }],
            after: [{\
                matcher: (context)=>{\
                    return context.path === "/sign-up/email"\
                },\
                handler: async(ctx)=>{\
                    return ctx.json({\
                        message: "Hello World"\
                    }) // if you want to modify the response\
                }\
            }]
        }
    } satisfies BetterAuthPlugin
}
```

### [Middleware](https://www.better-auth.com/docs/concepts/plugins\#middleware)

You can add middleware to the server by passing a `middleware` array. This array should contain middleware objects, each with a `path` and a `middleware` property. Unlike hooks, middleware only runs on `api` requests from a client. If the endpoint is invoked directly, the middleware will not run.

The `path` can be either a string or a path matcher, using the same path-matching system as `better-call`.

If you throw an `APIError` from the middleware or returned a `Response` object, the request will be stopped and the response will be sent to the client.

plugin.ts

```
const myPlugin = ()=>{
    return {
        id: "my-plugin",
        middleware: [\
            {\
                path: "/my-plugin/hello-world",\
                middleware: createAuthMiddleware(async(ctx)=>{\
                    //do something\
                })\
            }\
        ]
    } satisfies BetterAuthPlugin
}
```

### [On Request & On Response](https://www.better-auth.com/docs/concepts/plugins\#on-request--on-response)

Additional to middlewares, you can also hook into right before a request is made and right after a response is returned. This is mostly useful if you want to do something that affects all requests or responses.

#### [On Request](https://www.better-auth.com/docs/concepts/plugins\#on-request)

The `onRequest` function is called right before the request is made. It takes two parameters: the `request` and the `context` object.

Here’s how it works:

- **Continue as Normal**: If you don't return anything, the request will proceed as usual.
- **Interrupt the Request**: To stop the request and send a response, return an object with a `response` property that contains a `Response` object.
- **Modify the Request**: You can also return a modified `request` object to change the request before it's sent.

plugin.ts

```
const myPlugin = ()=> {
    return  {
        id: "my-plugin",
        onRequest: async (request, context) => {
            //do something
        },
    } satisfies BetterAuthPlugin
}
```

#### [On Response](https://www.better-auth.com/docs/concepts/plugins\#on-response)

The `onResponse` function is executed immediately after a response is returned. It takes two parameters: the `response` and the `context` object.

Here’s how to use it:

- **Modify the Response**: You can return a modified response object to change the response before it is sent to the client.
- **Continue Normally**: If you don’t return anything, the response will be sent as is.

plugin.ts

```
const myPlugin = ()=>{
    return {
        id: "my-plugin",
        onResponse: async (response, context) => {
            //do something
        },
    } satisfies BetterAuthPlugin
}
```

### [Rate Limit](https://www.better-auth.com/docs/concepts/plugins\#rate-limit)

You can define custom rate limit rules for your plugin by passing a `rateLimit` array. The rate limit array should contain an array of rate limit objects.

plugin.ts

```
const myPlugin = ()=>{
    return {
        id: "my-plugin",
        rateLimit: [\
            {\
                pathMatcher: (path)=>{\
                    return path === "/my-plugin/hello-world"\
                },\
                limit: 10,\
                window: 60,\
            }\
        ]
    } satisfies BetterAuthPlugin
}
```

### [Server-plugin helper functions](https://www.better-auth.com/docs/concepts/plugins\#server-plugin-helper-functions)

Some additional helper functions for creating server plugins.

#### [`getSessionFromCtx`](https://www.better-auth.com/docs/concepts/plugins\#getsessionfromctx)

Allows you to get the client's session data by passing the auth middleware's `context`.

plugin.ts

```
import {  createAuthMiddleware } from "better-auth/plugins";

const myPlugin = {
    id: "my-plugin",
    hooks: {
        before: [{\
                matcher: (context)=>{\
                    return context.headers.get("x-my-header") === "my-value"\
                },\
                handler: createAuthMiddleware(async (ctx) => {\
                    const session = await getSessionFromCtx(ctx);\
                    //do something with the client's session.\
\
                    return  {\
                        context: ctx\
                    }\
                })\
            }],
    }
} satisfies BetterAuthPlugin
```

#### [`sessionMiddleware`](https://www.better-auth.com/docs/concepts/plugins\#sessionmiddleware)

A middleware that checks if the client has a valid session. If the client has a valid session, it'll add the session data to the context object.

plugin.ts

```
import { createAuthMiddleware } from "better-auth/plugins";
import { sessionMiddleware } from "better-auth/api";

const myPlugin = ()=>{
    return {
        id: "my-plugin",
        endpoints: {
            getHelloWorld: createAuthEndpoint("/my-plugin/hello-world", {
                method: "GET",
                use: [sessionMiddleware],
            }, async(ctx) => {
                const session = ctx.context.session;
                return ctx.json({
                    message: "Hello World"
                })
            })
        }
    } satisfies BetterAuthPlugin
}
```

## [Creating a client plugin](https://www.better-auth.com/docs/concepts/plugins\#creating-a-client-plugin)

If your endpoints needs to be called from the client, you'll need to also create a client plugin. Better Auth clients can infer the endpoints from the server plugins. You can also add additional client side logic.

client-plugin.ts

```
import type { BetterAuthClientPlugin } from "better-auth";

export const myPluginClient = ()=>{
    return {
        id: "my-plugin",
    } satisfies BetterAuthClientPlugin
}
```

### [Endpoint Interface](https://www.better-auth.com/docs/concepts/plugins\#endpoint-interface)

Endpoints are inferred from the server plugin by adding a `$InferServerPlugin` key to the client plugin.

The client infers the `path` as an object and converts kebab-case to camelCase. For example, `/my-plugin/hello-world` becomes `myPlugin.helloWorld`.

client-plugin.ts

```
import type { BetterAuthClientPlugin } from "better-auth/client";
import type { myPlugin } from "./plugin";

const myPluginClient = ()=> {
    return  {
        id: "my-plugin",
        $InferServerPlugin: {} as ReturnType<typeof myPlugin>,
    } satisfies BetterAuthClientPlugin
}
```

### [Get actions](https://www.better-auth.com/docs/concepts/plugins\#get-actions)

If you need to add additional methods or what not to the client you can use the `getActions` function. This function is called with the `fetch` function from the client.

Better Auth uses [Better fetch](https://better-fetch.vercel.app/) to make requests. Better fetch is a simple fetch wrapper made by the same author of Better Auth.

client-plugin.ts

```
import type { BetterAuthClientPlugin } from "better-auth/client";
import type { myPlugin } from "./plugin";
import type { BetterFetchOption } from "@better-fetch/fetch";

const myPluginClient = {
    id: "my-plugin",
    $InferServerPlugin: {} as ReturnType<typeof myPlugin>,
    getActions: ($fetch)=>{
        return {
            myCustomAction: async (data: {
                foo: string,
            }, fetchOptions?: BetterFetchOption)=>{
                const res = $fetch("/custom/action", {
                    method: "POST",
                    body: {
                        foo: data.foo
                    },
                    ...fetchOptions
                })
                return res
            }
        }
    }
} satisfies BetterAuthClientPlugin
```

As a general guideline, ensure that each function accepts only one argument, with an optional second argument for fetchOptions to allow users to pass additional options to the fetch call. The function should return an object containing data and error keys.

If your use case involves actions beyond API calls, feel free to deviate from this rule.

### [Get Atoms](https://www.better-auth.com/docs/concepts/plugins\#get-atoms)

This is only useful if you want to provide `hooks` like `useSession`.

Get atoms is called with the `fetch` function from better fetch and it should return an object with the atoms. The atoms should be created using [nanostores](https://github.com/nanostores/nanostores). The atoms will be resolved by each framework `useStore` hook provided by nanostores.

client-plugin.ts

```
import { atom } from "nanostores";
import type { BetterAuthClientPlugin } from "better-auth/client";

const myPluginClient = {
    id: "my-plugin",
    $InferServerPlugin: {} as ReturnType<typeof myPlugin>,
    getAtoms: ($fetch)=>{
        const myAtom = atom<null>()
        return {
            myAtom
        }
    }
} satisfies BetterAuthClientPlugin
```

See built in plugins for examples of how to use atoms properly.

### [Path methods](https://www.better-auth.com/docs/concepts/plugins\#path-methods)

by default, inferred paths use `GET` method if they don't require a body and `POST` if they do. You can override this by passing a `pathMethods` object. The key should be the path and the value should be the method ("POST" \| "GET").

client-plugin.ts

```
import type { BetterAuthClientPlugin } from "better-auth/client";
import type { myPlugin } from "./plugin";

const myPluginClient = {
    id: "my-plugin",
    $InferServerPlugin: {} as ReturnType<typeof myPlugin>,
    pathMethods: {
        "/my-plugin/hello-world": "POST"
    }
} satisfies BetterAuthClientPlugin
```

### [Fetch plugins](https://www.better-auth.com/docs/concepts/plugins\#fetch-plugins)

If you need to use better fetch plugins you can pass them to the `fetchPlugins` array. You can read more about better fetch plugins in the [better fetch documentation](https://better-fetch.vercel.app/docs/plugins).

### [Atom Listeners](https://www.better-auth.com/docs/concepts/plugins\#atom-listeners)

This is only useful if you want to provide `hooks` like `useSession` and you want to listen to atoms and re-evaluate them when they change.

You can see how this is used in the built-in plugins.

[**Hooks** \\
Better Auth Hooks let you customize BetterAuth's behavior](https://www.better-auth.com/docs/concepts/hooks) [**OAuth** \\
How Better Auth handles OAuth](https://www.better-auth.com/docs/concepts/oauth)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Using a Plugin](https://www.better-auth.com/docs/concepts/plugins#using-a-plugin) [Creating a Plugin](https://www.better-auth.com/docs/concepts/plugins#creating-a-plugin) [What can a plugin do?](https://www.better-auth.com/docs/concepts/plugins#what-can-a-plugin-do) [Create a Server plugin](https://www.better-auth.com/docs/concepts/plugins#create-a-server-plugin) [Endpoints](https://www.better-auth.com/docs/concepts/plugins#endpoints) [Schema](https://www.better-auth.com/docs/concepts/plugins#schema) [Hooks](https://www.better-auth.com/docs/concepts/plugins#hooks) [Middleware](https://www.better-auth.com/docs/concepts/plugins#middleware) [On Request & On Response](https://www.better-auth.com/docs/concepts/plugins#on-request--on-response) [On Request](https://www.better-auth.com/docs/concepts/plugins#on-request) [On Response](https://www.better-auth.com/docs/concepts/plugins#on-response) [Rate Limit](https://www.better-auth.com/docs/concepts/plugins#rate-limit) [Server-plugin helper functions](https://www.better-auth.com/docs/concepts/plugins#server-plugin-helper-functions) [`getSessionFromCtx`](https://www.better-auth.com/docs/concepts/plugins#getsessionfromctx) [`sessionMiddleware`](https://www.better-auth.com/docs/concepts/plugins#sessionmiddleware) [Creating a client plugin](https://www.better-auth.com/docs/concepts/plugins#creating-a-client-plugin) [Endpoint Interface](https://www.better-auth.com/docs/concepts/plugins#endpoint-interface) [Get actions](https://www.better-auth.com/docs/concepts/plugins#get-actions) [Get Atoms](https://www.better-auth.com/docs/concepts/plugins#get-atoms) [Path methods](https://www.better-auth.com/docs/concepts/plugins#path-methods) [Fetch plugins](https://www.better-auth.com/docs/concepts/plugins#fetch-plugins) [Atom Listeners](https://www.better-auth.com/docs/concepts/plugins#atom-listeners)Docs

On this pageInstall the Package

# Installation

### [Install the Package](https://www.better-auth.com/docs/installation\#install-the-package)

Let's start by adding Better Auth to your project:

npmpnpmyarnbun

```
npm install better-auth
```

If you're using a separate client and server setup, make sure to install Better Auth in both parts of your project.

### [Set Environment Variables](https://www.better-auth.com/docs/installation\#set-environment-variables)

Create a `.env` file in the root of your project and add the following environment variables:

1. **Secret Key**

Random value used by the library for encryption and generating hashes. **You can generate one using the button below** or you can use something like openssl.

.env

```
BETTER_AUTH_SECRET=
```

Generate Secret

2. **Set Base URL**

.env

```
BETTER_AUTH_URL=http://localhost:3000 #Base URL of your app
```

### [Create A Better Auth Instance](https://www.better-auth.com/docs/installation\#create-a-better-auth-instance)

Create a file named `auth.ts` in one of these locations:

- Project root
- `lib/` folder
- `utils/` folder

You can also nest any of these folders under `src/`, `app/` or `server/` folder. (e.g. `src/lib/auth.ts`, `app/lib/auth.ts`).

And in this file, import Better Auth and create your auth instance. Make sure to export the auth instance with the variable name `auth` or as a `default` export.

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    //...
})
```

### [Configure Database](https://www.better-auth.com/docs/installation\#configure-database)

Better Auth requires a database to store user data. You can easily configure Better Auth to use SQLite, PostgreSQL, or MySQL, with Kysely handling queries and migrations for these databases.

sqlitepostgresmysql

auth.ts

```
import { betterAuth } from "better-auth";
import Database from "better-sqlite3";

export const auth = betterAuth({
    database: new Database("./sqlite.db"),
})
```

You can also provide any Kysely dialect or a Kysely instance to the `database` option.

**Example with LibsqlDialect:**

auth.ts

```
import { betterAuth } from "better-auth";
import { LibsqlDialect } from "@libsql/kysely-libsql";

const dialect = new LibsqlDialect({
    url: process.env.TURSO_DATABASE_URL || "",
    authToken: process.env.TURSO_AUTH_TOKEN || "",
})

export const auth = betterAuth({
  database: {
    dialect,
    type: "sqlite"
  }
});
```

**Adapters**

If you prefer to use an ORM or if your database is not supported by Kysely, you can use one of the built-in adapters.

prismadrizzlemongodb

auth.ts

```
import { betterAuth } from "better-auth";
import { prismaAdapter } from "better-auth/adapters/prisma";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();
export const auth = betterAuth({
    database: prismaAdapter(prisma, {
        provider: "sqlite", // or "mysql", "postgresql", ...etc
    }),
});
```

### [Create Database Tables](https://www.better-auth.com/docs/installation\#create-database-tables)

Better Auth includes a CLI tool to help manage the schema required by the library.

- **Generate**: This command generates an ORM schema or SQL migration file.

If you're using Kysely, you can apply the migration directly with `migrate` command below. Use `generate` only if you plan to apply the migration manually.

Terminal

```
npx @better-auth/cli generate
```

- **Migrate**: This command creates the required tables directly in the database. (Available only for the built-in Kysely adapter)

Terminal

```
npx @better-auth/cli migrate
```

see the [CLI documentation](https://www.better-auth.com/docs/concepts/cli) for more information.

If you instead want to create the schema manually, you can find the core schema required in the [database section](https://www.better-auth.com/docs/concepts/database#core-schema).

### [Authentication Methods](https://www.better-auth.com/docs/installation\#authentication-methods)

Configure the authentication methods you want to use. Better Auth comes with built-in support for email/password, and social sign-on providers.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    //...other options
    emailAndPassword: {
        enabled: true
    },
    socialProviders: {
       github: {
        clientId: process.env.GITHUB_CLIENT_ID,
        clientSecret: process.env.GITHUB_CLIENT_SECRET,
       }
    },
});
```

You can use even more authentication methods like [passkey](https://www.better-auth.com/docs/plugins/passkey), [username](https://www.better-auth.com/docs/plugins/username), [magic link](https://www.better-auth.com/docs/plugins/magic-link) and more through plugins.

### [Mount Handler](https://www.better-auth.com/docs/installation\#mount-handler)

To handle api requests, you need to set up a route handler on your server.

Create a new file or route in your framework's designated catch-all route handler. This route should handle requests for the path `/api/auth/*` (unless you've configured a different base path).

Better Auth supports any backend framework with standard Request and Response objects and offers helper functions for popular frameworks.

next-jsnuxtsvelte-kitremixsolid-starthonoexpresselysiatanstack-startexpo

/app/api/auth/\[...all\]/route.ts

```
import { auth } from "@/lib/auth"; // path to your auth file
import { toNextJsHandler } from "better-auth/next-js";

export const { POST, GET } = toNextJsHandler(auth);
```

### [Create Client Instance](https://www.better-auth.com/docs/installation\#create-client-instance)

The client-side library helps you interact with the auth server. Better Auth comes with a client for all the popular web frameworks, including vanilla JavaScript.

1. Import `createAuthClient` from the package for your framework (e.g., "better-auth/react" for React).
2. Call the function to create your client.
3. Pass the base url of your auth server. (If the auth server is running on the same domain as your client, you can skip this step.)

If you're using a different base path other than `/api/auth` make sure to pass the whole url including the path. (e.g. `http://localhost:3000/custom-path/auth`)

reactvuesveltesolidvanilla

lib/auth-client.ts

```
import { createAuthClient } from "better-auth/react"
export const authClient = createAuthClient({
    baseURL: "http://localhost:3000" // the base url of your auth server
})
```

Tip: You can also export specific methods if you prefer:

```
export const { signIn, signUp, useSession } = createAuthClient()
```

### [🎉 That's it!](https://www.better-auth.com/docs/installation\#-thats-it)

That's it! You're now ready to use better-auth in your application. Continue to [basic usage](https://www.better-auth.com/docs/basic-usage) to learn how to use the auth instance to sign in users.

[**Comparison** \\
Comparison of Better Auth versus over other auth libraries and services.](https://www.better-auth.com/docs/comparison) [**Basic Usage** \\
Getting started with Better Auth](https://www.better-auth.com/docs/basic-usage)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Install the Package](https://www.better-auth.com/docs/installation#install-the-package) [Set Environment Variables](https://www.better-auth.com/docs/installation#set-environment-variables) [Create A Better Auth Instance](https://www.better-auth.com/docs/installation#create-a-better-auth-instance) [Configure Database](https://www.better-auth.com/docs/installation#configure-database) [Create Database Tables](https://www.better-auth.com/docs/installation#create-database-tables) [Authentication Methods](https://www.better-auth.com/docs/installation#authentication-methods) [Mount Handler](https://www.better-auth.com/docs/installation#mount-handler) [Create Client Instance](https://www.better-auth.com/docs/installation#create-client-instance) [🎉 That's it!](https://www.better-auth.com/docs/installation#-thats-it)Docs

On this pageEmail Verification

# Email

Email is a key part of Better Auth, required for all users regardless of their authentication method. Better Auth provides email and password authentication out of the box, and a lot of utilities to help you manage email verification, password reset, and more.

## [Email Verification](https://www.better-auth.com/docs/concepts/email\#email-verification)

Email verification is a security feature that ensures users provide a valid email address. It helps prevent spam and abuse by confirming that the email address belongs to the user.

### [Adding Email Verification to Your App](https://www.better-auth.com/docs/concepts/email\#adding-email-verification-to-your-app)

To enable email verification, you need to pass a function that sends a verification email with a link.

- **sendVerificationEmail**: This function is triggered when email verification starts. It accepts a data object with the following properties:
  - `user`: The user object containing the email address.
  - `url`: The verification URL the user must click to verify their email.
  - `token`: The verification token used to complete the email verification to be used when implementing a custom verification URL.

and a `request` object as the second parameter.

auth.ts

```
import { betterAuth } from 'better-auth';
import { sendEmail } from './email'; // your email sending function

export const auth = betterAuth({
    emailVerification: {
        sendVerificationEmail: async ({ user, url, token }, request) => {
            await sendEmail({
                to: user.email,
                subject: 'Verify your email address',
                text: `Click the link to verify your email: ${url}`
            })
        }
    }
})
```

### [Triggering Email Verification](https://www.better-auth.com/docs/concepts/email\#triggering-email-verification)

You can initiate email verification in two ways:

#### [1\. During Sign-up](https://www.better-auth.com/docs/concepts/email\#1-during-sign-up)

To automatically send a verification email at signup, set `emailVerification.sendOnSignUp` to `true`.

auth.ts

```
import { betterAuth } from 'better-auth';

export const auth = betterAuth({
    emailVerification: {
        sendOnSignUp: true
    }
})
```

This sends a verification email when a user signs up. For social logins, email verification status is read from the SSO.

With `sendOnSignUp` enabled, when the user logs in with an SSO that does not claim the email as verified, Better Auth will dispatch a verification email, but the verification is not required to login even when `requireEmailVerification` is enabled.

#### [2\. Require Email Verification](https://www.better-auth.com/docs/concepts/email\#2-require-email-verification)

If you enable require email verification, users must verify their email before they can log in. And every time a user tries to sign in, `sendVerificationEmail` is called.

This only works if you have `sendVerificationEmail` implemented and if the user is trying to sign in with email and password.

auth.ts

```
export const auth = betterAuth({
    emailAndPassword: {
        requireEmailVerification: true
    }
})
```

if a user tries to sign in without verifying their email, you can handle the error and show a message to the user.

auth-client.ts

```
await authClient.signIn.email({
    email: "email@example.com",
    password: "password"
}, {
    onError: (ctx) => {
        // Handle the error
        if(ctx.error.status === 403) {
            alert("Please verify your email address")
        }
        //you can also show the original error message
        alert(ctx.error.message)
    }
})
```

#### [3\. Manually](https://www.better-auth.com/docs/concepts/email\#3-manually)

You can also manually trigger email verification by calling `sendVerificationEmail`.

```
await authClient.sendVerificationEmail({
    email: "user@email.com",
    callbackURL: "/" // The redirect URL after verification
})
```

### [Verifying the Email](https://www.better-auth.com/docs/concepts/email\#verifying-the-email)

If the user clicks the provided verification URL, their email is automatically verified, and they are redirected to the `callbackURL`.

For manual verification, you can send the user a custom link with the `token` and call the `verifyEmail` function.

```
authClient.verifyEmail({
    query: {
        token: "" // Pass the token here
    }
})
```

### [Auto SignIn After Verification](https://www.better-auth.com/docs/concepts/email\#auto-signin-after-verification)

To sign in the user automatically after they successfully verify their email, set the `autoSignInAfterVerification` option to `true`:

```
const auth = betterAuth({
    //...your other options
    emailVerification: {
        autoSignInAfterVerification: true
    }
})
```

## [Password Reset Email](https://www.better-auth.com/docs/concepts/email\#password-reset-email)

Password reset allows users to reset their password if they forget it. Better Auth provides a simple way to implement password reset functionality.

You can enable password reset by passing a function that sends a password reset email with a link.

auth.ts

```
import { betterAuth } from 'better-auth';
import { sendEmail } from './email'; // your email sending function

export const auth = betterAuth({
    emailAndPassword: {
        enabled: true,
        sendResetPassword: async ({ user, url, token }, request) => {
            await sendEmail({
                to: user.email,
                subject: 'Reset your password',
                text: `Click the link to reset your password: ${url}`
            })
        }
    }
})
```

Check out the [Email and Password](https://www.better-auth.com/docs/authentication/email-password#forget-password) guide for more details on how to implement password reset in your app.

[**Database** \\
Learn how to use a database with Better Auth.](https://www.better-auth.com/docs/concepts/database) [**Hooks** \\
Better Auth Hooks let you customize BetterAuth's behavior](https://www.better-auth.com/docs/concepts/hooks)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Email Verification](https://www.better-auth.com/docs/concepts/email#email-verification) [Adding Email Verification to Your App](https://www.better-auth.com/docs/concepts/email#adding-email-verification-to-your-app) [Triggering Email Verification](https://www.better-auth.com/docs/concepts/email#triggering-email-verification) [1\. During Sign-up](https://www.better-auth.com/docs/concepts/email#1-during-sign-up) [2\. Require Email Verification](https://www.better-auth.com/docs/concepts/email#2-require-email-verification) [3\. Manually](https://www.better-auth.com/docs/concepts/email#3-manually) [Verifying the Email](https://www.better-auth.com/docs/concepts/email#verifying-the-email) [Auto SignIn After Verification](https://www.better-auth.com/docs/concepts/email#auto-signin-after-verification) [Password Reset Email](https://www.better-auth.com/docs/concepts/email#password-reset-email)Docs

On this pageGet your Facebook credentials

# Facebook

### [Get your Facebook credentials](https://www.better-auth.com/docs/authentication/facebook\#get-your-facebook-credentials)

To use Facebook sign in, you need a client ID and client Secret. You can get them from the [Facebook Developer Portal](https://developers.facebook.com/).
Select your app, navigate to **App Settings > Basic**, locate the following:

- **App ID**: This is your `clientId`
- **App Secret**: This is your `clientSecret`.

Avoid exposing the `clientSecret` in client-side code (e.g., frontend apps) because it’s sensitive information.

Make sure to set the redirect URL to `http://localhost:3000/api/auth/callback/facebook` for local development. For production, you should set it to the URL of your application. If you change the base path of the auth routes, you should update the redirect URL accordingly.

### [Configure the provider](https://www.better-auth.com/docs/authentication/facebook\#configure-the-provider)

To configure the provider, you need to import the provider and pass it to the `socialProviders` option of the auth instance.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        facebook: {
            clientId: process.env.FACEBOOK_CLIENT_ID as string,
            clientSecret: process.env.FACEBOOK_CLIENT_SECRET as string,
        },
    },
})
```

### [Sign In with Facebook](https://www.better-auth.com/docs/authentication/facebook\#sign-in-with-facebook)

To sign in with Facebook, you can use the `signIn.social` function provided by the client. The `signIn` function takes an object with the following properties:

- `provider`: The provider to use. It should be set to `facebook`.

auth-client.ts

```
import { createAuthClient } from "better-auth/auth-client"
const authClient = createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "facebook"
    })
}
```

## [Additional Configuration](https://www.better-auth.com/docs/authentication/facebook\#additional-configuration)

### [Scopes](https://www.better-auth.com/docs/authentication/facebook\#scopes)

By default, Facebook provides basic user information. If you need additional permissions, you can specify scopes in your auth configuration:

auth.ts

```
export const auth = betterAuth({
    socialProviders: {
        facebook: {
            clientId: process.env.FACEBOOK_CLIENT_ID as string,
            clientSecret: process.env.FACEBOOK_CLIENT_ID as string,
            scopes: ["email", "public_profile", "user_friends"], // Overwrites permissions
            fields: ["user_friends"], // Extending list of fields
        },
    },
})
```

Additional options:

- `scopes`: Access basic account information (overwrites).
  - Default: `"email", "public_profile"`
- `fields`: Extend list of fields to retrieve from the Facebook user profile (assignment).
  - Default: `"id", "name", "email", "picture"`

### [Sign In with Facebook With ID or Access Token](https://www.better-auth.com/docs/authentication/facebook\#sign-in-with-facebook-with-id-or-access-token)

To sign in with Facebook using the ID Token, you can use the `signIn.social` function to pass the ID Token.

This is useful when you have the ID Token from Facebook on the client-side and want to use it to sign in on the server.

If id token is provided no redirection will happen, and the user will be signed in directly.

For limited login, you need to pass `idToken.token`, for only `accessToken` you need to pass `idToken.accessToken` and `idToken.token` together because of (#1183)\[ [https://github.com/better-auth/better-auth/issues/1183](https://github.com/better-auth/better-auth/issues/1183)\].

auth-client.ts

```
const data = await authClient.signIn.social({
    provider: "facebook",
    idToken: {
        ...(platform === 'ios' ?
            { token: idToken }
            : { token: accessToken, accessToken: accessToken }),
    },
})
```

For a complete list of available permissions, refer to the [Permissions Reference](https://developers.facebook.com/docs/permissions).

[**Discord** \\
Discord provider setup and usage.](https://www.better-auth.com/docs/authentication/discord) [**GitHub** \\
GitHub provider setup and usage.](https://www.better-auth.com/docs/authentication/github)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Get your Facebook credentials](https://www.better-auth.com/docs/authentication/facebook#get-your-facebook-credentials) [Configure the provider](https://www.better-auth.com/docs/authentication/facebook#configure-the-provider) [Sign In with Facebook](https://www.better-auth.com/docs/authentication/facebook#sign-in-with-facebook) [Additional Configuration](https://www.better-auth.com/docs/authentication/facebook#additional-configuration) [Scopes](https://www.better-auth.com/docs/authentication/facebook#scopes) [Sign In with Facebook With ID or Access Token](https://www.better-auth.com/docs/authentication/facebook#sign-in-with-facebook-with-id-or-access-token)Docs

On this pageInstallation

# Other Social Providers

Better Auth providers out of the box support for the [Generic Oauth Plugin](https://www.better-auth.com/docs/plugins/generic-oauth) which allows you to use any social provider that implements the OAuth2 protocol or OpenID Connect (OIDC) flows.

To use a provider that is not supported out of the box, you can use the [Generic Oauth Plugin](https://www.better-auth.com/docs/plugins/generic-oauth).

## [Installation](https://www.better-auth.com/docs/authentication/other-social-providers\#installation)

### [Add the plugin to your auth config](https://www.better-auth.com/docs/authentication/other-social-providers\#add-the-plugin-to-your-auth-config)

To use the Generic OAuth plugin, add it to your auth config.

auth.ts

```
import { betterAuth } from "better-auth"
import { genericOAuth } from "better-auth/plugins"

export const auth = betterAuth({
    // ... other config options
    plugins: [\
        genericOAuth({\
            config: [\
                {\
                    providerId: "provider-id",\
                    clientId: "test-client-id",\
                    clientSecret: "test-client-secret",\
                    discoveryUrl: "https://auth.example.com/.well-known/openid-configuration",\
                    // ... other config options\
                },\
                // Add more providers as needed\
            ]\
        })\
    ]
})
```

### [Add the client plugin](https://www.better-auth.com/docs/authentication/other-social-providers\#add-the-client-plugin)

Include the Generic OAuth client plugin in your authentication client instance.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
import { genericOAuthClient } from "better-auth/client/plugins"

const authClient = createAuthClient({
    plugins: [\
        genericOAuthClient()\
    ]
})
```

Read more about installation and usage of the Generic Oauth plugin
[here](https://www.better-auth.com/docs/plugins/generic-oauth#usage).

## [Example usage](https://www.better-auth.com/docs/authentication/other-social-providers\#example-usage)

### [Slack Example](https://www.better-auth.com/docs/authentication/other-social-providers\#slack-example)

auth.ts

```
import { betterAuth } from "better-auth";
import { genericOAuth } from "better-auth/plugins";

export const auth = betterAuth({
  // ... other config options
  plugins: [\
    genericOAuth({\
      config: [\
        {\
          providerId: "slack",\
          clientId: process.env.SLACK_CLIENT_ID as string,\
          clientSecret: process.env.SLACK_CLIENT_SECRET as string,\
          authorizationUrl: "https://slack.com/oauth/v2/authorize",\
          tokenUrl: "https://slack.com/api/oauth.v2.access",\
          scopes: ["users:read", "users:read.email"], // and more...\
        },\
      ],\
    }),\
  ],
});
```

sign-in.ts

```
const response = await authClient.signIn.oauth2({
  providerId: "slack",
  callbackURL: "/dashboard", // the path to redirect to after the user is authenticated
});
```

### [Instagram Example](https://www.better-auth.com/docs/authentication/other-social-providers\#instagram-example)

auth.ts

```
import { betterAuth } from "better-auth";
import { genericOAuth } from "better-auth/plugins";

export const auth = betterAuth({
  // ... other config options
  plugins: [\
    genericOAuth({\
      config: [\
        {\
          providerId: "instagram",\
          clientId: process.env.INSTAGRAM_CLIENT_ID as string,\
          clientSecret: process.env.INSTAGRAM_CLIENT_SECRET as string,\
          authorizationUrl: "https://api.instagram.com/oauth/authorize",\
          tokenUrl: "https://api.instagram.com/oauth/access_token",\
          scopes: ["user_profile", "user_media"],\
        },\
      ],\
    }),\
  ],
});
```

sign-in.ts

```
const response = await authClient.signIn.oauth2({
  providerId: "instagram",
  callbackURL: "/dashboard", // the path to redirect to after the user is authenticated
});
```

### [Coinbase Example](https://www.better-auth.com/docs/authentication/other-social-providers\#coinbase-example)

auth.ts

```
import { betterAuth } from "better-auth";
import { genericOAuth } from "better-auth/plugins";

export const auth = betterAuth({
  // ... other config options
  plugins: [\
    genericOAuth({\
      config: [\
        {\
          providerId: "coinbase",\
          clientId: process.env.COINBASE_CLIENT_ID as string,\
          clientSecret: process.env.COINBASE_CLIENT_SECRET as string,\
          authorizationUrl: "https://www.coinbase.com/oauth/authorize",\
          tokenUrl: "https://api.coinbase.com/oauth/token",\
          scopes: ["wallet:user:read"], // and more...\
        },\
      ],\
    }),\
  ],
});
```

sign-in.ts

```
const response = await authClient.signIn.oauth2({
  providerId: "coinbase",
  callbackURL: "/dashboard", // the path to redirect to after the user is authenticated
});
```

[**Spotify** \\
Spotify provider setup and usage.](https://www.better-auth.com/docs/authentication/spotify) [**Astro Integration** \\
Integrate Better Auth with Astro.](https://www.better-auth.com/docs/integrations/astro)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/authentication/other-social-providers#installation) [Add the plugin to your auth config](https://www.better-auth.com/docs/authentication/other-social-providers#add-the-plugin-to-your-auth-config) [Add the client plugin](https://www.better-auth.com/docs/authentication/other-social-providers#add-the-client-plugin) [Example usage](https://www.better-auth.com/docs/authentication/other-social-providers#example-usage) [Slack Example](https://www.better-auth.com/docs/authentication/other-social-providers#slack-example) [Instagram Example](https://www.better-auth.com/docs/authentication/other-social-providers#instagram-example) [Coinbase Example](https://www.better-auth.com/docs/authentication/other-social-providers#coinbase-example)Docs

On this pageOverview

# Documenting

## [Overview](https://www.better-auth.com/docs/contribute/documenting\#overview)

Better Auth uses [Fumadocs](https://fumadocs.vercel.app/) with MDX for documentation. This page explains how to add and update documentation effectively.

## [Project Structure](https://www.better-auth.com/docs/contribute/documenting\#project-structure)

docs

components

sidebar-content.tsx

content

docs

some\_documentation.mdx

## [Writing Documentation](https://www.better-auth.com/docs/contribute/documenting\#writing-documentation)

### [Creating New Pages](https://www.better-auth.com/docs/contribute/documenting\#creating-new-pages)

1. Add your MDX file in `docs/content/docs/<your_file_name>.mdx`:

#### [File Name Convention \* The file name should be in the format of](https://www.better-auth.com/docs/contribute/documenting\#file-name-convention--the-file-name-should-be-in-the-format-of)

`some-feature.mdx`. (Kebab-case) \* The file name represents the URL route to
that page. For example, if the file name is `some-feature.mdx`, the URL route
will be `/docs/some-feature`. \\* Place the file in their respective category
folder. For example, if the file is in the `guides` category, place it in the
`/guides` folder.

```
---
title: Your Feature
description: Description of your feature
---

# Your Feature

Introduction to your feature here...
```

2. Update the sidebar in `docs/components/sidebar-content.tsx`:

To find out what icon you would like to use for the sidebar, you can check out
the [Lucide Icons](https://lucide.dev/icons/) library.

```
export const contents: Content[] = {
  items: [\
    {\
      // Existing items...\
    },\
    {\
      title: "Your Section",\
      icon: <SomeLucideIcon className="size-4" />,\
      items: [\
        {\
          title: "Your Feature",\
          icon: <OtherLucideIcon className="size-4" />,\
          href: "/docs/your-feature",\
        },\
      ],\
    },\
  ],
};
```

* * *

## [MDX Guidelines](https://www.better-auth.com/docs/contribute/documenting\#mdx-guidelines)

### [Basic Formatting](https://www.better-auth.com/docs/contribute/documenting\#basic-formatting)

```
# Main Title

## Section

This is a paragraph with **bold** and _italic_ text.

### Subsection

- List item 1
- List item 2

1. Order list item 1
2. Order list item 2
```

### [Components](https://www.better-auth.com/docs/contribute/documenting\#components)

### Callouts

### Files

### Links

### Accordions

### Steps

### Tabs

### [Code Blocks](https://www.better-auth.com/docs/contribute/documenting\#code-blocks)

Use language-specific syntax highlighting:

````
```typescript
import { BetterAuth } from "better-auth";

const auth = new BetterAuth({
// configuration
});
```
````

Optionally, you can also specify a file name for the code block:

````
```typescript title="auth.ts"
import { BetterAuth } from "better-auth";

const auth = new BetterAuth({
// configuration
});
```
````

You can also highlight specific lines in a codeblock:

````
```typescript title="auth.ts"
import { BetterAuth } from "better-auth";

const auth = new BetterAuth({ // [!codeㅤhighlight]
// configuration  // [!codeㅤhighlight]
}); // [!codeㅤhighlight]
```
````

The result:

auth.ts

```
import { BetterAuth } from "better-auth";

const auth = new BetterAuth({
  // configuration
});
```

* * *

## [Best Practices](https://www.better-auth.com/docs/contribute/documenting\#best-practices)

### [Do's](https://www.better-auth.com/docs/contribute/documenting\#dos)

- Keep documentation up-to-date with code changes
- Use clear, concise language
- Include practical examples
- Document error cases and edge conditions
- Use proper headings hierarchy
- Include cross-references to related docs

### [Don'ts](https://www.better-auth.com/docs/contribute/documenting\#donts)

- Don't repeat information unnecessarily
- Don't leave outdated examples
- Don't use complex jargon without explanation
- Don't skip documenting breaking changes
- Don't leave TODO comments in published docs

## [Local Development](https://www.better-auth.com/docs/contribute/documenting\#local-development)

```
# Install dependencies
pnpm install

# Start docs development server
pnpm -F docs dev
```

## [Document Types](https://www.better-auth.com/docs/contribute/documenting\#document-types)

### [1\. Guides](https://www.better-auth.com/docs/contribute/documenting\#1-guides)

- Step-by-step instructions
- Tutorial-style content

### [2\. Reference Documentation](https://www.better-auth.com/docs/contribute/documenting\#2-reference-documentation)

- API documentation
- Configuration options
- Type definitions

### [3\. Examples](https://www.better-auth.com/docs/contribute/documenting\#3-examples)

- Code snippets
- Complete examples
- Use cases

## [Contributing to Documentation](https://www.better-auth.com/docs/contribute/documenting\#contributing-to-documentation)

1. **Find the Right File**
   - Navigate to `docs/content/docs/`
   - Locate the relevant MDX file or create a new one
2. **Make Your Changes**
   - Update or add content
   - Follow the MDX formatting guidelines
   - Include examples where appropriate
3. **Test Locally**
   - Run the development server
   - Check your changes
   - Verify links and navigation
4. **Submit Changes**
   - Create a pull request
   - Include a clear description of documentation changes
   - Request review from documentation maintainers

## [Getting Help](https://www.better-auth.com/docs/contribute/documenting\#getting-help)

Need assistance with documentation?

- Join our [Discord server](https://discord.gg/GYC3W7tZzb) and ask for help!
- Open an issue with the `documentation` label

Remember: Good documentation is crucial for Better Auth's success. Thank you for helping improve it! 📚

[**Testing in Better Auth** \\
Testing Guide for Better Auth](https://www.better-auth.com/docs/contribute/testing) [**Security Policy and Disclosure Guidelines** \\
Security Policy and Disclosure Guidelines in BetterAuth](https://www.better-auth.com/docs/contribute/security-issues)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Overview](https://www.better-auth.com/docs/contribute/documenting#overview) [Project Structure](https://www.better-auth.com/docs/contribute/documenting#project-structure) [Writing Documentation](https://www.better-auth.com/docs/contribute/documenting#writing-documentation) [Creating New Pages](https://www.better-auth.com/docs/contribute/documenting#creating-new-pages) [File Name Convention \* The file name should be in the format of](https://www.better-auth.com/docs/contribute/documenting#file-name-convention--the-file-name-should-be-in-the-format-of) [MDX Guidelines](https://www.better-auth.com/docs/contribute/documenting#mdx-guidelines) [Basic Formatting](https://www.better-auth.com/docs/contribute/documenting#basic-formatting) [Components](https://www.better-auth.com/docs/contribute/documenting#components) [Code Blocks](https://www.better-auth.com/docs/contribute/documenting#code-blocks) [Best Practices](https://www.better-auth.com/docs/contribute/documenting#best-practices) [Do's](https://www.better-auth.com/docs/contribute/documenting#dos) [Don'ts](https://www.better-auth.com/docs/contribute/documenting#donts) [Local Development](https://www.better-auth.com/docs/contribute/documenting#local-development) [Document Types](https://www.better-auth.com/docs/contribute/documenting#document-types) [1\. Guides](https://www.better-auth.com/docs/contribute/documenting#1-guides) [2\. Reference Documentation](https://www.better-auth.com/docs/contribute/documenting#2-reference-documentation) [3\. Examples](https://www.better-auth.com/docs/contribute/documenting#3-examples) [Contributing to Documentation](https://www.better-auth.com/docs/contribute/documenting#contributing-to-documentation) [Getting Help](https://www.better-auth.com/docs/contribute/documenting#getting-help)Docs

On this pageWhy Better Auth?

# Introduction

Better Auth is a framework-agnostic authentication and authorization framework for TypeScript. It provides a comprehensive set of features out of the box and includes a plugin ecosystem that simplifies adding advanced functionalities. Whether you need 2FA, multi-tenancy, multi-session support, or even enterprise features like SSO, it lets you focus on building your application instead of reinventing the wheel.

## [Why Better Auth?](https://www.better-auth.com/docs/introduction\#why-better-auth)

_Authentication in the TypeScript ecosystem has long been a half-solved problem. Other open-source libraries often require a lot of additional code for anything beyond basic authentication features. Rather than just pushing third-party services as the solution, I believe we can do better as a community—hence, Better Auth_

## [Features](https://www.better-auth.com/docs/introduction\#features)

Better Auth aims to be the most comprehensive auth library. It provides a wide range of features out of the box and allows you to extend it with plugins. Here are some of the features:

Framework Agnostic

Support for most popular frameworks

Email & Password

Built-in support for secure email and password authentication

Account & Session Management

Manage user accounts and sessions with ease

Built In Rate Limiter

Built in rate limiter with custom rules

Automatic Database Management

Automatic database management and migrations

Social Sign-on

Multiple social sign-on providers

Organization & Access Control

Manage organizations and access control

Two Factor Authentication

Secure your users with two factor authentication

Plugin Ecosystem

Even more capabilities with plugins

...and much more!

[**Comparison** \\
Comparison of Better Auth versus over other auth libraries and services.](https://www.better-auth.com/docs/comparison)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Why Better Auth?](https://www.better-auth.com/docs/introduction#why-better-auth) [Features](https://www.better-auth.com/docs/introduction#features)# V1.0 - nov.22

We are excited to announce the Better Auth V1.0 release.

## What does V1 means?

Since introducing Better Auth, the community's excitement has been incredibly motivating—thank you!

V1 is an important milestone, but it simply means we believe you can use it in production and that we'll strive to keep the APIs stable until the next major version. However, we'll continue improving, adding new features, and fixing bugs at the same pace as before.

If you were using Better Auth for production, we recommend updating to V1 as soon as possible. There are some breaking changes, feel free to join us on [Discord](https://discord.gg/GYC3W7tZzb), and we'll gladly assist.

### Install Latest

`npm i better-auth@latest`

Get the latest [Node.js and npm](https://www.better-auth.com/v1#).

### Adopt the new Schema

`pnpx @better-auth/cli migrate
`

Ensure you have the latest `schema required` by Better Auth. `You can also` add them manually. Read the [Core Schema](https://www.better-auth.com/docs/concepts/database#core-schema) for full instructions.

### Check out the change log, the new UI Builder, OpenAPI Docs, and more

We have some exciting new features and updates that you should check out.

[Star on GitHub](https://github.com/better-auth/better-auth) [Join Discord](https://discord.gg/GYC3W7tZzb)

## Changelog

### 1.0.0

2024

- feat: Open API Docs
- docs: Sign In Box Builder
- feat: default memory adapter. If no database is provided, it will use memory adapter
- feat: New server only endpoints for Organization and Two Factor plugins
- refactor: all core tables now have \`createdAt\` and \`updatedAt\` fields
- refactor: accounts now store \`expiresAt\` for both refresh and access tokens
- feat: Email OTP forget password flow
- docs: NextAuth.js migration guide
- feat: sensitive endpoints now check for fresh tokens
- feat: two-factor now have different interface for redirect and callback
- and a lot more bug fixes and improvements...Docs

On this pageUsing Adapters

# Database

Better Auth requires a database connection to store data. It comes with a query builder called [Kysely](https://kysely.dev/) to manage and query your database. The database will be used to store data such as users, sessions, and more. Plugins can also define their own database tables to store data.

You can pass a database connection to Better Auth by passing a supported database instance, a dialect instance or a Kysely instance in the database options.

**Example: Sqlite**

auth.ts

```
import { betterAuth } from "better-auth"
import Database from "better-sqlite3"

export const auth = betterAuth({
    database: new Database("database.sqlite")
})
```

**Example: Postgres**

auth.ts

```
import { betterAuth } from "better-auth"
import { Pool } from "pg"

export const auth = betterAuth({
    database: new Pool({
        connectionString: "postgres://user:password@localhost:5432/database"
    })
})
```

**Example: MySQL**

auth.ts

```
import { betterAuth } from "better-auth"
import { createPool } from "mysql2/promise"

export const auth = betterAuth({
    database: createPool({
        host: "localhost",
        user: "root",
        password: "password",
        database: "database"
    })
})
```

**Example: Custom Dialect using libSQL**

auth.ts

```
import { betterAuth } from "better-auth"
import { LibsqlDialect } from "@libsql/kysely-libsql";

export const auth = betterAuth({
   	database: {
      dialect: new LibsqlDialect({
        url: process.env.TURSO_DATABASE_URL || "",
        authToken: process.env.TURSO_AUTH_TOKEN || "",
      }),
      type: "sqlite"
    },
})
```

See [Kysely Dialects](https://kysely.dev/docs/dialects) for more dialects supported by Kysely.

**Example: Custom Kysely Instance**

auth.ts

```
import { betterAuth } from "better-auth"
import { db } from "./db"

export const auth = betterAuth({
    database: {
      db: db,
      type: "sqlite" // or "mysql", "postgres" or "mssql"
    }
})
```

## [Using Adapters](https://www.better-auth.com/docs/concepts/database\#using-adapters)

If your database is managed by an ORM like Prisma or Drizzle, you can use the corresponding adapter to connect to the database. Better Auth comes with built-in adapters for Prisma and Drizzle. You can pass the adapter to the `database` object in the auth options.

### [Prisma Adapter](https://www.better-auth.com/docs/concepts/database\#prisma-adapter)

The Prisma adapter expects a prisma client instance and a provider key that specifies the database provider to use. The provider key can be `sqlite`, `postgres`, `mysql`, or any other supported by prisma.

auth.ts

```
import { betterAuth } from "better-auth";
import { prismaAdapter } from "better-auth/adapters/prisma";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export const auth = betterAuth({
    database: prismaAdapter(prisma, {
      provider: "sqlite"
    })
})
```

### [Drizzle adapter](https://www.better-auth.com/docs/concepts/database\#drizzle-adapter)

The Drizzle adapter expects a drizzle client instance and a provider key that specifies the database provider to use. The provider key can be `sqlite`, `pg` or `mysql`.

auth.ts

```
import { betterAuth } from "better-auth";
import { db } from "./drizzle";
import { drizzleAdapter } from "better-auth/adapters/drizzle";

export const auth = betterAuth({
    database: drizzleAdapter(db, {
      provider: "sqlite", // or "pg" or "mysql"
    })
})
```

#### [Mapping Schema](https://www.better-auth.com/docs/concepts/database\#mapping-schema)

The Drizzle adapter expects the schema you define to match the table names. For example, if your Drizzle schema maps the `user` table to `users`, you need to manually pass the schema and map it to the user table.

```
import { betterAuth } from "better-auth";
import { db } from "./drizzle";
import { drizzleAdapter } from "better-auth/adapters/drizzle";
import { schema } from "./schema";

export const auth = betterAuth({
    database: drizzleAdapter(db, {
      provider: "sqlite", // or "pg" or "mysql"
      schema: {
         ...schema,
        user: schema.users,
      },
      //if all of them are just using plural form, you can just pass the option below
      usePlural: true
    })
})
```

### [MongoDB Adapter](https://www.better-auth.com/docs/concepts/database\#mongodb-adapter)

The MongoDB adapter expects a mongodb client instance and a database name. The adapter will create a new database with the provided name if it doesn't exist.

auth.ts

```
import { betterAuth } from "better-auth";
import { MongoClient } from "mongodb";
import { mongodbAdapter } from "better-auth/adapters/mongodb";

const client = new MongoClient("mongodb://localhost:27017/database");
const db = client.db()

export const auth = betterAuth({
    database: mongodbAdapter(db)
})
```

## [CLI](https://www.better-auth.com/docs/concepts/database\#cli)

Better Auth comes with a CLI tool to manage database migrations and generate schema.

### [Running Migrations](https://www.better-auth.com/docs/concepts/database\#running-migrations)

The cli checks your database and prompts you to add missing tables or update existing ones with new columns. This is only supported for the built-in Kysely adapter. For other adapters, you can use the `generate` command to create the schema and handle the migration through your ORM.

```
npx @better-auth/cli migrate
```

### [Generating Schema](https://www.better-auth.com/docs/concepts/database\#generating-schema)

Better Auth also provides a `generate` command to generate the schema required by Better Auth. The `generate` command creates the schema required by Better Auth. If you're using a database adapter like Prisma or Drizzle, this command will generate the right schema for your ORM. If you're using the built-in Kysely adapter, it will generate an SQL file you can run directly on your database.

```
npx @better-auth/cli generate
```

See the [CLI](https://www.better-auth.com/docs/concepts/cli) documentation for more information on the CLI.

If you prefer adding tables manually, you can do that as well. The core schema required by Better Auth is described below and you can find additional schema required by plugins in the plugin documentation.

## [Secondary Storage](https://www.better-auth.com/docs/concepts/database\#secondary-storage)

Secondary storage in Better Auth allows you to use key-value stores for managing session data, rate limiting counters, etc. This can be useful when you want to offload the storage of this intensive records to a high performance storage or even RAM.

### [Implementation](https://www.better-auth.com/docs/concepts/database\#implementation)

To use secondary storage, implement the `SecondaryStorage` interface:

```
interface SecondaryStorage {
	get: (key: string) => Promise<string | null>
	set: (
		key: string,
		value: string,
		ttl?: number,
	) => Promise<void>;
	delete: (key: string) => Promise<void>;
}
```

Then, provide your implementation to the `betterAuth` function:

```
betterAuth({
	// ... other options
	secondaryStorage: {
		// Your implementation here
	}
})
```

**Example: Redis Implementation**

Here's a basic example using Redis:

```
import { createClient } from "redis";
import { betterAuth } from "better-auth";

const redis = createClient();
await redis.connect();

export const auth = betterAuth({
	// ... other options
	secondaryStorage: {
		get: async (key) => {
			const value = await redis.get(key);
			return value ? JSON.stringify(value) : null;
		},
		set: async (key, value, ttl) => {
			if (ttl) await redis.set(key, value, { EX: ttl });
			// or for ioredis:
			// if (ttl) await redis.set(key, value, 'EX', ttl)
			else await redis.set(key, value);
		},
		delete: async (key) => {
			await redis.del(key);
		}
	}
});
```

This implementation allows Better Auth to use Redis for storing session data and rate limiting counters. You can also add prefixes to the keys names.

## [Core Schema](https://www.better-auth.com/docs/concepts/database\#core-schema)

Better Auth requires the following tables to be present in the database. The types are in `typescript` format. You can use corresponding types in your database.

### [User](https://www.better-auth.com/docs/concepts/database\#user)

Table Name: `user`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | Unique identifier for each user |
| name | string | - | User's chosen display name |
| email | string | - | User's email address for communication and login |
| emailVerified | boolean | - | Whether the user's email is verified |
| image | string | ? | User's image url |
| createdAt | Date | - | Timestamp of when the user account was created |
| updatedAt | Date | - | Timestamp of the last update to the user's information |

### [Session](https://www.better-auth.com/docs/concepts/database\#session)

Table Name: `session`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | Unique identifier for each session |
| userId | string | FK | The id of the user |
| token | string | - | The unique session token |
| expiresAt | Date | - | The time when the session expires |
| ipAddress | string | ? | The IP address of the device |
| userAgent | string | ? | The user agent information of the device |
| createdAt | Date | - | Timestamp of when the verification request was created |
| updatedAt | Date | - | Timestamp of when the verification request was updated |

### [Account](https://www.better-auth.com/docs/concepts/database\#account)

Table Name: `account`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | Unique identifier for each account |
| userId | string | FK | The id of the user |
| accountId | string | - | The id of the account as provided by the SSO or equal to userId for credential accounts |
| providerId | string | - | The id of the provider |
| accessToken | string | ? | The access token of the account. Returned by the provider |
| refreshToken | string | ? | The refresh token of the account. Returned by the provider |
| accessTokenExpiresAt | Date | ? | The time when the verification request expires |
| refreshTokenExpiresAt | Date | ? | The time when the verification request expires |
| scope | string | ? | The scope of the account. Returned by the provider |
| idToken | string | ? | The id token returned from the provider |
| password | string | ? | The password of the account. Mainly used for email and password authentication |
| createdAt | Date | - | Timestamp of when the verification request was created |
| updatedAt | Date | - | Timestamp of when the verification request was updated |

### [Verification](https://www.better-auth.com/docs/concepts/database\#verification)

Table Name: `verification`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | Unique identifier for each verification |
| identifier | string | - | The identifier for the verification request |
| value | string | - | The value to be verified |
| expiresAt | Date | - | The time when the verification request expires |
| createdAt | Date | - | Timestamp of when the verification request was created |
| updatedAt | Date | - | Timestamp of when the verification request was updated |

## [Custom Tables](https://www.better-auth.com/docs/concepts/database\#custom-tables)

Better Auth allows you to customize the table names and column names for the core schema. You can also extend the core schema by adding additional fields to the user and session tables.

### [Custom Table Names](https://www.better-auth.com/docs/concepts/database\#custom-table-names)

You can customize the table names and column names for the core schema by using the `modelName` and `fields` properties in your auth config:

auth.ts

```
export const auth = betterAuth({
   user: {
      modelName: "users",
      fields: {
        name: "full_name",
        email: "email_address"
      }
   },
   session: {
      modelName: "user_sessions",
      fields: {
        userId: "user_id"
      }
   }
})
```

Type inference in your code will still use the original field names (e.g., `user.name`, not `user.full_name`).

To customize table names and column name for plugins, you can use the `schema` property in the plugin config:

auth.ts

```
import { betterAuth } from "better-auth";
import { twoFactor } from "better-auth/plugins";

export const auth = betterAuth({
    plugins: [\
      twoFactor({\
        schema: {\
          user: {\
            fields: {\
              twoFactorEnabled: "two_factor_enabled",\
              secret: "two_factor_secret",\
            },\
          },\
        },\
      }),\
    ],
});
```

### [Extending Core Schema](https://www.better-auth.com/docs/concepts/database\#extending-core-schema)

Better Auth provides a type-safe way to extend the `user` and `session` schemas. You can add custom fields to your auth config, and the CLI will automatically update the database schema. These additional fields will be properly inferred in functions like `useSession`, `signUp.email`, and other endpoints that work with user or session objects.

To add custom fields, use the `additionalFields` property in the `user` or `session` object of your auth config. The `additionalFields` object uses field names as keys, with each value being a `FieldAttributes` object containing:

- `type`: The data type of the field (e.g., "string", "number", "boolean").
- `required`: A boolean indicating if the field is mandatory.
- `defaultValue`: The default value for the field (note: this only applies in the JavaScript layer; in the database, the field will be optional).
- `input`: This determines whether a value can be provided when creating a new record (default: `true`). If there are additional fields, like `role`, that should not be provided by the user during signup, you can set this to `false`.

Here's an example of how to extend the user schema with additional fields:

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
   user: {
      additionalFields: {
          role: {
             type: "string",
             required: false,
             defaultValue: "user",
             input: false // don't allow user to set role
          },
          lang: {
            type: "string",
            required: false,
            defaultValue: "en",
          }
      }
   }
})
```

Now you can access the additional fields in your application logic.

```
//on signup
const res = await auth.api.signUpEmail({
    email: "test@example.com",
    password: "password",
    name: "John Doe",
    lang: "fr"
})

//user object
res.user.role // > "admin"
res.user.lang // > "fr"
```

See the [Typescript](https://www.better-auth.com/docs/concepts/typescript#inferring-additional-fields-on-client) documentation for more information on how to infer additional fields on the client side.

If you're using social / OAuth providers, you may want to provide `mapProfileToUser` to map the profile data to the user object. So, you can populate additional fields from the provider's profile.

**Example: Mapping Profile to User For `firstName` and `lastName`**

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
   socialProviders: {
      github: {
         clientId: "YOUR_GITHUB_CLIENT_ID",
         clientSecret: "YOUR_GITHUB_CLIENT_SECRET",
          mapProfileToUser: (profile) => {
              return {
                firstName: profile.name.split(" ")[0],
                lastName: profile.name.split(" ")[1],
              }
          }
      },
      google: {
          clientId: "YOUR_GOOGLE_CLIENT_ID",
          clientSecret: "YOUR_GOOGLE_CLIENT_SECRET",
          mapProfileToUser: (profile) => {
              return {
                firstName: profile.given_name,
                lastName: profile.family_name,
              }
          }
      }
    }
})
```

### [ID Generation](https://www.better-auth.com/docs/concepts/database\#id-generation)

Better Auth by default will generate unique IDs for users, sessions, and other entities. If you want to customize how IDs are generated, you can configure this in the `advanced` object in your auth config.

You can also disable ID generation by setting the `generateId` option to `false`. This will assume your database will generate the ID automatically.

**Example: Automatic Database IDs**

auth.ts

```
import { betterAuth } from "better-auth";
import { db } from "./db";

export const auth = betterAuth({
   database: {
      db: db
   },
   advanced: {
      generateId: false,
   },
})
```

### [Database Hooks](https://www.better-auth.com/docs/concepts/database\#database-hooks)

Database hooks allow you to define custom logic that can be executed during the lifecycle of core database operations in Better Auth. You can create hooks for the following models: **user**, **session**, and **account**.

There are two types of hooks you can define:

#### [1\. Before Hook](https://www.better-auth.com/docs/concepts/database\#1-before-hook)

- **Purpose**: This hook is called before the respective entity (user, session, or account) is created or updated.
- **Behavior**: If the hook returns `false`, the operation will be aborted. And If it returns a data object, it'll replace the orginal payload.

#### [2\. After Hook](https://www.better-auth.com/docs/concepts/database\#2-after-hook)

- **Purpose**: This hook is called after the respective entity is created or updated.
- **Behavior**: You can perform additional actions or modifications after the entity has been successfully created or updated.

**Example Usage**

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
   databaseHooks: {
        user: {
          create: {
              before: async (user) => {
                  // Modify the user object before it is created
                  return {
                     data: {
                        ...user,
                        firstName: user.name.split(" ")[0],
                        lastName: user.name.split(" ")[1]
                     }
                  }
              },
              after: async (user) => {
                  //perform additional actions, like creating a stripe customer
              },
          },
      },
   }
})
```

#### [Throwing Errors](https://www.better-auth.com/docs/concepts/database\#throwing-errors)

If you want to stop the database hook from proceeding, you can throw errors using the `APIError` class imported from `better-auth/api`.

auth.ts

```
import { betterAuth } from "better-auth";
import { APIError } from "better-auth/api";

export const auth = betterAuth({
  databaseHooks: {
    user: {
      create: {
        before: async (user) => {
          if (user.isAgreedToTerms === false) { // Your special condition.
            // Send the API error.
            throw new APIError("BAD_REQUEST", {
              message: "User must agree to the TOS before signing up.",
            });
          }
          return {
            data: user
          };
        },
      },
    },
  }
})
```

## [Plugins Schema](https://www.better-auth.com/docs/concepts/database\#plugins-schema)

Plugins can define their own tables in the database to store additional data. They can also add columns to the core tables to store additional data. For example, the two factor authentication plugin adds the following columns to the `user` table:

- `twoFactorEnabled`: Whether two factor authentication is enabled for the user.
- `twoFactorSecret`: The secret key used to generate TOTP codes.
- `twoFactorBackupCodes`: Encrypted backup codes for account recovery.

To add new tables and columns to your database, you have two options:

`CLI`: Use the migrate or generate command. These commands will scan your database and guide you through adding any missing tables or columns.
`Manual Method`: Follow the instructions in the plugin documentation to manually add tables and columns.

Both methods ensure your database schema stays up-to-date with your plugins' requirements.

[**Cookies** \\
Learn how cookies are used in Better Auth.](https://www.better-auth.com/docs/concepts/cookies) [**Email** \\
Learn how to use email with Better Auth.](https://www.better-auth.com/docs/concepts/email)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Using Adapters](https://www.better-auth.com/docs/concepts/database#using-adapters) [Prisma Adapter](https://www.better-auth.com/docs/concepts/database#prisma-adapter) [Drizzle adapter](https://www.better-auth.com/docs/concepts/database#drizzle-adapter) [Mapping Schema](https://www.better-auth.com/docs/concepts/database#mapping-schema) [MongoDB Adapter](https://www.better-auth.com/docs/concepts/database#mongodb-adapter) [CLI](https://www.better-auth.com/docs/concepts/database#cli) [Running Migrations](https://www.better-auth.com/docs/concepts/database#running-migrations) [Generating Schema](https://www.better-auth.com/docs/concepts/database#generating-schema) [Secondary Storage](https://www.better-auth.com/docs/concepts/database#secondary-storage) [Implementation](https://www.better-auth.com/docs/concepts/database#implementation) [Core Schema](https://www.better-auth.com/docs/concepts/database#core-schema) [User](https://www.better-auth.com/docs/concepts/database#user) [Session](https://www.better-auth.com/docs/concepts/database#session) [Account](https://www.better-auth.com/docs/concepts/database#account) [Verification](https://www.better-auth.com/docs/concepts/database#verification) [Custom Tables](https://www.better-auth.com/docs/concepts/database#custom-tables) [Custom Table Names](https://www.better-auth.com/docs/concepts/database#custom-table-names) [Extending Core Schema](https://www.better-auth.com/docs/concepts/database#extending-core-schema) [ID Generation](https://www.better-auth.com/docs/concepts/database#id-generation) [Database Hooks](https://www.better-auth.com/docs/concepts/database#database-hooks) [1\. Before Hook](https://www.better-auth.com/docs/concepts/database#1-before-hook) [2\. After Hook](https://www.better-auth.com/docs/concepts/database#2-after-hook) [Throwing Errors](https://www.better-auth.com/docs/concepts/database#throwing-errors) [Plugins Schema](https://www.better-auth.com/docs/concepts/database#plugins-schema)Docs

On this pageGet your Twitter Credentials

# Twitter (X)

### [Get your Twitter Credentials](https://www.better-auth.com/docs/authentication/twitter\#get-your-twitter-credentials)

Get your Twitter credentials from the [Twitter Developer Portal](https://developer.twitter.com/en/portal/dashboard).

Make sure to set the redirect URL to `http://localhost:3000/api/auth/callback/twitter` for local development. For production, you should set it to the URL of your application. If you change the base path of the auth routes, you should update the redirect URL accordingly.

Twitter API v2 does not provide email addresses. As a workaround, the user's `email` field uses the `username` value instead.

### [Configure the provider](https://www.better-auth.com/docs/authentication/twitter\#configure-the-provider)

To configure the provider, you need to import the provider and pass it to the `socialProviders` option of the auth instance.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        twitter: {
            clientId: process.env.TWITTER_CLIENT_ID,
            clientSecret: process.env.TWITTER_CLIENT_SECRET,
        },
    },
})
```

### [Sign In with Twitter](https://www.better-auth.com/docs/authentication/twitter\#sign-in-with-twitter)

To sign in with Twitter, you can use the `signIn.social` function provided by the client. The `signIn` function takes an object with the following properties:

- `provider`: The provider to use. It should be set to `twitter`.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "twitter"
    })
}
```

[**Twitch** \\
Twitch provider setup and usage.](https://www.better-auth.com/docs/authentication/twitch) [**Dropbox** \\
Dropbox provider setup and usage.](https://www.better-auth.com/docs/authentication/dropbox)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Get your Twitter Credentials](https://www.better-auth.com/docs/authentication/twitter#get-your-twitter-credentials) [Configure the provider](https://www.better-auth.com/docs/authentication/twitter#configure-the-provider) [Sign In with Twitter](https://www.better-auth.com/docs/authentication/twitter#sign-in-with-twitter)Docs

On this pageInstallation

# Magic link

Magic link or email link is a way to authenticate users without a password. When a user enters their email, a link is sent to their email. When the user clicks on the link, they are authenticated.

## [Installation](https://www.better-auth.com/docs/plugins/magic-link\#installation)

### [Add the server Plugin](https://www.better-auth.com/docs/plugins/magic-link\#add-the-server-plugin)

Add the magic link plugin to your server:

server.ts

```
import { betterAuth } from "better-auth";
import { magicLink } from "better-auth/plugins";

export const auth = betterAuth({
    plugins: [\
        magicLink({\
            sendMagicLink: async ({ email, token, url }, request) => {\
                // send email to user\
            }\
        })\
    ]
})
```

### [Add the client Plugin](https://www.better-auth.com/docs/plugins/magic-link\#add-the-client-plugin)

Add the magic link plugin to your client:

auth-client.ts

```
import { createAuthClient } from "better-auth/client";
import { magicLinkClient } from "better-auth/client/plugins";
const authClient =  createAuthClient({
    plugins: [\
        magicLinkClient()\
    ]
});
```

## [Usage](https://www.better-auth.com/docs/plugins/magic-link\#usage)

### [Sign In with Magic Link](https://www.better-auth.com/docs/plugins/magic-link\#sign-in-with-magic-link)

To sign in with a magic link, you need to call `signIn.magicLink` with the user's email address. The `sendMagicLink` function is called to send the magic link to the user's email.

magic-link.ts

```
const { data, error } = await authClient.signIn.magicLink({
  email: "user@email.com",
  callbackURL: "/dashboard", //redirect after successful login (optional)
});
```

If the user has not signed up, unless `disableSignUp` is set to `true`, the user will be signed up automatically.

### [Verify Magic Link](https://www.better-auth.com/docs/plugins/magic-link\#verify-magic-link)

When you send the URL generated by the `sendMagicLink` function to a user, clicking the link will authenticate them and redirect them to the `callbackURL` specified in the `signIn.magicLink` function. If an error occurs, the user will be redirected to the `callbackURL` with an error query parameter.

If no `callbackURL` is provided, the user will be redirected to the root URL.

If you want to handle the verification manually, (e.g, if you send the user a different url), you can use the `verify` function.

magic-link.ts

```
const { data, error } = await authClient.magicLink.verify({
  query: {
    token,
  },
});
```

## [Configuration Options](https://www.better-auth.com/docs/plugins/magic-link\#configuration-options)

**sendMagicLink**: The `sendMagicLink` function is called when a user requests a magic link. It takes an object with the following properties:

- `email`: The email address of the user.
- `url`: The url to be sent to the user. This url contains the token.
- `token`: The token if you want to send the token with custom url.

and a `request` object as the second parameter.

**expiresIn**: specifies the time in seconds after which the magic link will expire. The default value is `300` seconds (5 minutes).

**disableSignUp**: If set to `true`, the user will not be able to sign up using the magic link. The default value is `false`.

**generateToken**: The `generateToken` function is called to generate a token which is used to uniquely identify the user. The default value is a random string. There is one parameter:

- `email`: The email address of the user.

When using `generateToken`, ensure that the returned string is hard to guess
because it is used to verify who someone actually is in a confidential way. By
default, we return a long and cryptographically secure string.

[**Phone Number** \\
Phone number plugin](https://www.better-auth.com/docs/plugins/phone-number) [**Email OTP** \\
Email OTP plugin for Better Auth.](https://www.better-auth.com/docs/plugins/email-otp)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/magic-link#installation) [Add the server Plugin](https://www.better-auth.com/docs/plugins/magic-link#add-the-server-plugin) [Add the client Plugin](https://www.better-auth.com/docs/plugins/magic-link#add-the-client-plugin) [Usage](https://www.better-auth.com/docs/plugins/magic-link#usage) [Sign In with Magic Link](https://www.better-auth.com/docs/plugins/magic-link#sign-in-with-magic-link) [Verify Magic Link](https://www.better-auth.com/docs/plugins/magic-link#verify-magic-link) [Configuration Options](https://www.better-auth.com/docs/plugins/magic-link#configuration-options)Docs

On this pageGet your Microsoft credentials

# Microsoft

Enabling OAuth with Microsoft Azure Entra ID (formerly Active Directory) allows your users to sign in and sign up to your application with their Microsoft account.

### [Get your Microsoft credentials](https://www.better-auth.com/docs/authentication/microsoft\#get-your-microsoft-credentials)

To use Microsoft as a social provider, you need to get your Microsoft credentials. Which involves generating your own Client ID and Client Secret using your Microsoft Entra ID dashboard account.

Make sure to set the redirect URL to `http://localhost:3000/api/auth/callback/microsoft` for local development. For production, you should change it to the URL of your application. If you change the base path of the auth routes, you should update the redirect URL accordingly.

see the [Microsoft Entra ID documentation](https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app) for more information.

### [Configure the provider](https://www.better-auth.com/docs/authentication/microsoft\#configure-the-provider)

To configure the provider, you need to pass the `clientId` and `clientSecret` to `socialProviders.microsoft` in your auth configuration.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        microsoft: {
            clientId: process.env.MICROSOFT_CLIENT_ID as string,
            clientSecret: process.env.MICROSOFT_CLIENT_SECRET as string,
            // Optional
            tenantId: 'common',
            requireSelectAccount: true
        },
    },
})
```

## [Sign In with Microsoft](https://www.better-auth.com/docs/authentication/microsoft\#sign-in-with-microsoft)

To sign in with Microsoft, you can use the `signIn.social` function provided by the client. The `signIn` function takes an object with the following properties:

- `provider`: The provider to use. It should be set to `microsoft`.

auth-client.ts

```
import { createAuthClient } from "better-auth/client";

const authClient = createAuthClient();

const signIn = async () => {
  const data = await authClient.signIn.social({
    provider: "microsoft",
    callbackURL: "/dashboard", //the url to redirect to after the sign in
  });
};
```

[**Google** \\
Google provider setup and usage.](https://www.better-auth.com/docs/authentication/google) [**Twitch** \\
Twitch provider setup and usage.](https://www.better-auth.com/docs/authentication/twitch)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Get your Microsoft credentials](https://www.better-auth.com/docs/authentication/microsoft#get-your-microsoft-credentials) [Configure the provider](https://www.better-auth.com/docs/authentication/microsoft#configure-the-provider) [Sign In with Microsoft](https://www.better-auth.com/docs/authentication/microsoft#sign-in-with-microsoft)Docs

On this page

# Email & Password

Email and password authentication is a common method used by many applications. Better Auth provides a built-in email and password authenticator that you can easily integrate into your project.

If you prefer username-based authentication, check out the [username plugin](https://www.better-auth.com/docs/plugins/username). It extends the
email and password authenticator with username support.

## [Enable Email and Password](https://www.better-auth.com/docs/authentication/email-password\#enable-email-and-password)

To enable email and password authentication, you need to set the `emailAndPassword.enabled` option to `true` in the `auth` configuration.

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
  emailAndPassword: {
    enabled: true,
  },
});
```

If it's not enabled, it'll not allow you to sign in or sign up with email and
password.

## [Usage](https://www.better-auth.com/docs/authentication/email-password\#usage)

### [Sign Up](https://www.better-auth.com/docs/authentication/email-password\#sign-up)

To sign a user up, you can use the `signUp.email` function provided by the client. The `signUp` function takes an object with the following properties:

- `email`: The email address of the user.
- `password`: The password of the user. It should be at least 8 characters long and max 32 by default.
- `name`: The name of the user.
- `image`: The image of the user. (optional)

auth-client.ts

```
const { data, error } = await authClient.signUp.email({
  email: "test@example.com",
  password: "password1234",
  name: "test",
  image: "https://example.com/image.png",
});
```

### [Sign In](https://www.better-auth.com/docs/authentication/email-password\#sign-in)

To sign a user in, you can use the `signIn.email` function provided by the client. The `signIn` function takes an object with the following properties:

- `email`: The email address of the user.
- `password`: The password of the user.
- `rememberMe`: If false, the user will be signed out when the browser is closed. (optional) (default: true)
- `callbackURL`: The URL to redirect to after the user signs in. (optional)

auth-client.ts

```
const { data, error } = await authClient.signIn.email({
  email: "test@example.com",
  password: "password1234",
});
```

### [Sign Out](https://www.better-auth.com/docs/authentication/email-password\#sign-out)

To sign a user out, you can use the `signOut` function provided by the client.

auth-client.ts

```
await authClient.signOut();
```

you can pass `fetchOptions` to redirect onSuccess

auth-client.ts

```
await authClient.signOut({
  fetchOptions: {
    onSuccess: () => {
      router.push("/login"); // redirect to login page
    },
  },
});
```

### [Email Verification](https://www.better-auth.com/docs/authentication/email-password\#email-verification)

To enable email verification, you need to pass a function that sends a verification email with a link. The `sendVerificationEmail` function takes a data object with the following properties:

- `user`: The user object.
- `url`: The url to send to the user which contains the token.
- `token`: A verification token used to complete the email verification.

and a `request` object as the second parameter.

auth.ts

```
import { betterAuth } from "better-auth";
import { sendEmail } from "./email"; // your email sending function

export const auth = betterAuth({
  emailVerification: {
    sendVerificationEmail: async ( { user, url, token }, request) => {
      await sendEmail({
        to: user.email,
        subject: "Verify your email address",
        text: `Click the link to verify your email: ${url}`,
      });
    },
  },
});
```

On the client side you can use `sendVerificationEmail` function to send verification link to user. This will trigger the `sendVerificationEmail` function you provided in the `auth` configuration.

Once the user clicks on the link in the email, if the token is valid, the user will be redirected to the URL provided in the `callbackURL` parameter. If the token is invalid, the user will be redirected to the URL provided in the `callbackURL` parameter with an error message in the query string `?error=invalid_token`.

#### [Require Email Verification](https://www.better-auth.com/docs/authentication/email-password\#require-email-verification)

If you enable require email verification, users must verify their email before they can log in. And every time a user tries to sign in, sendVerificationEmail is called.

This only works if you have sendVerificationEmail implemented and if the user
is trying to sign in with email and password.

auth.ts

```
export const auth = betterAuth({
  emailAndPassword: {
    requireEmailVerification: true,
  },
});
```

If a user tries to sign in without verifying their email, you can handle the error and show a message to the user.

auth-client.ts

```
await authClient.signIn.email(
  {
    email: "email@example.com",
    password: "password",
  },
  {
    onError: (ctx) => {
      // Handle the error
      if (ctx.error.status === 403) {
        alert("Please verify your email address");
      }
      //you can also show the original error message
      alert(ctx.error.message);
    },
  }
);
```

#### [Triggering manually Email Verification](https://www.better-auth.com/docs/authentication/email-password\#triggering-manually-email-verification)

You can trigger the email verification manually by calling the `sendVerificationEmail` function.

```
await authClient.sendVerificationEmail({
  email: "user@email.com",
  callbackURL: "/", // The redirect URL after verification
});
```

### [Forget Password](https://www.better-auth.com/docs/authentication/email-password\#forget-password)

To allow users to reset a password first you need to provide `sendResetPassword` function to the email and password authenticator. The `sendResetPassword` function takes a data object with the following properties:

- `user`: The user object.
- `url`: The url to send to the user which contains the token.
- `token`: A verification token used to complete the password reset.

and a `request` object as the second parameter.

auth.ts

```
import { betterAuth } from "better-auth";
import { sendEmail } from "./email"; // your email sending function

export const auth = betterAuth({
  emailAndPassword: {
    enabled: true,
    sendResetPassword: async ({user, url, token}, request) => {
      await sendEmail({
        to: user.email,
        subject: "Reset your password",
        text: `Click the link to reset your password: ${url}`,
      });
    },
  },
});
```

Once you configured your server you can call `forgetPassword` function to send reset password link to user. If the user exists, it will trigger the `sendResetPassword` function you provided in the auth config.

It takes an object with the following properties:

- `email`: The email address of the user.
- `redirectTo`: The URL to redirect to after the user clicks on the link in the email. If the token is valid, the user will be redirected to this URL with the token in the query string. If the token is invalid, the user will be redirected to this URL with an error message in the query string `?error=invalid_token`.

auth-client.ts

```
const { data, error } = await authClient.forgetPassword({
  email: "test@example.com",
  redirectTo: "/reset-password",
});
```

When a user clicks on the link in the email, they will be redirected to the reset password page. You can add the reset password page to your app. Then you can use `resetPassword` function to reset the password. It takes an object with the following properties:

- `newPassword`: The new password of the user.

auth-client.ts

```
const token = new URLSearchParams(window.location.search).get("token");
if (!token) {
  // Handle the error
}
const { data, error } = await authClient.resetPassword({
  newPassword: "password1234",
  token,
});
```

### [Update password](https://www.better-auth.com/docs/authentication/email-password\#update-password)

This only works on server-side, and the following code may change over time.

To set a password, you must hash it first:

```
const ctx = await auth.$context;
const hash = await ctx.password.hash("your-new-password");
```

Then, to set the password:

```
await ctx.internalAdapter.updatePassword("userId", hash) //(you can also use your orm directly)
```

### [Configuration](https://www.better-auth.com/docs/authentication/email-password\#configuration)

**Password**

Better Auth stores passwords inside the `account` table with `providerId` set to `credential`.

**Password Hashing**: Better Auth uses `scrypt` to hash passwords. The `scrypt` algorithm is designed to be slow and memory-intensive to make it difficult for attackers to brute force passwords. OWASP recommends using `scrypt` if `argon2id` is not available. We decided to use `scrypt` because it's natively supported by Node.js.

You can pass custom password hashing algorithm by setting `passwordHasher` option in the `auth` configuration.

auth.ts

```
import { betterAuth } from "better-auth"
import { scrypt } from "scrypt"

export const auth = betterAuth({
    //...rest of the options
    emailAndPassword: {
        password: {
            hash: // your custom password hashing function
            verify: // your custom password verification function
        }
    }
})
```

| Prop | Type | Default |
| --- | --- | --- |
| `enabled` | `boolean` | `false` |
| `minPasswordLength` | `number` | `8` |
| `maxPasswordLength` | `number` | `128` |
| `sendResetPassword` | `function` | - |
| `password` | `object` | - |

[**User & Accounts** \\
User and account management.](https://www.better-auth.com/docs/concepts/users-accounts) [**Apple** \\
Apple provider setup and usage.](https://www.better-auth.com/docs/authentication/apple)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Enable Email and Password](https://www.better-auth.com/docs/authentication/email-password#enable-email-and-password) [Usage](https://www.better-auth.com/docs/authentication/email-password#usage) [Sign Up](https://www.better-auth.com/docs/authentication/email-password#sign-up) [Sign In](https://www.better-auth.com/docs/authentication/email-password#sign-in) [Sign Out](https://www.better-auth.com/docs/authentication/email-password#sign-out) [Email Verification](https://www.better-auth.com/docs/authentication/email-password#email-verification) [Require Email Verification](https://www.better-auth.com/docs/authentication/email-password#require-email-verification) [Triggering manually Email Verification](https://www.better-auth.com/docs/authentication/email-password#triggering-manually-email-verification) [Forget Password](https://www.better-auth.com/docs/authentication/email-password#forget-password) [Update password](https://www.better-auth.com/docs/authentication/email-password#update-password) [Configuration](https://www.better-auth.com/docs/authentication/email-password#configuration)Docs

On this pageInstallation

# One Tap

The One Tap plugin allows users to log in with a single tap using Google's One Tap API. The plugin
provides a simple way to integrate One Tap into your application, handling the client-side and server-side logic for you.

## [Installation](https://www.better-auth.com/docs/plugins/one-tap\#installation)

### [Add the Server Plugin](https://www.better-auth.com/docs/plugins/one-tap\#add-the-server-plugin)

Add the One Tap plugin to your auth configuration:

auth.ts

```
import { betterAuth } from "better-auth";
import { oneTap } from "better-auth/plugins";

export const auth = betterAuth({
  plugins: [\
    oneTap(), // Add the One Tap server plugin\
  ]
});
```

### [Add the Client Plugin](https://www.better-auth.com/docs/plugins/one-tap\#add-the-client-plugin)

Add the client plugin and specify where the user should be redirected after sign-in or if additional verification (like 2FA) is needed.

```
const authClient = createAuthClient({
  plugins: [\
    oneTapClient({\
      clientId: "YOUR_CLIENT_ID",\
      // Optional client configuration:\
      autoSelect: false,\
      cancelOnTapOutside: true,\
      context: "signin",\
      additionalOptions: {\
        // Any extra options for the Google initialize method\
      },\
      // Configure prompt behavior and exponential backoff:\
      promptOptions: {\
        baseDelay: 1000,   // Base delay in ms (default: 1000)\
        maxAttempts: 5     // Maximum number of attempts before triggering onPromptNotification (default: 5)\
      }\
    })\
  ]
});
```

### [Usage](https://www.better-auth.com/docs/plugins/one-tap\#usage)

To display the One Tap popup, simply call the oneTap method on your auth client:

```
await authClient.oneTap();
```

### [Customizing Redirect Behavior](https://www.better-auth.com/docs/plugins/one-tap\#customizing-redirect-behavior)

By default, after a successful login the plugin will hard redirect the user to `/`. You can customize this behavior as follows:

#### [Avoiding a Hard Redirect](https://www.better-auth.com/docs/plugins/one-tap\#avoiding-a-hard-redirect)

Pass fetchOptions with an onSuccess callback to handle the login response without a page reload:

```
authClient.oneTap({
  fetchOptions: {
    onSuccess: () => {
      // For example, use a router to navigate without a full reload:
      router.push("/dashboard");
    }
  }
});
```

#### [Specifying a Custom Callback URL](https://www.better-auth.com/docs/plugins/one-tap\#specifying-a-custom-callback-url)

To perform a hard redirect to a different page after login, use the callbackURL option:

```
authClient.oneTap({
  callbackURL: "/dashboard"
});
```

#### [Handling Prompt Dismissals with Exponential Backoff](https://www.better-auth.com/docs/plugins/one-tap\#handling-prompt-dismissals-with-exponential-backoff)

If the user dismisses or skips the prompt, the plugin will retry showing the One Tap prompt using exponential backoff based on your configured promptOptions.

If the maximum number of attempts is reached without a successful sign-in, you can use the onPromptNotification callback to be notified—allowing you to render an alternative UI (e.g., a traditional Google Sign-In button) so users can restart the process manually:

```
authClient.oneTap({
  onPromptNotification: (notification) => {
    console.warn("Prompt was dismissed or skipped. Consider displaying an alternative sign-in option.", notification);
    // Render your alternative UI here
  }
});
```

### [Client Options](https://www.better-auth.com/docs/plugins/one-tap\#client-options)

- **clientId**: The client ID for your Google One Tap API.
- **autoSelect**: Automatically select the account if the user is already signed in. Default is false.
- **context**: The context in which the One Tap API should be used (e.g., "signin"). Default is "signin".
- **cancelOnTapOutside**: Cancel the One Tap popup when the user taps outside it. Default is true.
- additionalOptions: Extra options to pass to Google's initialize method as per the [Google Identity Services docs](https://developers.google.com/identity/gsi/web/reference/js-reference#google.accounts.id.prompt).
- **promptOptions**: Configuration for the prompt behavior and exponential backoff:
- **baseDelay**: Base delay in milliseconds for retries. Default is 1000.
- **maxAttempts**: Maximum number of prompt attempts before invoking the onPromptNotification callback. Default is 5.

### [Server Options](https://www.better-auth.com/docs/plugins/one-tap\#server-options)

- **disableSignUp**: Disable the sign-up option, allowing only existing users to sign in. Default is `false`.
- **ClientId**: Optionally, pass a client ID here if it is not provided in your social provider configuration.

[**Generic OAuth** \\
Authenticate users with any OAuth provider](https://www.better-auth.com/docs/plugins/generic-oauth) [**Admin** \\
Admin plugin for Better Auth](https://www.better-auth.com/docs/plugins/admin)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/one-tap#installation) [Add the Server Plugin](https://www.better-auth.com/docs/plugins/one-tap#add-the-server-plugin) [Add the Client Plugin](https://www.better-auth.com/docs/plugins/one-tap#add-the-client-plugin) [Usage](https://www.better-auth.com/docs/plugins/one-tap#usage) [Customizing Redirect Behavior](https://www.better-auth.com/docs/plugins/one-tap#customizing-redirect-behavior) [Avoiding a Hard Redirect](https://www.better-auth.com/docs/plugins/one-tap#avoiding-a-hard-redirect) [Specifying a Custom Callback URL](https://www.better-auth.com/docs/plugins/one-tap#specifying-a-custom-callback-url) [Handling Prompt Dismissals with Exponential Backoff](https://www.better-auth.com/docs/plugins/one-tap#handling-prompt-dismissals-with-exponential-backoff) [Client Options](https://www.better-auth.com/docs/plugins/one-tap#client-options) [Server Options](https://www.better-auth.com/docs/plugins/one-tap#server-options)Docs

On this pageWorking on Issues

# Areas To Contribute

## [Working on Issues](https://www.better-auth.com/docs/contribute/areas-to-contribute\#working-on-issues)

The easiest way to start contributing is by tackling existing issues. Here's how:

1. Check our [github issues](https://github.com/better-auth/better-auth/issues) for issues labeled `good first issue`, `help wanted` or `question`
2. Comment on the issue you'd like to work on to avoid duplicate efforts
3. If you've found a bug or have a feature request not listed, please create a new issue:
   - For bugs: Include steps to reproduce, expected vs actual behavior
   - For features: Describe the feature and its use cases

## [Framework Integrations](https://www.better-auth.com/docs/contribute/areas-to-contribute\#framework-integrations)

Better Auth aims to support as many frameworks as possible in the JavaScript ecosystem. Here's how you can help expand our framework support:

### [Adding New Framework Support](https://www.better-auth.com/docs/contribute/areas-to-contribute\#adding-new-framework-support)

1. Start with documentation for basic integration
2. Focus on framework-agnostic solutions where possible
3. Keep integrations minimal and maintainable

### [Integration Guidelines](https://www.better-auth.com/docs/contribute/areas-to-contribute\#integration-guidelines)

- Prefer framework-agnostic solutions over framework-specific ones
- Keep server-side integrations as thin as possible
- All integrations currently live in the main package (packages/better-auth)
- Focus on reducing implementation friction while maintaining flexibility

### [Current Structure](https://www.better-auth.com/docs/contribute/areas-to-contribute\#current-structure)

We currently maintain all integrations (frameworks, plugins, utilities) in a single package for simplicity. As the project grows, we may consider splitting these into separate packages.

## [Plugin Development](https://www.better-auth.com/docs/contribute/areas-to-contribute\#plugin-development)

Want to extend Better Auth's functionality? Here's our plugin contribution process:

### [Core Plugins](https://www.better-auth.com/docs/contribute/areas-to-contribute\#core-plugins)

1. **Open an Issue First**: Describe your plugin idea
2. **Get Approval**: Wait for team feedback before starting
3. **Development**: Follow our [plugin development guide](https://www.better-auth.com/docs/guides/your-first-plugin)

### [Community Plugins](https://www.better-auth.com/docs/contribute/areas-to-contribute\#community-plugins)

- Feel free to develop and publish plugins independently
- Use our [Plugin docs](https://www.better-auth.com/docs/concepts/plugins) as a reference
- Consider sharing your plugin in our [community showcase channel](https://discord.com/channels/1288403910284935179/1296056387968700416).

## [Core Feature Development](https://www.better-auth.com/docs/contribute/areas-to-contribute\#core-feature-development)

Contributing to core features requires careful coordination:

### [Process](https://www.better-auth.com/docs/contribute/areas-to-contribute\#process)

1. **Open an Issue**: Describe the feature and its use cases
2. **Discussion**: Get feedback from the team and community
3. **Planning**: Outline implementation approach
4. **Development**: Create a draft PR early for guidance

### [Best Practices](https://www.better-auth.com/docs/contribute/areas-to-contribute\#best-practices)

- Start with a minimal viable implementation
- Include tests and documentation
- Keep backwards compatibility in mind
- Follow our coding standards

## [Security Contributions](https://www.better-auth.com/docs/contribute/areas-to-contribute\#security-contributions)

Security is our top priority. If you discover a security vulnerability:

1. **DO NOT** create a public issue
2. Send details to [security@better-auth.com](mailto:security@better-auth.com)
3. Include:
   - Description of the vulnerability
   - Steps to reproduce
   - Potential impact
   - Suggested fix (if any)

Learn more about our [security issues documentation](https://better-auth.com/docs/contribute/security-issues).

## [Other Ways to Contribute](https://www.better-auth.com/docs/contribute/areas-to-contribute\#other-ways-to-contribute)

- Improve error messages
- Add test cases
- Enhance documentation
- Share examples
- Report performance issues
- Suggest optimizations

Remember, all contributions, no matter how small, are valuable to the project. If you're unsure about anything, don't hesitate to ask in our [Discord server](https://discord.gg/GYC3W7tZzb).

Let's make authentication better, together! 🚀

[**Contributing to BetterAuth** \\
Getting started to contribute to BetterAuth](https://www.better-auth.com/docs/contribute/getting-started) [**Testing in Better Auth** \\
Testing Guide for Better Auth](https://www.better-auth.com/docs/contribute/testing)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Working on Issues](https://www.better-auth.com/docs/contribute/areas-to-contribute#working-on-issues) [Framework Integrations](https://www.better-auth.com/docs/contribute/areas-to-contribute#framework-integrations) [Adding New Framework Support](https://www.better-auth.com/docs/contribute/areas-to-contribute#adding-new-framework-support) [Integration Guidelines](https://www.better-auth.com/docs/contribute/areas-to-contribute#integration-guidelines) [Current Structure](https://www.better-auth.com/docs/contribute/areas-to-contribute#current-structure) [Plugin Development](https://www.better-auth.com/docs/contribute/areas-to-contribute#plugin-development) [Core Plugins](https://www.better-auth.com/docs/contribute/areas-to-contribute#core-plugins) [Community Plugins](https://www.better-auth.com/docs/contribute/areas-to-contribute#community-plugins) [Core Feature Development](https://www.better-auth.com/docs/contribute/areas-to-contribute#core-feature-development) [Process](https://www.better-auth.com/docs/contribute/areas-to-contribute#process) [Best Practices](https://www.better-auth.com/docs/contribute/areas-to-contribute#best-practices) [Security Contributions](https://www.better-auth.com/docs/contribute/areas-to-contribute#security-contributions) [Other Ways to Contribute](https://www.better-auth.com/docs/contribute/areas-to-contribute#other-ways-to-contribute)Docs

On this pageOur Security Commitment

# Security Policy and Disclosure Guidelines

## [Our Security Commitment](https://www.better-auth.com/docs/contribute/security-issues\#our-security-commitment)

At Better Auth, security is our highest priority. We take all security concerns seriously and appreciate the efforts of security researchers and our community in responsibly disclosing potential vulnerabilities.

## [Reporting a Vulnerability](https://www.better-auth.com/docs/contribute/security-issues\#reporting-a-vulnerability)

### [Preferred Method](https://www.better-auth.com/docs/contribute/security-issues\#preferred-method)

Please report security issues by emailing:

```
security@better-auth.com
```

### [What to Include](https://www.better-auth.com/docs/contribute/security-issues\#what-to-include)

When reporting a security issue, please include:

1. **Description**
   - Clear explanation of the vulnerability
   - Affected versions/components
   - Type of vulnerability (e.g., XSS, CSRF, Authentication Bypass)
2. **Reproduction Steps**
   - Detailed steps to reproduce the vulnerability
   - Any required setup or configuration
   - Code samples if applicable
   - Example payload if relevant
3. **Impact Assessment**
   - Potential security impact
   - What an attacker might be able to accomplish
   - Affected user groups or data
4. **Supporting Materials**
   - Screenshots or videos (if applicable)
   - Proof of concept code (if available)
   - Related references or CVEs
5. **Mitigation Suggestions**
   - Proposed fixes or workarounds
   - Recommended security controls

## [Our Response Process](https://www.better-auth.com/docs/contribute/security-issues\#our-response-process)

1. **Initial Response**
   - Acknowledgment within 24 to 48 hours
   - Case number assignment
   - Initial severity assessment
2. **Investigation**
   - Technical review of the report
   - Impact analysis
   - Verification of reproduction steps
   - Development of fix strategy
3. **Resolution Timeline**
   - Critical vulnerabilities: 24-48 hours
   - High severity: 1 week
   - Medium severity: 2 weeks
   - Low severity: Next release cycle
4. **Communication**
   - Regular updates on fix progress
   - Notification when fix is ready
   - Coordination on disclosure timeline

## [Disclosure Policy](https://www.better-auth.com/docs/contribute/security-issues\#disclosure-policy)

1. **Responsible Disclosure**
   - No public disclosure before fix implementation
   - Coordinated release of security advisories
   - Credit given to reporters in security advisories
2. **Fix Release Process**
   - Security patches released as priority updates
   - Clear documentation of fixes
   - Migration guides if needed
3. **Post-Fix Communication**
   - Public security advisories
   - Notification to affected users
   - Updated security documentation

## [Bug Bounty Program](https://www.better-auth.com/docs/contribute/security-issues\#bug-bounty-program)

Currently, we do not operate a formal bug bounty program. However, we do recognize and credit security researchers who:

- Follow responsible disclosure guidelines
- Provide clear and actionable reports

## [Out of Scope](https://www.better-auth.com/docs/contribute/security-issues\#out-of-scope)

The following are typically out of scope:

- DOS/DDOS attacks
- Spam attacks
- Social engineering
- Physical security issues
- Issues requiring physical access
- Issues in dependencies (report to them directly)
- TLS configuration issues without practical impact

## [Contact Information](https://www.better-auth.com/docs/contribute/security-issues\#contact-information)

- Security Issues: [security@better-auth.com](mailto:security@better-auth.com)

Remember: Security is a collaborative effort. Thank you for helping keep Better Auth and its users secure!

[**Documenting** \\
Documentation Guide for Better Auth](https://www.better-auth.com/docs/contribute/documenting) [**Introduction** \\
Introduction to Better Auth.](https://www.better-auth.com/docs/introduction)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Our Security Commitment](https://www.better-auth.com/docs/contribute/security-issues#our-security-commitment) [Reporting a Vulnerability](https://www.better-auth.com/docs/contribute/security-issues#reporting-a-vulnerability) [Preferred Method](https://www.better-auth.com/docs/contribute/security-issues#preferred-method) [What to Include](https://www.better-auth.com/docs/contribute/security-issues#what-to-include) [Our Response Process](https://www.better-auth.com/docs/contribute/security-issues#our-response-process) [Disclosure Policy](https://www.better-auth.com/docs/contribute/security-issues#disclosure-policy) [Bug Bounty Program](https://www.better-auth.com/docs/contribute/security-issues#bug-bounty-program) [Out of Scope](https://www.better-auth.com/docs/contribute/security-issues#out-of-scope) [Contact Information](https://www.better-auth.com/docs/contribute/security-issues#contact-information)Docs

On this pageConfiguring Rate Limit

# Rate Limit

Better Auth includes a built-in rate limiter to help manage traffic and prevent abuse. By default, in production mode, the rate limiter is set to:

- Window: 60 seconds
- Max Requests: 100 requests

You can easily customize these settings by passing the rateLimit object to the betterAuth function.

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    rateLimit: {
        window: 10, // time window in seconds
        max: 100, // max requests in the window
    },
})
```

In addition to the default settings, Better Auth provides custom rules for specific paths. For example:

- `/sign-in/email`: Is limited to 3 requests within 10 seconds.

In addition, plugins also define custom rules for specific paths. For example, `twoFactor` plugin has custom rules:

- `/two-factor/verify`: Is limited to 3 requests within 10 seconds.

These custom rules ensure that sensitive operations are protected with stricter limits.

## [Configuring Rate Limit](https://beta.better-auth.com/docs/concepts/rate-limit\#configuring-rate-limit)

### [Rate Limit Window](https://beta.better-auth.com/docs/concepts/rate-limit\#rate-limit-window)

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    //...other options
    rateLimit: {
        window: 60, // time window in seconds
        max: 100, // max requests in the window
    },
})
```

You can also pass custom rules for specific paths.

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    //...other options
    rateLimit: {
        window: 60, // time window in seconds
        max: 100, // max requests in the window
        customRules: {
            "/sign-in/email": {
                window: 10,
                max: 3,
            },
            "/two-factor/*": async (request)=> {
                // custom function to return rate limit window and max
                return {
                    window: 10,
                    max: 3,
                }
            }
        },
    },
})
```

### [Storage](https://beta.better-auth.com/docs/concepts/rate-limit\#storage)

By default, rate limit data is stored in memory, which may not be suitable for many use cases, particularly in serverless environments. To address this, you can use a database, secondary storage, or custom storage for storing rate limit data.

**Using Database**

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    //...other options
    rateLimit: {
        storage: "database",
        modelName: "rateLimit", //optional by default "rateLimit" is used
    },
})
```

Make sure to run `migrate` to create the rate limit table in your database.

```
npx @better-auth/cli migrate
```

**Using Secondary Storage**

If a [Secondary Storage](https://beta.better-auth.com/docs/concepts/database#secondary-storage) has been configured you can use that to store rate limit data.

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    //...other options
    rateLimit: {
		storage: "secondary-storage"
    },
})
```

**Custom Storage**

If none of the above solutions suits your use case you can implement a `customStorage`.

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    //...other options
    rateLimit: {
        customStorage: {
            get: async (key) => {
                // get rate limit data
            },
            set: async (key, value) => {
                // set rate limit data
            },
        },
    },
})
```

## [Handling Rate Limit Errors](https://beta.better-auth.com/docs/concepts/rate-limit\#handling-rate-limit-errors)

When a request exceeds the rate limit, Better Auth returns the following header:

- `X-Retry-After`: The number of seconds until the user can make another request.

To handle rate limit errors on the client side, you can manage them either globally or on a per-request basis. Since Better Auth clients wrap over Better Fetch, you can pass `fetchOptions` to handle rate limit errors

**Global Handling**

auth-client.ts

```
import { createAuthClient } from "better-auth/client";

export const authClient =  createAuthClient({
    fetchOptions: {
        onError: async (context) => {
            const { response } = context;
            if (response.status === 429) {
                const retryAfter = response.headers.get("X-Retry-After");
                console.log(`Rate limit exceeded. Retry after ${retryAfter} seconds`);
            }
        },
    }
})
```

**Per Request Handling**

auth-client.ts

```
import { client } from "./client";

await authClient.signIn.email({
    fetchOptions: {
        onError: async (context) => {
            const { response } = context;
            if (response.status === 429) {
                const retryAfter = response.headers.get("X-Retry-After");
                console.log(`Rate limit exceeded. Retry after ${retryAfter} seconds`);
            }
        },
    }
})
```

### [Schema](https://beta.better-auth.com/docs/concepts/rate-limit\#schema)

If you are using a database to store rate limit data you need this schema:

Table Name: `rateLimit`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| key | string | PK | Unique identifier for each rate limit key |
| count | integer | - | Time window in seconds |
| lastRequest | bigint | - | Max requests in the window |

[**OAuth** \\
How Better Auth handles OAuth](https://beta.better-auth.com/docs/concepts/oauth) [**Session Management** \\
Better Auth session management.](https://beta.better-auth.com/docs/concepts/session-management)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Configuring Rate Limit](https://beta.better-auth.com/docs/concepts/rate-limit#configuring-rate-limit) [Rate Limit Window](https://beta.better-auth.com/docs/concepts/rate-limit#rate-limit-window) [Storage](https://beta.better-auth.com/docs/concepts/rate-limit#storage) [Handling Rate Limit Errors](https://beta.better-auth.com/docs/concepts/rate-limit#handling-rate-limit-errors) [Schema](https://beta.better-auth.com/docs/concepts/rate-limit#schema)Docs

On this pageMount the handler

# Elysia Integration

This integration guide is assuming you are using Elysia with bun server.

Before you start, make sure you have a Better Auth instance configured. If you haven't done that yet, check out the [installation](https://www.better-auth.com/docs/installation).

### [Mount the handler](https://www.better-auth.com/docs/integrations/elysia\#mount-the-handler)

We need to mount the handler to Elysia endpoint.

```
import { Elysia } from "elysia";
import { auth } from "./auth";

const app = new Elysia().mount(auth.handler).listen(3000);

console.log(
  `🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`,
);
```

### [CORS](https://www.better-auth.com/docs/integrations/elysia\#cors)

To configure cors, you can use the `cors` plugin from `@elysiajs/cors`.

```
import { Elysia } from "elysia";
import { cors } from "@elysiajs/cors";

import { auth } from "./auth";

const app = new Elysia()
  .use(
    cors({
      origin: "http://localhost:3001",
      methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
      credentials: true,
      allowedHeaders: ["Content-Type", "Authorization"],
    }),
  )
  .mount(auth.handler)
  .listen(3000);

console.log(
  `🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`,
);
```

### [Macro](https://www.better-auth.com/docs/integrations/elysia\#macro)

You can use [macro](https://elysiajs.com/patterns/macro.html#macro) with [resolve](https://elysiajs.com/essential/handler.html#resolve) to provide session and user information before pass to view.

```
import { Elysia } from "elysia";
import { auth } from "./auth";

// user middleware (compute user and session and pass to routes)
const betterAuth = new Elysia({ name: "better-auth" })
  .mount(auth.handler)
  .macro({
    auth: {
      async resolve({ error, request: { headers } }) {
        const session = await auth.api.getSession({
          headers,
        });

        if (!session) return error(401);

        return {
          user: session.user,
          session: session.session,
        };
      },
    },
  });

const app = new Elysia()
  .use(betterAuth)
  .get("/user", ({ user }) => user, {
    auth: true,
  })
  .listen(3000);

console.log(
  `🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`,
);
```

This will allow you to access the `user` and `session` object in all of your routes.

[**Express Integration** \\
Integrate Better Auth with Express.](https://www.better-auth.com/docs/integrations/express) [**Nitro Integration** \\
Integrate Better Auth with Nitro.](https://www.better-auth.com/docs/integrations/nitro)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Mount the handler](https://www.better-auth.com/docs/integrations/elysia#mount-the-handler) [CORS](https://www.better-auth.com/docs/integrations/elysia#cors) [Macro](https://www.better-auth.com/docs/integrations/elysia#macro)Docs

On this pageCaching

# Optimizing for Performance

In this guide, we’ll go over some of the ways you can optimize your application for a more performant Better Auth app.

## [Caching](https://www.better-auth.com/docs/guides/optimizing-for-performance\#caching)

Caching is a powerful technique that can significantly improve the performance of your Better Auth application by reducing the number of database queries and speeding up response times.

### [Cookie Cache](https://www.better-auth.com/docs/guides/optimizing-for-performance\#cookie-cache)

Calling your database every time `useSession` or `getSession` invoked isn’t ideal, especially if sessions don’t change frequently. Cookie caching handles this by storing session data in a short-lived, signed cookie—similar to how JWT access tokens are used with refresh tokens.

To turn on cookie caching, just set `session.cookieCache` in your auth config:

auth.ts

```
const auth = new BetterAuth({
  session: {
    cookieCache: {
      enabled: true,
      maxAge: 5 * 60, // Cache duration in seconds
    },
  },
});
```

Read more about [cookie caching](https://www.better-auth.com/docs/concepts/session-management#cookie-cache).

### [Framework Caching](https://www.better-auth.com/docs/guides/optimizing-for-performance\#framework-caching)

Here are examples of how you can do caching in different frameworks and environments:

NextJsRemixSolid StartReact Query

Since Next v15, we can use the `"use cache"` directive to cache the response of a server function.

```
export async function getUsers() {
    'use cache'
    const { users } = await auth.api.listUsers();
    return users
}
```

Learn more about NextJS use cache directive [here](https://nextjs.org/docs/app/api-reference/directives/use-cache).

## [SSR Optimizations](https://www.better-auth.com/docs/guides/optimizing-for-performance\#ssr-optimizations)

Server-side rendering (SSR) is a powerful technique that allows you to render your application on the server and deliver fully rendered HTML to the client,
significantly enhancing performance, especially for data-intensive or complex applications.
To optimize SSR, minimize client-side data fetching by offloading data gathering to the server,
which reduces initial load times. Implement caching strategies for frequently accessed data to decrease server load and improve response times.
Additionally, simplify your rendering logic to ensure efficient server-side processing, consider using streaming to send parts of the rendered HTML as they become available,
and prioritize critical data for the initial render while loading less essential data asynchronously afterward.

## [Database optimizations](https://www.better-auth.com/docs/guides/optimizing-for-performance\#database-optimizations)

Optimizing database performance is essential for any authentication library, including Better Auth.
Efficient database interactions can significantly enhance the speed and reliability of user authentication processes.
Since Better Auth supports a wide variety of databases, we cannot cover each one in detail regarding optimization techniques.
However, we can provide some general tips and strategies to improve your database performance.
Below are two critical techniques specifically tailored for Better Auth: using indexes and employing connection pools.

### [Using indexes](https://www.better-auth.com/docs/guides/optimizing-for-performance\#using-indexes)

Indexes are powerful tools that can dramatically improve the performance of database queries, especially in an authentication context where speed is crucial.
Here’s how to effectively utilize indexes in Better Auth:

1. **Types of Indexes**: There are several types of indexes, including:
   - B-tree Indexes: The most common type, suitable for a wide range of queries.
   - Hash Indexes: Useful for equality comparisons but not for range queries.
   - Full-text Indexes: Designed for searching text within large text fields.
   - Spatial Indexes: Optimized for spatial data types, such as geographic coordinates.
2. **When to Use Indexes**: Indexes are particularly beneficial for:
   - Columns frequently used in WHERE clauses.
   - Columns involved in JOIN operations.
   - Columns used in ORDER BY and GROUP BY clauses.
3. **Trade-offs**: While indexes can significantly speed up read operations, they can also introduce overhead during write operations (INSERT, UPDATE, DELETE) because the index must be updated.
Therefore, it's essential to strike a balance between read and write performance.

4. **Monitoring and Maintenance**: Regularly monitor index usage and performance. Unused or rarely used indexes can be removed to reduce overhead. Additionally, consider rebuilding or reorganizing indexes periodically to maintain their efficiency.


You can read more about indexes in the [database index wikipedia page](https://en.wikipedia.org/wiki/Database_index).

#### [Recommended fields to index](https://www.better-auth.com/docs/guides/optimizing-for-performance\#recommended-fields-to-index)

| Table | Fields | Plugin |
| --- | --- | --- |
| users | `email` |  |
| accounts | `userId` |  |
| sessions | `userId`, `token` |  |
| verifications | `identifier` |  |
| invitations | `userId`, `organizationId` | organization |
| members | `userId`, `organizationId` | organization |
| organizations | `slug` | organization |
| passkey | `userId` | passkey |
| twoFactor | `secret` | twoFactor |

We intend to add indexing support in our schema generation tool in the future.

### [Using a connection pool](https://www.better-auth.com/docs/guides/optimizing-for-performance\#using-a-connection-pool)

A connection pool is a critical component for optimizing database interactions in Better Auth, particularly in high-traffic scenarios where multiple authentication requests occur simultaneously.

Here are some benefits of using a connection pool and some configuration options to consider:

1. **Benefits of Connection Pools**:
   - Reduced Latency: By reusing existing database connections, Better Auth can minimize the time spent establishing new connections, leading to faster authentication responses.
   - Efficient Resource Management: Connection pools help manage database connections, preventing resource exhaustion and ensuring that the database can handle multiple authentication requests concurrently.
   - Improved Scalability: Connection pools allow Better Auth to scale effectively, accommodating a growing number of users without a corresponding increase in database connection overhead.
2. **Configuration Options**:
   - Maximum Pool Size: Set this based on expected traffic. A higher limit allows more simultaneous connections but may strain the database if set too high.
   - Minimum Pool Size: Keep a baseline number of connections open to handle initial requests quickly.
   - Connection Timeout: Define how long to wait for a connection to become available before timing out, ensuring that users don’t experience long delays.
   - Idle Timeout: Specify how long a connection can remain idle before being closed, helping to manage resources effectively.
3. **Best Practices**:


Always close connections when they are no longer needed to return them to the pool, preventing connection leaks.
Monitor the performance of the connection pool and adjust configurations based on application load and usage patterns to optimize performance.

You can read more about connection pools in the [connection pool wikipedia page](https://en.wikipedia.org/wiki/Connection_pool).

[**Browser Extension Guide** \\
A step-by-step guide to creating a browser extension with Better Auth.](https://www.better-auth.com/docs/guides/browser-extension-guide) [**Options** \\
Better Auth configuration options reference.](https://www.better-auth.com/docs/reference/options)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Caching](https://www.better-auth.com/docs/guides/optimizing-for-performance#caching) [Cookie Cache](https://www.better-auth.com/docs/guides/optimizing-for-performance#cookie-cache) [Framework Caching](https://www.better-auth.com/docs/guides/optimizing-for-performance#framework-caching) [SSR Optimizations](https://www.better-auth.com/docs/guides/optimizing-for-performance#ssr-optimizations) [Database optimizations](https://www.better-auth.com/docs/guides/optimizing-for-performance#database-optimizations) [Using indexes](https://www.better-auth.com/docs/guides/optimizing-for-performance#using-indexes) [Recommended fields to index](https://www.better-auth.com/docs/guides/optimizing-for-performance#recommended-fields-to-index) [Using a connection pool](https://www.better-auth.com/docs/guides/optimizing-for-performance#using-a-connection-pool)Docs

On this page

# Expo Integration

Expo is a popular framework for building cross-platform apps with React Native. Better Auth supports both Expo native and web apps.

## [Installation](https://www.better-auth.com/docs/integrations/expo\#installation)

## [Configure A Better Auth Backend](https://www.better-auth.com/docs/integrations/expo\#configure-a-better-auth-backend)

Before using Better Auth with Expo, make sure you have a Better Auth backend set up. You can either use a separate server or leverage Expo's new [API Routes](https://docs.expo.dev/router/reference/api-routes) feature to host your Better Auth instance.

To get started, check out our [installation](https://www.better-auth.com/docs/installation) guide for setting up Better Auth on your server. If you prefer to check out the full example, you can find it [here](https://github.com/better-auth/better-auth/tree/main/examples/expo-example).

To use the new API routes feature in Expo to host your Better Auth instance you can create a new API route in your Expo app and mount the Better Auth handler.

app/api/auth/\[...auth\]+api.ts

```
import { auth } from "@/lib/auth"; // import Better Auth handler

const handler = auth.handler;
export { handler as GET, handler as POST }; // export handler for both GET and POST requests
```

## [Install Better Auth and Expo Plugin](https://www.better-auth.com/docs/integrations/expo\#install-better-auth-and-expo-plugin)

Install both the expo plugin in your server and both the Better Auth package and the Expo plugin in your Expo app.

npmpnpmyarnbun

```
npm install @better-auth/expo
```

npmpnpmyarnbun

```
npm install better-auth
```

## [Add the Expo Plugin on Your Server](https://www.better-auth.com/docs/integrations/expo\#add-the-expo-plugin-on-your-server)

Add the Expo plugin to your Better Auth server.

server.ts

```
import { betterAuth } from "better-auth";
import { expo } from "@better-auth/expo";

export const auth = betterAuth({
    plugins: [\
        expo()\
    ]
});
```

## [Initialize Better Auth Client](https://www.better-auth.com/docs/integrations/expo\#initialize-better-auth-client)

To initialize Better Auth in your Expo app, you need to call `createAuthClient` with the base url of your Better Auth backend. Make sure to import the client from `/react`.

You need to also import client plugin from `@better-auth/expo/client` and pass it to the `plugins` array when initializing the auth client.

This is important because:

- **Social Authentication Support:** enables social auth flows by handling authorization URLs and callbacks within the Expo web browser.
- **Secure Cookie Management:** stores cookies securely and automatically adds them to the headers of your auth requests.

src/auth-client.ts

```
import { createAuthClient } from "better-auth/react";
import { expoClient } from "@better-auth/expo/client";
import * as SecureStore from "expo-secure-store";

export const authClient = createAuthClient({
    baseURL: "http://localhost:8081", /* base url of your Better Auth backend. */
    plugins: [\
        expoClient({\
            scheme: "myapp",\
            storagePrefix: "myapp",\
            storage: SecureStore,\
        })\
    ]
});
```

Be sure to include the full URL, including the path, if you've changed the default path from `/api/auth`.

## [Scheme and Trusted Origins](https://www.better-auth.com/docs/integrations/expo\#scheme-and-trusted-origins)

Better Auth uses deep links to redirect users back to your app after authentication. To enable this, you need to add your app's scheme to the `trustedOrigins` list in your Better Auth config.

First, make sure you have a scheme defined in your `app.json` file.

app.json

```
{
    "expo": {
        "scheme": "myapp"
    }
}
```

Then, update your Better Auth config to include the scheme in the `trustedOrigins` list.

auth.ts

```
export const auth = betterAuth({
    trustedOrigins: ["myapp://"]
})
```

## [Configure Metro Bundler](https://www.better-auth.com/docs/integrations/expo\#configure-metro-bundler)

To resolve better auth exports you'll need to enable `unstable_enablePackageExports` in your metro config.

metro.config.js

```
const { getDefaultConfig } = require("expo/metro-config");

const config = getDefaultConfig(__dirname)

config.resolver.unstable_enablePackageExports = true;

module.exports = config;
```

If you can't enable `unstable_enablePackageExports` option, you can use [babel-plugin-module-resolver](https://github.com/tleunen/babel-plugin-module-resolver) to manually resolve the paths.

babel.config.js

```
module.exports = function (api) {
    return {
        plugins: [\
            [\
                "module-resolver",\
                {\
                    alias: {\
                        "better-auth/react": "path/to/node_modules/better-auth/dist/react.js"\
                        "@better-auth/expo/client": "path/to/node_modules/@better-auth/expo/dist/client.js",\
                    },\
                    extensions: [".js", ".jsx", ".ts", ".tsx"],\
                },\
            ],\
        ],
    }
}
```

Don't forget to clear the cache after making changes.

```
npx expo start --clear
```

## [Usage](https://www.better-auth.com/docs/integrations/expo\#usage)

### [Authenticating Users](https://www.better-auth.com/docs/integrations/expo\#authenticating-users)

With Better Auth initialized, you can now use the `authClient` to authenticate users in your Expo app.

sign-insign-up

app/sign-in.tsx

```
import { useState } from "react";
import { View, TextInput, Button } from "react-native";
import { authClient } from "./auth-client";

export default function App() {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");

    const handleLogin = async () => {
    await authClient.signIn.email({
            email,
            password,
    })
    };

    return (
        <View>
            <TextInput
                placeholder="Email"
                value={email}
                onChangeText={setEmail}
            />
            <TextInput
                placeholder="Password"
                value={password}
                onChangeText={setPassword}
            />
            <Button title="Login" onPress={handleLogin} />
        </View>
    );
}
```

For social sign-in, you can use the `authClient.signIn.social` method with the provider name and a callback URL.

app/social-sign-in.tsx

```

import { Button } from "react-native";

export default function App() {
    const handleLogin = async () => {
        await authClient.signIn.social({
            provider: "google",
            callbackURL: "/dashboard" // this will be converted to a deep link (eg. `myapp://dashboard`) on native
        })
    };
    return <Button title="Login with Google" onPress={handleLogin} />;
}
```

### [Session](https://www.better-auth.com/docs/integrations/expo\#session)

Better Auth provides a `useSession` hook to access the current user's session in your app.

src/App.tsx

```

import { authClient } from "@/lib/auth-client";

export default function App() {
    const { data: session } = authClient.useSession();

    return <Text>Welcome, {data.user.name}</Text>;
}
```

On native, the session data will be cached in SecureStore. This will allow you to remove the need for a loading spinner when the app is reloaded. You can disable this behavior by passing the `disableCache` option to the client.

### [Making Authenticated Requests to Your Server](https://www.better-auth.com/docs/integrations/expo\#making-authenticated-requests-to-your-server)

To make authenticated requests to your server that require the user's session, you have two options:

1. Use the fetch client provided by Better Auth.
2. Retrieve the session cookie from `SecureStore` and manually add it to your request headers.

* * *

#### [Option 1: Using the Fetch Client](https://www.better-auth.com/docs/integrations/expo\#option-1-using-the-fetch-client)

Better Auth provides a built-in fetch client powered by [Better Fetch](https://better-fetch.vercel.app/). This client automatically includes the session cookie in the headers of your requests.

```
import { authClient } from "@/lib/auth-client";

const $fetch = authClient.$fetch;

// Example usage
$fetch("/api/secure-endpoint", {
  method: "GET",
});
```

For more details, see the [Better Fetch documentation](https://better-fetch.vercel.app/docs).

#### [Option 2: Adding the Cookie to Request Headers](https://www.better-auth.com/docs/integrations/expo\#option-2-adding-the-cookie-to-request-headers)

If you prefer using your own fetch client, you can retrieve the session cookie stored in the device using `authClient.getCookie` and manually add it to your request headers.

```
import { authClient } from "@/lib/auth-client";

const makeAuthenticatedRequest = async () => {
  const cookies = authClient.getCookie();
  const headers = {
    "Cookie": cookies,
  };
  const response = await fetch("http://localhost:8081/api/secure-endpoint", { headers });
  const data = await response.json();
  return data;
};
```

**Example: Usage With TRPC**

lib/trpc-provider.tsx

```
//...other imports
import { authClient } from "@/lib/auth-client";

export const api = createTRPCReact<AppRouter>();

export function TRPCProvider(props: { children: React.ReactNode }) {
  const [queryClient] = useState(() => new QueryClient());
  const [trpcClient] = useState(() =>
    api.createClient({
      links: [\
        httpBatchLink({\
          //...your other options\
          headers() {\
            const headers = new Map<string, string>();\
            const cookies = authClient.getCookie();\
            if (cookies) {\
              headers.set("Cookie", cookies);\
            }\
            return Object.fromEntries(headers);\
          },\
        }),\
      ],
    }),
  );

  return (
    <api.Provider client={trpcClient} queryClient={queryClient}>
      <QueryClientProvider client={queryClient}>
        {props.children}
      </QueryClientProvider>
    </api.Provider>
  );
}
```

## [Options](https://www.better-auth.com/docs/integrations/expo\#options)

### [Expo Client](https://www.better-auth.com/docs/integrations/expo\#expo-client)

**storage**: the storage mechanism used to cache the session data and cookies.

src/auth-client.ts

```
import { createAuthClient } from "better-auth/react";
import SecureStorage from "expo-secure-store";

const authClient = createAuthClient({
    baseURL: "http://localhost:8081",
    storage: SecureStorage
});
```

**scheme**: scheme is used to deep link back to your app after a user has authenticated using oAuth providers. By default, Better Auth tries to read the scheme from the `app.json` file. If you need to override this, you can pass the scheme option to the client.

src/auth-client.ts

```
import { createAuthClient } from "better-auth/react";

const authClient = createAuthClient({
    baseURL: "http://localhost:8081",
    scheme: "myapp"
});
```

**disableCache**: By default, the client will cache the session data in SecureStore. You can disable this behavior by passing the `disableCache` option to the client.

src/auth-client.ts

```
import { createAuthClient } from "better-auth/react";

const authClient = createAuthClient({
    baseURL: "http://localhost:8081",
    disableCache: true
});
```

### [Expo Servers](https://www.better-auth.com/docs/integrations/expo\#expo-servers)

Server plugin options:

**overrideOrigin**: Override the origin for expo API routes (default: false). Enable this if you're facing cors origin issues with expo API routes.

[**Nitro Integration** \\
Integrate Better Auth with Nitro.](https://www.better-auth.com/docs/integrations/nitro) [**Two-Factor Authentication (2FA)** \\
Enhance your app's security with two-factor authentication.](https://www.better-auth.com/docs/plugins/2fa)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/integrations/expo#installation) [Configure A Better Auth Backend](https://www.better-auth.com/docs/integrations/expo#configure-a-better-auth-backend) [Install Better Auth and Expo Plugin](https://www.better-auth.com/docs/integrations/expo#install-better-auth-and-expo-plugin) [Add the Expo Plugin on Your Server](https://www.better-auth.com/docs/integrations/expo#add-the-expo-plugin-on-your-server) [Initialize Better Auth Client](https://www.better-auth.com/docs/integrations/expo#initialize-better-auth-client) [Scheme and Trusted Origins](https://www.better-auth.com/docs/integrations/expo#scheme-and-trusted-origins) [Configure Metro Bundler](https://www.better-auth.com/docs/integrations/expo#configure-metro-bundler) [Usage](https://www.better-auth.com/docs/integrations/expo#usage) [Authenticating Users](https://www.better-auth.com/docs/integrations/expo#authenticating-users) [Session](https://www.better-auth.com/docs/integrations/expo#session) [Making Authenticated Requests to Your Server](https://www.better-auth.com/docs/integrations/expo#making-authenticated-requests-to-your-server) [Option 1: Using the Fetch Client](https://www.better-auth.com/docs/integrations/expo#option-1-using-the-fetch-client) [Option 2: Adding the Cookie to Request Headers](https://www.better-auth.com/docs/integrations/expo#option-2-adding-the-cookie-to-request-headers) [Options](https://www.better-auth.com/docs/integrations/expo#options) [Expo Client](https://www.better-auth.com/docs/integrations/expo#expo-client) [Expo Servers](https://www.better-auth.com/docs/integrations/expo#expo-servers)Docs

On this page

# Options

List of all the available options for configuring Better Auth. See [Better Auth Options](https://github.com/better-auth/better-auth/blob/main/packages/better-auth/src/types/options.ts#L13).

| Prop | Type | Default |
| --- | --- | --- |
| `appName` | `string` | `"Better Auth"` |
| `baseURL` | `string` | - |
| `basePath` | `string` | `"/api/auth"` |
| `secret` | `string` | - |
| `database` | `PostgresPool | MysqlPool | Database | Dialect | AdapterInstance | { dialect: Dialect; type: KyselyDatabaseType; generateId?: false | ... 1 more ... | undefined; } | { ...; }` | - |
| `secondaryStorage` | `SecondaryStorage` | - |
| `emailVerification` | `{ sendVerificationEmail?: ((data: { user: { id: string; email: string; emailVerified: boolean; name: string; createdAt: Date; updatedAt: Date; image?: string | null | undefined; }; url: string; token: string; }, request?: Request | undefined) => Promise<...>) | undefined; sendOnSignUp?: boolean | undefined; autoSign...` | - |
| `emailAndPassword` | `{ enabled: boolean; requireEmailVerification?: boolean | undefined; maxPasswordLength?: number | undefined; minPasswordLength?: number | undefined; sendResetPassword?: ((data: { user: { ...; }; url: string; token: string; }, request?: Request | undefined) => Promise<...>) | undefined; resetPasswordTokenExpiresIn?: n...` | - |
| `socialProviders` | `Partial<Record<"apple" | "discord" | "facebook" | "github" | "microsoft" | "google" | "spotify" | "twitch" | "twitter" | "dropbox" | "linkedin" | "gitlab", Prettify<AppleOptions & { ...; }>>> | ... 10 more ... | Partial<...>` | - |
| `plugins` | `BetterAuthPlugin[]` | - |
| `user` | `{ modelName?: string | undefined; fields?: Partial<Record<"email" | "emailVerified" | "name" | "createdAt" | "updatedAt" | "image", string>> | undefined; additionalFields?: { ...; } | undefined; changeEmail?: { ...; } | undefined; }` | - |
| `session` | `{ modelName?: string | undefined; fields?: Partial<Record<"userId" | "expiresAt" | "ipAddress" | "userAgent", string>> | undefined; expiresIn?: number | undefined; updateAge?: number | undefined; additionalFields?: { ...; } | undefined; storeSessionInDatabase?: boolean | undefined; cookieCache?: { ...; } | undefined...` | - |
| `account` | `{ modelName?: string | undefined; fields?: Partial<Record<"userId" | "expiresAt" | "providerId" | "accountId" | "accessToken" | "refreshToken" | "idToken" | "password", string>> | undefined; accountLinking?: { ...; } | undefined; }` | - |
| `verification` | `{ modelName?: string | undefined; fields?: Partial<Record<"createdAt" | "expiresAt" | "value" | "identifier", string>> | undefined; }` | - |
| `trustedOrigins` | `string[]` | - |
| `rateLimit` | `{ enabled?: boolean | undefined; window?: number | undefined; max?: number | undefined; customRules?: { [key: string]: { window: number; max: number; }; } | undefined; storage?: "memory" | "database" | "secondary-storage" | undefined; modelName?: string | undefined; fields?: Record<...> | undefined; customStorage?: ...` | - |
| `advanced` | `{ ipAddress?: { ipAddressHeaders?: string[] | undefined; disableIpTracking?: boolean | undefined; } | undefined; useSecureCookies?: boolean | undefined; disableCSRFCheck?: boolean | undefined; crossSubDomainCookies?: { ...; } | undefined; cookies?: { ...; } | undefined; defaultCookieAttributes?: CookieOptions | unde...` | - |
| `logger` | `Logger` | - |
| `databaseHooks` | `{ user?: { create?: { before?: ((user: { id: string; email: string; emailVerified: boolean; name: string; createdAt: Date; updatedAt: Date; image?: string | null | undefined; }) => Promise<...>) | undefined; after?: ((user: { ...; }) => Promise<...>) | undefined; } | undefined; update?: { ...; } | undefined; } | und...` | - |
| `onAPIError` | `{ throw?: boolean | undefined; onError?: ((error: unknown, ctx: AuthContext) => void | Promise<void>) | undefined; }` | - |

[**Optimizing for Performance** \\
A guide to optimizing your Better Auth application for performance.](https://www.better-auth.com/docs/guides/optimizing-for-performance) [**Security** \\
Better Auth security features.](https://www.better-auth.com/docs/reference/security)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

No HeadingsDocs

On this pageUser table

# User & Accounts

Beyond authenticating users, Better Auth also provides a set of methods to manage users. This includes, updating user information, changing passwords, and more.

## [User table](https://www.better-auth.com/docs/concepts/users-accounts\#user-table)

The user table stores the user data. The user table has the following fields:

- `id`: The user id.
- `email`: The email of the user.
- `name`: The name of the user.
- `image`: The image of the user.
- `createdAt`: The creation date of the user.
- `updatedAt`: The last update date of the user.

The user table can be extended using [additional fields](https://www.better-auth.com/docs/concepts/database#extending-core-schema) or by plugins to store additional data.

## [Update User](https://www.better-auth.com/docs/concepts/users-accounts\#update-user)

### [Update User Information](https://www.better-auth.com/docs/concepts/users-accounts\#update-user-information)

To update user information, you can use the `updateUser` function provided by the client. The `updateUser` function takes an object with the following properties:

```
await authClient.updateUser({
    image: "https://example.com/image.jpg",
    name: "John Doe",
})
```

### [Change Email](https://www.better-auth.com/docs/concepts/users-accounts\#change-email)

To allow users to change their email, first enable the `changeEmail` feature, which is disabled by default. Set `changeEmail.enabled` to `true`:

```
export const auth = betterAuth({
    user: {
        changeEmail: {
            enabled: true,
        }
    }
})
```

For users with a verified email, provide the `sendChangeEmailVerification` function. This function triggers when a user changes their email, sending a verification email with a URL and token. If the current email isn't verified, the change happens immediately without verification.

```
export const auth = betterAuth({
    user: {
        changeEmail: {
            enabled: true,
            sendChangeEmailVerification: async ({ user, newEmail, url, token }, request) => {
                await sendEmail({
                    to: user.email, // verification email must be sent to the current user email to approve the change
                    subject: 'Approve email change',
                    text: `Click the link to approve the change: ${url}`
                })
            }
        }
    }
})
```

Once enabled, use the `changeEmail` function on the client to update a user’s email. The user must verify their current email before changing it.

```
await authClient.changeEmail({
    newEmail: "new-email@email.com",
    callbackURL: "/dashboard", //to redirect after verification
});
```

After verification, the new email is updated in the user table, and a confirmation is sent to the new address.

If the current email is unverified, the new email is updated without the verification step.

### [Change Password](https://www.better-auth.com/docs/concepts/users-accounts\#change-password)

Password of a user isn't stored in the user table. Instead, it's stored in the account table. To change the password of a user, you can use the `changePassword` function provided by the client. The `changePassword` function takes an object with the following properties:

```
await authClient.changePassword({
    newPassword: "newPassword123",
    currentPassword: "oldPassword123",
    revokeOtherSessions: true, // revoke all other sessions the user is signed into
});
```

### [Set Password](https://www.better-auth.com/docs/concepts/users-accounts\#set-password)

If a user was registered using OAuth or other providers, they won't have a password or a credential account. In this case, you can use the `setPassword` action to set a password for the user. For security reasons, this function can only be called from the server. We recommend having users go through a 'forgot password' flow to set a password for their account.

```
await auth.api.setPassword({
    body: { newPassword: "password" },
    headers: //
});
```

## [Delete User](https://www.better-auth.com/docs/concepts/users-accounts\#delete-user)

Better Auth provides a utility to hard delete a user from your database. It's disabled by default, but you can enable it easily by passing `enabled:true`

```
export const auth = betterAuth({
    //...other config
    user: {
        deleteUser: {
            enabled: true
        }
    }
})
```

Once enabled, you can call `authClient.deleteUser` to permanently delete user data from your database.

### [Adding Verification Before Deletion](https://www.better-auth.com/docs/concepts/users-accounts\#adding-verification-before-deletion)

For added security, you’ll likely want to confirm the user’s intent before deleting their account. A common approach is to send a verification email. Better Auth provides a `sendDeleteAccountVerification` utility for this purpose.

Here’s how you can set it up:

```
export const auth = betterAuth({
    user: {
        deleteUser: {
            enabled: true,
            sendDeleteAccountVerification: async (
                {
                    user,   // The user object
                    url, // The auto-generated URL for deletion
                    token  // The verification token  (can be used to generate custom URL)
                },
                request  // The original request object (optional)
            ) => {
                // Your email sending logic here
                // Example: sendEmail(data.user.email, "Verify Deletion", data.url);
            },
        },
    },
});
```

**How callback verification works:**

- **Callback URL**: The url provided in `sendDeleteAccountVerification` is a pre-generated link that deletes the user data when accessed.

delete-user.ts

```
await authClient.deleteUser({
    callbackURL: "/goodbye" // you can provide a callback URL to redirect after deletion
});
```

- **Authentication Check**: The user must be signed in to the account they’re attempting to delete.
If they aren’t signed in, the deletion process will fail.

If you have sent a custom URL, you can use the `deleteUser` method with the token to delete the user.

delete-user.ts

```
await authClient.deleteUser({
    token
});
```

### [Authentication Requirements](https://www.better-auth.com/docs/concepts/users-accounts\#authentication-requirements)

To delete a user, the user must meet one of the following requirements:

1. A valid password

if the user has a password, they can delete their account by providing the password.

delete-user.ts

```
await authClient.deleteUser({
    password: "password"
});
```

2. Fresh session

The user must have a `fresh` session token, meaning the user must have signed in recently. This is checked if the password is not provided.

By default `session.freshAge` is set to `60 * 60 * 24` (1 day). You can change this value by passing the `session` object to the `auth` configuration. If it is set to `0`, the freshness check is disabled.

delete-user.ts

```
await authClient.deleteUser();
```

3. The user must provide a token generated by the `sendDeleteAccountVerification` callback.

delete-user.ts

```
await authClient.deleteUser({
    token
});
```

### [Callbacks](https://www.better-auth.com/docs/concepts/users-accounts\#callbacks)

**beforeDelete**: This callback is called before the user is deleted. You can use this callback to perform any cleanup or additional checks before deleting the user.

auth.ts

```
export const auth = betterAuth({
    user: {
        deleteUser: {
            enabled: true,
            beforeDelete: async (user) => {
                // Perform any cleanup or additional checks here
            },
        },
    },
});
```

you can also throw `APIError` to interrupt the deletion process.

auth.ts

```
import { betterAuth } from "better-auth";
import { APIError } from "better-auth/api";

export const auth = betterAuth({
    user: {
        deleteUser: {
            enabled: true,
            beforeDelete: async (user, request) => {
                if (user.email.includes("admin")) {
                    throw new APIError("BAD_REQUEST", {
                        message: "Admin accounts can't be deleted",
                    });
                }
            },
        },
    },
});
```

**afterDelete**: This callback is called after the user is deleted. You can use this callback to perform any cleanup or additional actions after the user is deleted.

auth.ts

```
export const auth = betterAuth({
    user: {
        deleteUser: {
            enabled: true,
            afterDelete: async (user, request) => {
                // Perform any cleanup or additional actions here
            },
        },
    },
});
```

## [Accounts](https://www.better-auth.com/docs/concepts/users-accounts\#accounts)

Better Auth supports multiple authentication methods. Each authentication method is called a provider. For example, email and password authentication is a provider, Google authentication is a provider, etc.

When a user signs in using a provider, an account is created for the user. The account stores the authentication data returned by the provider. This data includes the access token, refresh token, and other information returned by the provider.

### [Account table](https://www.better-auth.com/docs/concepts/users-accounts\#account-table)

The account table stores the authentication data of the user. The account table has the following fields:

- `id`: The unique identifier of the account.
- `userId`: The id of the user.
- `accountId`: The id of the account provided by the OAuth provider. (optional)
- `providerId`: The id of the provider. (optional)
- `accessToken`: The access token of the account. Returned by the provider. (optional)
- `refreshToken`: The refresh token of the account. Returned by the provider. (optional)
- `expiresAt`: The time when the access token expires. (optional)
- `password`: The password of the account. Mainly used for email and password authentication. (optional)

### [List User Accounts](https://www.better-auth.com/docs/concepts/users-accounts\#list-user-accounts)

To list user accounts you can use `client.user.listAccounts` method. Which will return all accounts associated with a user.

```
const accounts = await authClient.listAccounts();
```

### [Account Linking](https://www.better-auth.com/docs/concepts/users-accounts\#account-linking)

Account linking enables users to associate multiple authentication methods with a single account. With Better Auth, users can connect additional social sign-ons or OAuth providers to their existing accounts if the provider confirms the user's email as verified.

If account linking is disabled, no accounts can be linked, regardless of the provider or email verification status.

auth.ts

```
const auth = new BetterAuth({
    account: {
        accountLinking: {
            enabled: true,
        }
    },
});
```

#### [Forced Linking](https://www.better-auth.com/docs/concepts/users-accounts\#forced-linking)

You can specify a list of "trusted providers." When a user logs in using a trusted provider, their account will be automatically linked even if the provider doesn’t confirm the email verification status. Use this with caution as it may increase the risk of account takeover.

auth.ts

```
const auth = new BetterAuth({
    account: {
        accountLinking: {
            enabled: true,
            trustedProviders: ["google", "github"]
        }
    },
});
```

#### [Manually Linking Accounts](https://www.better-auth.com/docs/concepts/users-accounts\#manually-linking-accounts)

Users already signed in can manually link their account to additional social providers or credential-based accounts.

- **Linking Social Accounts:** Use the `user.linkSocial` method on the client to link a social provider to the user's account.








```
await authClient.linkSocial({
      provider: "google", // Provider to link
      callbackURL: "/callback" // Callback URL after linking completes
});
```








If you want your users to be able to link a social account with a different email address than the user, or if you want to use a provider that does not return email addresses, you will need to enable this in the account linking settings.






auth.ts









```
const auth = betterAuth({
      account: {
          accountLinking: {
              allowDifferentEmails: true
          }
      },
});
```

- **Linking Credential-Based Accounts:** To link a credential-based account (e.g., email and password), users can initiate a "forgot password" flow, or you can call the `setPassword` method on the server.








```
await auth.api.setPassword({
      headers: /* headers containing the user's session token */,
      password: /* new password */
});
```


`setPassword` can't be called from the client for security reasons.

### [Account Unlinking](https://www.better-auth.com/docs/concepts/users-accounts\#account-unlinking)

You can unlink a user account by providing a `providerId`.

```
await authClient.unlinkAccount({
    providerId: "google"
});
```

If the `providerId` doesn't exist, it will throw an error. Additionally, if the user only has one account, the unlinking process will fail to prevent account lockout.

[**TypeScript** \\
Better Auth TypeScript integration.](https://www.better-auth.com/docs/concepts/typescript) [**Email & Password** \\
Implementing email and password authentication with Better Auth.](https://www.better-auth.com/docs/authentication/email-password)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[User table](https://www.better-auth.com/docs/concepts/users-accounts#user-table) [Update User](https://www.better-auth.com/docs/concepts/users-accounts#update-user) [Update User Information](https://www.better-auth.com/docs/concepts/users-accounts#update-user-information) [Change Email](https://www.better-auth.com/docs/concepts/users-accounts#change-email) [Change Password](https://www.better-auth.com/docs/concepts/users-accounts#change-password) [Set Password](https://www.better-auth.com/docs/concepts/users-accounts#set-password) [Delete User](https://www.better-auth.com/docs/concepts/users-accounts#delete-user) [Adding Verification Before Deletion](https://www.better-auth.com/docs/concepts/users-accounts#adding-verification-before-deletion) [Authentication Requirements](https://www.better-auth.com/docs/concepts/users-accounts#authentication-requirements) [Callbacks](https://www.better-auth.com/docs/concepts/users-accounts#callbacks) [Accounts](https://www.better-auth.com/docs/concepts/users-accounts#accounts) [Account table](https://www.better-auth.com/docs/concepts/users-accounts#account-table) [List User Accounts](https://www.better-auth.com/docs/concepts/users-accounts#list-user-accounts) [Account Linking](https://www.better-auth.com/docs/concepts/users-accounts#account-linking) [Forced Linking](https://www.better-auth.com/docs/concepts/users-accounts#forced-linking) [Manually Linking Accounts](https://www.better-auth.com/docs/concepts/users-accounts#manually-linking-accounts) [Account Unlinking](https://www.better-auth.com/docs/concepts/users-accounts#account-unlinking)Docs

On this pageCreate auth instance

# Remix Integration

Better Auth can be easily integrated with Remix. This guide will show you how to integrate Better Auth with Remix.

You can follow the steps from [installation](https://www.better-auth.com/docs/installation) to get started or you can follow this guide to make it the Remix-way.

If you have followed the installation steps, you can skip the first step.

## [Create auth instance](https://www.better-auth.com/docs/integrations/remix\#create-auth-instance)

Create a file named `auth.server.ts` in one of these locations:

- Project root
- `lib/` folder
- `utils/` folder

You can also nest any of these folders under `app/` folder. (e.g. `app/lib/auth.server.ts`)

And in this file, import Better Auth and create your instance.

Make sure to export the auth instance with the variable name `auth` or as a `default` export.

app/lib/auth.server.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    database: {
        provider: "postgres", //change this to your database provider
        url: process.env.DATABASE_URL, // path to your database or connection string
    }
})
```

## [Create API Route](https://www.better-auth.com/docs/integrations/remix\#create-api-route)

We need to mount the handler to a API route. Create a resource route file `api.auth.$.ts` inside `app/routes/` directory. And add the following code:

app/routes/api.auth.$.ts

```
import { auth } from '~/lib/auth.server' // Adjust the path as necessary
import type { LoaderFunctionArgs, ActionFunctionArgs } from "@remix-run/node"

export async function loader({ request }: LoaderFunctionArgs) {
    return auth.handler(request)
}

export async function action({ request }: ActionFunctionArgs) {
    return auth.handler(request)
}
```

You can change the path on your better-auth configuration but it's recommended to keep it as `routes/api.auth.$.ts`

## [Create a client](https://www.better-auth.com/docs/integrations/remix\#create-a-client)

Create a client instance. Here we are creating `auth.client.ts` file inside the `lib/` directory.

app/lib/auth.client.ts

```
import { createAuthClient } from "better-auth/react" // make sure to import from better-auth/react

export const authClient = createAuthClient({
    //you can pass client configuration here
})
```

Once you have created the client, you can use it to sign up, sign in, and perform other actions.

### [Example usage](https://www.better-auth.com/docs/integrations/remix\#example-usage)

#### [Sign Up](https://www.better-auth.com/docs/integrations/remix\#sign-up)

app/routes/signup.tsx

```
import { Form } from "@remix-run/react"
import { useState } from "react"
import { authClient } from "~/lib/auth.client"

export default function SignUp() {
  const [email, setEmail] = useState("")
  const [name, setName] = useState("")
  const [password, setPassword] = useState("")

  const signUp = async () => {
    await authClient.signUp.email(
      {
        email,
        password,
        name,
      },
      {
        onRequest: (ctx) => {
          // show loading state
        },
        onSuccess: (ctx) => {
          // redirect to home
        },
        onError: (ctx) => {
          alert(ctx.error)
        },
      },
    )
  }

  return (
    <div>
      <h2>
        Sign Up
      </h2>
      <Form
        onSubmit={signUp}
      >
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Name"
        />
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Email"
        />
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          placeholder="Password"
        />
        <button
          type="submit"
        >
          Sign Up
        </button>
      </Form>
    </div>
  )
}
```

#### [Sign In](https://www.better-auth.com/docs/integrations/remix\#sign-in)

app/routes/signin.tsx

```
import { Form } from "@remix-run/react"
import { useState } from "react"
import { authClient } from "~/services/auth.client"

export default function SignIn() {
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")

  const signIn = async () => {
    await authClient.signIn.email(
      {
        email,
        password,
      },
      {
        onRequest: (ctx) => {
          // show loading state
        },
        onSuccess: (ctx) => {
          // redirect to home
        },
        onError: (ctx) => {
          alert(ctx.error)
        },
      },
    )
  }

  return (
    <div>
      <h2>
        Sign In
      </h2>
      <Form onSubmit={signIn}>
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button
          type="submit"
        >
          Sign In
        </button>
      </Form>
    </div>
  )
}
```

[**Astro Integration** \\
Integrate Better Auth with Astro.](https://www.better-auth.com/docs/integrations/astro) [**Next.js integration** \\
Integrate Better Auth with Next.js.](https://www.better-auth.com/docs/integrations/next)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Create auth instance](https://www.better-auth.com/docs/integrations/remix#create-auth-instance) [Create API Route](https://www.better-auth.com/docs/integrations/remix#create-api-route) [Create a client](https://www.better-auth.com/docs/integrations/remix#create-a-client) [Example usage](https://www.better-auth.com/docs/integrations/remix#example-usage) [Sign Up](https://www.better-auth.com/docs/integrations/remix#sign-up) [Sign In](https://www.better-auth.com/docs/integrations/remix#sign-in)# 500

## Internal Server Error.Docs

On this pageInstallation

# Anonymous

The Anonymous plugin allows users to have an authenticated experience without requiring them to provide an email address, password, OAuth provider, or any other Personally Identifiable Information (PII). Users can later link an authentication method to their account when ready.

## [Installation](https://www.better-auth.com/docs/plugins/anonymous\#installation)

### [Add the plugin to your auth config](https://www.better-auth.com/docs/plugins/anonymous\#add-the-plugin-to-your-auth-config)

To enable anonymous authentication, add the anonymous plugin to your authentication configuration.

auth.ts

```
import { betterAuth } from "better-auth"
import { anonymous } from "better-auth/plugins"

export const auth = betterAuth({
    // ... other config options
    plugins: [\
        anonymous()\
    ]
})
```

### [Migrate the database](https://www.better-auth.com/docs/plugins/anonymous\#migrate-the-database)

Run the migration or generate the schema to add the necessary fields and tables to the database.

migrategenerate

```
npx @better-auth/cli migrate
```

See the [Schema](https://www.better-auth.com/docs/plugins/anonymous#schema) section to add the fields manually.

### [Add the client plugin](https://www.better-auth.com/docs/plugins/anonymous\#add-the-client-plugin)

Next, include the anonymous client plugin in your authentication client instance.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
import { anonymousClient } from "better-auth/client/plugins"

const authClient =  createAuthClient({
    plugins: [\
        anonymousClient()\
    ]
})
```

## [Usage](https://www.better-auth.com/docs/plugins/anonymous\#usage)

### [Sign In](https://www.better-auth.com/docs/plugins/anonymous\#sign-in)

To sign in a user anonymously, use the `signIn.anonymous()` method.

example.ts

```
const user = await authClient.signIn.anonymous()
```

### [Link Account](https://www.better-auth.com/docs/plugins/anonymous\#link-account)

If a user is already signed in anonymously and tries to `signIn` or `signUp` with another method, their anonymous activities can linked to the new account.

To do that you first need to provide `onLinkAccount` callback to the plugin.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    plugins: [\
        anonymous({\
            onLinkAccount: async ({ anonymousUser, newUser }) => {\
               // perform actions like moving the cart items from anonymous user to the new user\
            }\
        })\
    ]
```

Then when you call `signIn` or `signUp` with another method, the `onLinkAccount` callback will be called. And the `anonymousUser` will be deleted by default.

example.ts

```
const user = await authClient.signIn.email({
    email,
})
```

## [Options](https://www.better-auth.com/docs/plugins/anonymous\#options)

- `emailDomainName`: The domain name to use when generating an email address for anonymous users. Defaults to the domain name of the current site.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    plugins: [\
        anonymous({\
            emailDomainName: "example.com"\
        })\
    ]
})
```

- `onLinkAccount`: A callback function that is called when an anonymous user links their account to a new authentication method. The callback receives an object with the `anonymousUser` and the `newUser`.

- `disableDeleteAnonymousUser`: By default, the anonymous user is deleted when the account is linked to a new authentication method. Set this option to `true` to disable this behavior.


## [Schema](https://www.better-auth.com/docs/plugins/anonymous\#schema)

The anonymous plugin requires an additional field in the user table:

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| isAnonymous | boolean | ? | Indicates whether the user is anonymous. |

[**Username** \\
Username plugin](https://www.better-auth.com/docs/plugins/username) [**Phone Number** \\
Phone number plugin](https://www.better-auth.com/docs/plugins/phone-number)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/anonymous#installation) [Add the plugin to your auth config](https://www.better-auth.com/docs/plugins/anonymous#add-the-plugin-to-your-auth-config) [Migrate the database](https://www.better-auth.com/docs/plugins/anonymous#migrate-the-database) [Add the client plugin](https://www.better-auth.com/docs/plugins/anonymous#add-the-client-plugin) [Usage](https://www.better-auth.com/docs/plugins/anonymous#usage) [Sign In](https://www.better-auth.com/docs/plugins/anonymous#sign-in) [Link Account](https://www.better-auth.com/docs/plugins/anonymous#link-account) [Options](https://www.better-auth.com/docs/plugins/anonymous#options) [Schema](https://www.better-auth.com/docs/plugins/anonymous#schema)Docs

On this pageInstallation

# Open API

This is a plugin that provides an Open API reference for Better Auth. It shows all endpoints added by plugins and the core. It also provides a way to test the endpoints. It uses [Scalar](https://scalar.com/) to display the Open API reference.

This plugin is still in the early stages of development. We are working on adding more features to it and filling in the gaps.

## [Installation](https://www.better-auth.com/docs/plugins/open-api\#installation)

### [Add the plugin to your **auth** config](https://www.better-auth.com/docs/plugins/open-api\#add-the-plugin-to-your-auth-config)

auth.ts

```
import { betterAuth } from "better-auth"
import { openAPI } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [\
        openAPI(),\
    ]
})
```

### [Navigate to `/api/auth/reference` to view the Open API reference](https://www.better-auth.com/docs/plugins/open-api\#navigate-to-apiauthreference-to-view-the-open-api-reference)

Each plugin endpoints are grouped by the plugin name. The core endpoints are grouped under the `Default` group. And Model schemas are grouped under the `Models` group.

![Open API reference](https://www.better-auth.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fopen-api-reference.fd15e5db.png&w=3840&q=75)

## [Usage](https://www.better-auth.com/docs/plugins/open-api\#usage)

The Open API reference is generated using the [OpenAPI 3.0](https://swagger.io/specification/) specification. You can use the reference to generate client libraries, documentation, and more.

The reference is generated using the [Scalar](https://scalar.com/) library. Scalar provides a way to view and test the endpoints. You can test the endpoints by clicking on the `Try it out` button and providing the required parameters.

![Open API reference](https://www.better-auth.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fopen-api-reference.fd15e5db.png&w=3840&q=75)

### [Generated Schema](https://www.better-auth.com/docs/plugins/open-api\#generated-schema)

To get the generated Open API schema directly as JSON, you can do `auth.api.generateOpenAPISchema()`. This will return the Open API schema as a JSON object.

```
import { auth } from "~/lib/auth"

const openAPISchema = await auth.api.generateOpenAPISchema()
console.log(openAPISchema)
```

## [Configuration](https://www.better-auth.com/docs/plugins/open-api\#configuration)

`path` \- The path where the Open API reference is served. Default is `/api/auth/reference`. You can change it to any path you like, but keep in mind that it will be appended to the base path of your auth server.

`disableDefaultReference` \- If set to `true`, the default Open API reference UI by Scalar will be disabled. Default is `false`.

[**OAuth Proxy** \\
OAuth Proxy plugin for Better Auth](https://www.better-auth.com/docs/plugins/oauth-proxy) [**JWT** \\
Authenticate users with JWT tokens in services that can't use the session](https://www.better-auth.com/docs/plugins/jwt)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/open-api#installation) [Add the plugin to your **auth** config](https://www.better-auth.com/docs/plugins/open-api#add-the-plugin-to-your-auth-config) [Navigate to `/api/auth/reference` to view the Open API reference](https://www.better-auth.com/docs/plugins/open-api#navigate-to-apiauthreference-to-view-the-open-api-reference) [Usage](https://www.better-auth.com/docs/plugins/open-api#usage) [Generated Schema](https://www.better-auth.com/docs/plugins/open-api#generated-schema) [Configuration](https://www.better-auth.com/docs/plugins/open-api#configuration)Docs

On this pageMount the handler

# SolidStart Integration

Before you start, make sure you have a Better Auth instance configured. If you haven't done that yet, check out the [installation](https://www.better-auth.com/docs/installation).

### [Mount the handler](https://www.better-auth.com/docs/integrations/solid-start\#mount-the-handler)

We need to mount the handler to SolidStart server. Put the following code in your `*auth.ts` file inside `/routes/api/auth` folder.

\*auth.ts

```
import { auth } from "~/lib/auth";
import { toSolidStartHandler } from "better-auth/solid-start";

export const { GET, POST } = toSolidStartHandler(auth);
```

[**SvelteKit Integration** \\
Integrate Better Auth with SvelteKit.](https://www.better-auth.com/docs/integrations/svelte-kit) [**TanStack Start Integration** \\
Integrate Better Auth with TanStack Start.](https://www.better-auth.com/docs/integrations/tanstack)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Mount the handler](https://www.better-auth.com/docs/integrations/solid-start#mount-the-handler)# 404

## This page could not be found.Docs

On this pageGet your Reddit Credentials

# Reddit

### [Get your Reddit Credentials](https://www.better-auth.com/docs/authentication/reddit\#get-your-reddit-credentials)

To use Reddit sign in, you need a client ID and client secret. You can get them from the [Reddit Developer Portal](https://www.reddit.com/prefs/apps).

1. Click "Create App" or "Create Another App"
2. Select "web app" as the application type
3. Set the redirect URL to `http://localhost:3000/api/auth/callback/reddit` for local development
4. For production, set it to your application's domain (e.g. `https://example.com/api/auth/callback/reddit`)
5. After creating the app, you'll get the client ID (under the app name) and client secret

If you change the base path of the auth routes, make sure to update the redirect URL accordingly.

### [Configure the provider](https://www.better-auth.com/docs/authentication/reddit\#configure-the-provider)

To configure the provider, you need to import the provider and pass it to the `socialProviders` option of the auth instance.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        reddit: {
            clientId: process.env.REDDIT_CLIENT_ID as string,
            clientSecret: process.env.REDDIT_CLIENT_SECRET as string,
        },
    },
})
```

### [Sign In with Reddit](https://www.better-auth.com/docs/authentication/reddit\#sign-in-with-reddit)

To sign in with Reddit, you can use the `signIn.social` function provided by the client. The `signIn` function takes an object with the following properties:

- `provider`: The provider to use. It should be set to `reddit`.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
const authClient = createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "reddit"
    })
}
```

## [Additional Configuration](https://www.better-auth.com/docs/authentication/reddit\#additional-configuration)

### [Scopes](https://www.better-auth.com/docs/authentication/reddit\#scopes)

By default, Reddit provides basic user information. If you need additional permissions, you can specify scopes in your auth configuration:

auth.ts

```
export const auth = betterAuth({
    socialProviders: {
        reddit: {
            clientId: process.env.REDDIT_CLIENT_ID as string,
            clientSecret: process.env.REDDIT_CLIENT_SECRET as string,
            duration: "permanent",
            scopes: ["identity", "read", "submit"] // Add required scopes
        },
    },
})
```

Common Reddit scopes include:

- `identity`: Access basic account information
- `read`: Access posts and comments
- `submit`: Submit posts and comments
- `subscribe`: Manage subreddit subscriptions
- `history`: Access voting history

For a complete list of available scopes, refer to the [Reddit OAuth2 documentation](https://www.reddit.com/dev/api/oauth).

[**GitLab** \\
GitLab provider setup and usage.](https://www.better-auth.com/docs/authentication/gitlab) [**Spotify** \\
Spotify provider setup and usage.](https://www.better-auth.com/docs/authentication/spotify)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Get your Reddit Credentials](https://www.better-auth.com/docs/authentication/reddit#get-your-reddit-credentials) [Configure the provider](https://www.better-auth.com/docs/authentication/reddit#configure-the-provider) [Sign In with Reddit](https://www.better-auth.com/docs/authentication/reddit#sign-in-with-reddit) [Additional Configuration](https://www.better-auth.com/docs/authentication/reddit#additional-configuration) [Scopes](https://www.better-auth.com/docs/authentication/reddit#scopes)Docs

On this pagePlan your idea

# Create your first plugin

In this guide, we’ll walk you through the steps of creating your first Better Auth plugin.

This guide assumes you have [setup the basics](https://www.better-auth.com/docs/installation) of Better Auth and are ready to create your first plugin.

## [Plan your idea](https://www.better-auth.com/docs/guides/your-first-plugin\#plan-your-idea)

Before beginning, you must know what plugin you intend to create.

In this guide, we’ll create a **birthday plugin** to keep track of user birth dates.

## [Server plugin first](https://www.better-auth.com/docs/guides/your-first-plugin\#server-plugin-first)

Better Auth plugins operate as a pair: a [server plugin](https://www.better-auth.com/docs/concepts/plugins#create-a-server-plugin) and a [client plugin](https://www.better-auth.com/docs/concepts/plugins#create-a-client-plugin).
The server plugin forms the foundation of your authentication system, while the client plugin provides convenient frontend APIs to interact with your server implementation.

You can read more about server/client plugins in our [documentation](https://www.better-auth.com/docs/concepts/plugins#creating-a-plugin).

### [Creating the server plugin](https://www.better-auth.com/docs/guides/your-first-plugin\#creating-the-server-plugin)

Go ahead and find a suitable location create an your birthday plugin folder, with an `index.ts` file within.

birthday-plugin

index.ts

In the `index.ts` file, we’ll export a function that represents our server plugin.
This will be what we will later add to our plugin list in the `auth.ts` file.

index.ts

```
import { createAuthClient } from "better-auth/client";
import type { BetterAuthPlugin } from "better-auth";

export const birthdayPlugin = () =>
  ({
    id: "birthdayPlugin",
  } satisfies BetterAuthPlugin);
```

Although this does nothing, you have technically just made yourself your first plugin, congratulations! 🎉

### [Defining a schema](https://www.better-auth.com/docs/guides/your-first-plugin\#defining-a-schema)

In order to save each user’s birthday data, we must create a schema on top of the `user` model.

By creating a schema here, this also allows [Better Auth’s CLI](https://www.better-auth.com/docs/concepts/cli) to generate the schemas required to update your database.

You can learn more about [plugin schemas here](https://www.better-auth.com/docs/concepts/plugins#schema).

index.ts

```
//...
export const birthdayPlugin = () =>
  ({
    id: "birthdayPlugin",
    schema: {
      user: {
        fields: {
          birthday: {
            type: "date", // string, number, boolean, date
            required: true, // if the field should be required on a new record. (default: false)
            unique: false, // if the field should be unique. (default: false)
            reference: null // if the field is a reference to another table. (default: null)
          },
        },
      },
    },
  } satisfies BetterAuthPlugin);
```

### [Authorization logic](https://www.better-auth.com/docs/guides/your-first-plugin\#authorization-logic)

For this example guide, we’ll setup authentication logic to check and ensure that the user who signs-up is older than 5.
But the same concept could be applied for something like verifying users agreeing to the TOS or anything alike.

To do this, we’ll utilize [Hooks](https://www.better-auth.com/docs/concepts/plugins#hooks), which allows us to run code `before` or `after` an action is performed.

index.ts

```
export const birthdayPlugin = () => ({
    //...
    // In our case, we want to write authorization logic,
    // meaning we want to intercept it `before` hand.
    hooks: {
      before: [\
        {\
          matcher: (context) => /* ... */,\
          handler: createAuthMiddleware(async (ctx) => {\
            //...\
          }),\
        },\
      ],
    },
} satisfies BetterAuthPlugin)
```

In our case we want to match any requests going to the signup path:

Before hook

```
{
  matcher: (context) => context.path.startsWith("/sign-up/email"),
  //...
}
```

And for our logic, we’ll write the following code to check the if user’s birthday makes them above 5 years old.

Imports

```
import { APIError } from "better-auth/api";
import { createAuthMiddleware } from "better-auth/plugins";
```

Before hook

```
{
  //...
  handler: createAuthMiddleware(async (ctx) => {
    const { birthday } = ctx.body;
    if(!birthday instanceof Date) {
      throw new APIError("BAD_REQUEST", { message: "Birthday must be of type Date." });
    }

    const today = new Date();
    const fiveYearsAgo = new Date(today.setFullYear(today.getFullYear() - 5));

    if(birthday >= fiveYearsAgo) {
      throw new APIError("BAD_REQUEST", { message: "User must be above 5 years old." });
    }

    return { context: ctx };
  }),
}
```

**Authorized!** 🔒

We’ve now successfully written code to ensure authorization for users above 5!

## [Client Plugin](https://www.better-auth.com/docs/guides/your-first-plugin\#client-plugin)

We’re close to the finish line! 🏁

Now that we have created our server plugin, the next step is to develop our client plugin.
Since there isn’t much frontend APIs going on for this plugin, there isn’t much to do!

First, let’s create our `client.ts` file first:

birthday-plugin

index.ts

client.ts

Then, add the following code:

client.ts

```
import { BetterAuthClientPlugin } from "better-auth";
import type { birthdayPlugin } from "./index"; // make sure to import the server plugin as a type

type BirthdayPlugin = typeof birthdayPlugin;

export const birthdayClientPlugin = () => {
  return {
    id: "birthdayPlugin",
    $InferServerPlugin: {} as ReturnType<BirthdayPlugin>,
  } satisfies BetterAuthClientPlugin;
};
```

What we’ve done is allow the client plugin to infer the types defined by our schema from the server plugin.

And that’s it! This is all it takes for the birthday client plugin. 🎂

## [Initiate your plugin!](https://www.better-auth.com/docs/guides/your-first-plugin\#initiate-your-plugin)

Both the `client` and `server` plugins are now ready, the last step is to import them to both your `auth-client.ts` and your `server.ts` files respectively to initiate the plugin.

### [Server initiation](https://www.better-auth.com/docs/guides/your-first-plugin\#server-initiation)

server.ts

```
import { betterAuth } from "better-auth";
import { birthdayPlugin } from "./birthday-plugin";

export const auth = betterAuth({
    plugins: [\
      birthdayPlugin(),\
    ]
});
```

### [Client initiation](https://www.better-auth.com/docs/guides/your-first-plugin\#client-initiation)

auth-client.ts

```
import { createAuthClient } from "better-auth/client";
import { birthdayClientPlugin } from "./birthday-plugin/client";

const authClient = createAuthClient({
    plugins: [\
      birthdayClientPlugin()\
    ]
});
```

### [Oh yeah, the schemas!](https://www.better-auth.com/docs/guides/your-first-plugin\#oh-yeah-the-schemas)

Don’t forget to add your `birthday` field to your `user` table model!

Or, use the `generate` [CLI command](https://www.better-auth.com/docs/concepts/cli#generate):

```
npx @better-auth/cli@latest generate
```

## [Wrapping Up](https://www.better-auth.com/docs/guides/your-first-plugin\#wrapping-up)

Congratulations! You’ve successfully created your first ever Better Auth plugin.
We highly recommend you visit our [plugins documentation](https://www.better-auth.com/docs/concepts/plugins) to learn more information.

If you have a plugin you’d like to share with the community, feel free to let us know through
our [Discord server](https://discord.gg/6jHcdYMzyq),
or through a [pull-request](https://github.com/better-auth/better-auth/pulls)
and we may add it to the [community-plugins](https://www.better-auth.com/docs/plugins/community-plugins) list!

[**Migrating from NextAuth.js to Better Auth** \\
A step-by-step guide to transitioning from NextAuth.js to Better Auth.](https://www.better-auth.com/docs/guides/next-auth-migration-guide) [**Browser Extension Guide** \\
A step-by-step guide to creating a browser extension with Better Auth.](https://www.better-auth.com/docs/guides/browser-extension-guide)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Plan your idea](https://www.better-auth.com/docs/guides/your-first-plugin#plan-your-idea) [Server plugin first](https://www.better-auth.com/docs/guides/your-first-plugin#server-plugin-first) [Creating the server plugin](https://www.better-auth.com/docs/guides/your-first-plugin#creating-the-server-plugin) [Defining a schema](https://www.better-auth.com/docs/guides/your-first-plugin#defining-a-schema) [Authorization logic](https://www.better-auth.com/docs/guides/your-first-plugin#authorization-logic) [Client Plugin](https://www.better-auth.com/docs/guides/your-first-plugin#client-plugin) [Initiate your plugin!](https://www.better-auth.com/docs/guides/your-first-plugin#initiate-your-plugin) [Server initiation](https://www.better-auth.com/docs/guides/your-first-plugin#server-initiation) [Client initiation](https://www.better-auth.com/docs/guides/your-first-plugin#client-initiation) [Oh yeah, the schemas!](https://www.better-auth.com/docs/guides/your-first-plugin#oh-yeah-the-schemas) [Wrapping Up](https://www.better-auth.com/docs/guides/your-first-plugin#wrapping-up)Own Your Auth

The most comprehensive authentication framework for TypeScript.

git:(main)  x

npm addbetter-auth

[Get Started](https://www.better-auth.com/docs)
Create Sign in Box

auth.ts

client.ts

Copy code

01

02

03

04

05

06

07

08

09

10

11

12

```px-4

export const auth = betterAuth({
	database: new Pool({
		connectionString: DATABASE_URL,
	}),
    emailAndPassword: {
        enabled: true,
    },
	plugins: [\
	  organization(),\
      twoFactor(),\
	]
})
```

[Demo](https://demo.better-auth.com/)

Framework Agnostic

Supports for popular **frameworks**.

Supports popular frameworks, including React, Vue, Svelte, Astro, Solid, Next.js, Nuxt, Tanstack Start, Hono, and more. [Learn more](https://www.better-auth.com/docs)

Authentication

Email & Password **Authentication**.

Built-in support for email and password authentication, with session and account management features. [Learn more](https://www.better-auth.com/docs)

Social Sign-on

Support multiple **OAuth providers**.

Allow users to sign in with their accounts, including GitHub, Google, Discord, Twitter, and more. [Learn more](https://www.better-auth.com/docs)

Two Factor

Multi Factor **Authentication**.

Secure your users accounts with two factor authentication with a few lines of code. [Learn more](https://www.better-auth.com/docs)

Multi Tenant

**Organization** Members and Invitation.

Multi tenant support with members, organization, teams and invitation with access control. [Learn more](https://www.better-auth.com/docs)

Plugin Ecosystem

A lot more features with **plugins**.

Improve your application experience with our official plugins and those created by the community. [Learn more](https://www.better-auth.com/docs)

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"I didn't know @better\_auth was THAT good. I'm implementing it in TanStack Start and I can't believe how good the DX is. This is my favorite stack now (along with @DrizzleORM and @shadcn ui).."

![avatar](https://pbs.twimg.com/profile_images/1838045335282745344/sCjDaZ2-_400x400.jpg)

##### Lazar Nikolov

Software Engineer & Educator

"Very exciting project and a super easy rec."

![avatar](https://pbs.twimg.com/profile_images/1799982162831396865/Fnol01I1_400x400.jpg)

##### Theo - t3.gg

CEO of t3.chat

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1884529433979068416/AhfbeVEh_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"between better-auth and openauth one of those options should cover how you want to do things for 95% of cases. the problem of defaulting to SaaS for auth in js is finally fixed...."

![avatar](https://pbs.twimg.com/profile_images/1602333093485891584/mmVqjFNI_400x400.jpg)

##### Dax

Creator of SST

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"I didn't know @better\_auth was THAT good. I'm implementing it in TanStack Start and I can't believe how good the DX is. This is my favorite stack now (along with @DrizzleORM and @shadcn ui).."

![avatar](https://pbs.twimg.com/profile_images/1838045335282745344/sCjDaZ2-_400x400.jpg)

##### Lazar Nikolov

Software Engineer & Educator

"Very exciting project and a super easy rec."

![avatar](https://pbs.twimg.com/profile_images/1799982162831396865/Fnol01I1_400x400.jpg)

##### Theo - t3.gg

CEO of t3.chat

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1884529433979068416/AhfbeVEh_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"between better-auth and openauth one of those options should cover how you want to do things for 95% of cases. the problem of defaulting to SaaS for auth in js is finally fixed...."

![avatar](https://pbs.twimg.com/profile_images/1602333093485891584/mmVqjFNI_400x400.jpg)

##### Dax

Creator of SST

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"I didn't know @better\_auth was THAT good. I'm implementing it in TanStack Start and I can't believe how good the DX is. This is my favorite stack now (along with @DrizzleORM and @shadcn ui).."

![avatar](https://pbs.twimg.com/profile_images/1838045335282745344/sCjDaZ2-_400x400.jpg)

##### Lazar Nikolov

Software Engineer & Educator

"Very exciting project and a super easy rec."

![avatar](https://pbs.twimg.com/profile_images/1799982162831396865/Fnol01I1_400x400.jpg)

##### Theo - t3.gg

CEO of t3.chat

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1884529433979068416/AhfbeVEh_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"between better-auth and openauth one of those options should cover how you want to do things for 95% of cases. the problem of defaulting to SaaS for auth in js is finally fixed...."

![avatar](https://pbs.twimg.com/profile_images/1602333093485891584/mmVqjFNI_400x400.jpg)

##### Dax

Creator of SST

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"I didn't know @better\_auth was THAT good. I'm implementing it in TanStack Start and I can't believe how good the DX is. This is my favorite stack now (along with @DrizzleORM and @shadcn ui).."

![avatar](https://pbs.twimg.com/profile_images/1838045335282745344/sCjDaZ2-_400x400.jpg)

##### Lazar Nikolov

Software Engineer & Educator

"Very exciting project and a super easy rec."

![avatar](https://pbs.twimg.com/profile_images/1799982162831396865/Fnol01I1_400x400.jpg)

##### Theo - t3.gg

CEO of t3.chat

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1884529433979068416/AhfbeVEh_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"between better-auth and openauth one of those options should cover how you want to do things for 95% of cases. the problem of defaulting to SaaS for auth in js is finally fixed...."

![avatar](https://pbs.twimg.com/profile_images/1602333093485891584/mmVqjFNI_400x400.jpg)

##### Dax

Creator of SST

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"I didn't know @better\_auth was THAT good. I'm implementing it in TanStack Start and I can't believe how good the DX is. This is my favorite stack now (along with @DrizzleORM and @shadcn ui).."

![avatar](https://pbs.twimg.com/profile_images/1838045335282745344/sCjDaZ2-_400x400.jpg)

##### Lazar Nikolov

Software Engineer & Educator

"Very exciting project and a super easy rec."

![avatar](https://pbs.twimg.com/profile_images/1799982162831396865/Fnol01I1_400x400.jpg)

##### Theo - t3.gg

CEO of t3.chat

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1884529433979068416/AhfbeVEh_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"between better-auth and openauth one of those options should cover how you want to do things for 95% of cases. the problem of defaulting to SaaS for auth in js is finally fixed...."

![avatar](https://pbs.twimg.com/profile_images/1602333093485891584/mmVqjFNI_400x400.jpg)

##### Dax

Creator of SST

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"I didn't know @better\_auth was THAT good. I'm implementing it in TanStack Start and I can't believe how good the DX is. This is my favorite stack now (along with @DrizzleORM and @shadcn ui).."

![avatar](https://pbs.twimg.com/profile_images/1838045335282745344/sCjDaZ2-_400x400.jpg)

##### Lazar Nikolov

Software Engineer & Educator

"Very exciting project and a super easy rec."

![avatar](https://pbs.twimg.com/profile_images/1799982162831396865/Fnol01I1_400x400.jpg)

##### Theo - t3.gg

CEO of t3.chat

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1884529433979068416/AhfbeVEh_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"between better-auth and openauth one of those options should cover how you want to do things for 95% of cases. the problem of defaulting to SaaS for auth in js is finally fixed...."

![avatar](https://pbs.twimg.com/profile_images/1602333093485891584/mmVqjFNI_400x400.jpg)

##### Dax

Creator of SST

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"I didn't know @better\_auth was THAT good. I'm implementing it in TanStack Start and I can't believe how good the DX is. This is my favorite stack now (along with @DrizzleORM and @shadcn ui).."

![avatar](https://pbs.twimg.com/profile_images/1838045335282745344/sCjDaZ2-_400x400.jpg)

##### Lazar Nikolov

Software Engineer & Educator

"Very exciting project and a super easy rec."

![avatar](https://pbs.twimg.com/profile_images/1799982162831396865/Fnol01I1_400x400.jpg)

##### Theo - t3.gg

CEO of t3.chat

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1884529433979068416/AhfbeVEh_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"between better-auth and openauth one of those options should cover how you want to do things for 95% of cases. the problem of defaulting to SaaS for auth in js is finally fixed...."

![avatar](https://pbs.twimg.com/profile_images/1602333093485891584/mmVqjFNI_400x400.jpg)

##### Dax

Creator of SST

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"I didn't know @better\_auth was THAT good. I'm implementing it in TanStack Start and I can't believe how good the DX is. This is my favorite stack now (along with @DrizzleORM and @shadcn ui).."

![avatar](https://pbs.twimg.com/profile_images/1838045335282745344/sCjDaZ2-_400x400.jpg)

##### Lazar Nikolov

Software Engineer & Educator

"Very exciting project and a super easy rec."

![avatar](https://pbs.twimg.com/profile_images/1799982162831396865/Fnol01I1_400x400.jpg)

##### Theo - t3.gg

CEO of t3.chat

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1884529433979068416/AhfbeVEh_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"between better-auth and openauth one of those options should cover how you want to do things for 95% of cases. the problem of defaulting to SaaS for auth in js is finally fixed...."

![avatar](https://pbs.twimg.com/profile_images/1602333093485891584/mmVqjFNI_400x400.jpg)

##### Dax

Creator of SST

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"I didn't know @better\_auth was THAT good. I'm implementing it in TanStack Start and I can't believe how good the DX is. This is my favorite stack now (along with @DrizzleORM and @shadcn ui).."

![avatar](https://pbs.twimg.com/profile_images/1838045335282745344/sCjDaZ2-_400x400.jpg)

##### Lazar Nikolov

Software Engineer & Educator

"Very exciting project and a super easy rec."

![avatar](https://pbs.twimg.com/profile_images/1799982162831396865/Fnol01I1_400x400.jpg)

##### Theo - t3.gg

CEO of t3.chat

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1884529433979068416/AhfbeVEh_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"between better-auth and openauth one of those options should cover how you want to do things for 95% of cases. the problem of defaulting to SaaS for auth in js is finally fixed...."

![avatar](https://pbs.twimg.com/profile_images/1602333093485891584/mmVqjFNI_400x400.jpg)

##### Dax

Creator of SST

"This has been the best auth experience by a mileee, auto generated my drizzle schemas for users, sessions etc, full type safe and dead simple api, well done @better\_auth 👏👏."

![avatar](https://pbs.twimg.com/profile_images/1620476753398452224/fcozbw1J_400x400.jpg)

##### Dev Ed

Content Creator

"I didn't know @better\_auth was THAT good. I'm implementing it in TanStack Start and I can't believe how good the DX is. This is my favorite stack now (along with @DrizzleORM and @shadcn ui).."

![avatar](https://pbs.twimg.com/profile_images/1838045335282745344/sCjDaZ2-_400x400.jpg)

##### Lazar Nikolov

Software Engineer & Educator

"Very exciting project and a super easy rec."

![avatar](https://pbs.twimg.com/profile_images/1799982162831396865/Fnol01I1_400x400.jpg)

##### Theo - t3.gg

CEO of t3.chat

"fuck, @better\_auth is just so good."

![avatar](https://pbs.twimg.com/profile_images/1884529433979068416/AhfbeVEh_400x400.jpg)

##### Jonathan Wilke

Creator of Supastarter

"When @better\_auth meets @nuxt\_hub to build full-stack Nuxt apps on Cloudflare (using D1 & KV).."

![avatar](https://pbs.twimg.com/profile_images/1862505215624142848/7tSrng8r_400x400.jpg)

##### Sébastien Chopin

Creator of Nuxt & NuxtLabs

"between better-auth and openauth one of those options should cover how you want to do things for 95% of cases. the problem of defaulting to SaaS for auth in js is finally fixed...."

![avatar](https://pbs.twimg.com/profile_images/1602333093485891584/mmVqjFNI_400x400.jpg)

##### Dax

Creator of SST

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"if you're building a code project in 2025 use @better\_auth. It has everything you need now and everything you'll need at scale. dont take this suggestion lightly..."

![avatar](https://pbs.twimg.com/profile_images/1889741029470801920/6J25rfKo_400x400.jpg)

##### Omar McAdam

Creator of AugmentedHQ

"Great project & maintainer."

![avatar](https://pbs.twimg.com/profile_images/1783856060249595904/8TfcCN0r_400x400.jpg)

##### Guillermo Rauch

CEO of Vercel

"i cant believe how easy @better\_auth is compared to @authjs all i had to do was connect it to my drizzle schema and create a sign up page w the auth :)))."

![avatar](https://pbs.twimg.com/profile_images/1884987569961570304/TP3OWz64_400x400.jpg)

##### Nizzy

engineer @calcom

"better-auth is a work of art.."

![avatar](https://pbs.twimg.com/profile_images/1690579403070451712/zs46gsPl_400x400.jpg)

##### Vybhav Bhargav

Founding engineer @glyfspace

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"if you're building a code project in 2025 use @better\_auth. It has everything you need now and everything you'll need at scale. dont take this suggestion lightly..."

![avatar](https://pbs.twimg.com/profile_images/1889741029470801920/6J25rfKo_400x400.jpg)

##### Omar McAdam

Creator of AugmentedHQ

"Great project & maintainer."

![avatar](https://pbs.twimg.com/profile_images/1783856060249595904/8TfcCN0r_400x400.jpg)

##### Guillermo Rauch

CEO of Vercel

"i cant believe how easy @better\_auth is compared to @authjs all i had to do was connect it to my drizzle schema and create a sign up page w the auth :)))."

![avatar](https://pbs.twimg.com/profile_images/1884987569961570304/TP3OWz64_400x400.jpg)

##### Nizzy

engineer @calcom

"better-auth is a work of art.."

![avatar](https://pbs.twimg.com/profile_images/1690579403070451712/zs46gsPl_400x400.jpg)

##### Vybhav Bhargav

Founding engineer @glyfspace

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"if you're building a code project in 2025 use @better\_auth. It has everything you need now and everything you'll need at scale. dont take this suggestion lightly..."

![avatar](https://pbs.twimg.com/profile_images/1889741029470801920/6J25rfKo_400x400.jpg)

##### Omar McAdam

Creator of AugmentedHQ

"Great project & maintainer."

![avatar](https://pbs.twimg.com/profile_images/1783856060249595904/8TfcCN0r_400x400.jpg)

##### Guillermo Rauch

CEO of Vercel

"i cant believe how easy @better\_auth is compared to @authjs all i had to do was connect it to my drizzle schema and create a sign up page w the auth :)))."

![avatar](https://pbs.twimg.com/profile_images/1884987569961570304/TP3OWz64_400x400.jpg)

##### Nizzy

engineer @calcom

"better-auth is a work of art.."

![avatar](https://pbs.twimg.com/profile_images/1690579403070451712/zs46gsPl_400x400.jpg)

##### Vybhav Bhargav

Founding engineer @glyfspace

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"if you're building a code project in 2025 use @better\_auth. It has everything you need now and everything you'll need at scale. dont take this suggestion lightly..."

![avatar](https://pbs.twimg.com/profile_images/1889741029470801920/6J25rfKo_400x400.jpg)

##### Omar McAdam

Creator of AugmentedHQ

"Great project & maintainer."

![avatar](https://pbs.twimg.com/profile_images/1783856060249595904/8TfcCN0r_400x400.jpg)

##### Guillermo Rauch

CEO of Vercel

"i cant believe how easy @better\_auth is compared to @authjs all i had to do was connect it to my drizzle schema and create a sign up page w the auth :)))."

![avatar](https://pbs.twimg.com/profile_images/1884987569961570304/TP3OWz64_400x400.jpg)

##### Nizzy

engineer @calcom

"better-auth is a work of art.."

![avatar](https://pbs.twimg.com/profile_images/1690579403070451712/zs46gsPl_400x400.jpg)

##### Vybhav Bhargav

Founding engineer @glyfspace

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"if you're building a code project in 2025 use @better\_auth. It has everything you need now and everything you'll need at scale. dont take this suggestion lightly..."

![avatar](https://pbs.twimg.com/profile_images/1889741029470801920/6J25rfKo_400x400.jpg)

##### Omar McAdam

Creator of AugmentedHQ

"Great project & maintainer."

![avatar](https://pbs.twimg.com/profile_images/1783856060249595904/8TfcCN0r_400x400.jpg)

##### Guillermo Rauch

CEO of Vercel

"i cant believe how easy @better\_auth is compared to @authjs all i had to do was connect it to my drizzle schema and create a sign up page w the auth :)))."

![avatar](https://pbs.twimg.com/profile_images/1884987569961570304/TP3OWz64_400x400.jpg)

##### Nizzy

engineer @calcom

"better-auth is a work of art.."

![avatar](https://pbs.twimg.com/profile_images/1690579403070451712/zs46gsPl_400x400.jpg)

##### Vybhav Bhargav

Founding engineer @glyfspace

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"if you're building a code project in 2025 use @better\_auth. It has everything you need now and everything you'll need at scale. dont take this suggestion lightly..."

![avatar](https://pbs.twimg.com/profile_images/1889741029470801920/6J25rfKo_400x400.jpg)

##### Omar McAdam

Creator of AugmentedHQ

"Great project & maintainer."

![avatar](https://pbs.twimg.com/profile_images/1783856060249595904/8TfcCN0r_400x400.jpg)

##### Guillermo Rauch

CEO of Vercel

"i cant believe how easy @better\_auth is compared to @authjs all i had to do was connect it to my drizzle schema and create a sign up page w the auth :)))."

![avatar](https://pbs.twimg.com/profile_images/1884987569961570304/TP3OWz64_400x400.jpg)

##### Nizzy

engineer @calcom

"better-auth is a work of art.."

![avatar](https://pbs.twimg.com/profile_images/1690579403070451712/zs46gsPl_400x400.jpg)

##### Vybhav Bhargav

Founding engineer @glyfspace

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"if you're building a code project in 2025 use @better\_auth. It has everything you need now and everything you'll need at scale. dont take this suggestion lightly..."

![avatar](https://pbs.twimg.com/profile_images/1889741029470801920/6J25rfKo_400x400.jpg)

##### Omar McAdam

Creator of AugmentedHQ

"Great project & maintainer."

![avatar](https://pbs.twimg.com/profile_images/1783856060249595904/8TfcCN0r_400x400.jpg)

##### Guillermo Rauch

CEO of Vercel

"i cant believe how easy @better\_auth is compared to @authjs all i had to do was connect it to my drizzle schema and create a sign up page w the auth :)))."

![avatar](https://pbs.twimg.com/profile_images/1884987569961570304/TP3OWz64_400x400.jpg)

##### Nizzy

engineer @calcom

"better-auth is a work of art.."

![avatar](https://pbs.twimg.com/profile_images/1690579403070451712/zs46gsPl_400x400.jpg)

##### Vybhav Bhargav

Founding engineer @glyfspace

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"if you're building a code project in 2025 use @better\_auth. It has everything you need now and everything you'll need at scale. dont take this suggestion lightly..."

![avatar](https://pbs.twimg.com/profile_images/1889741029470801920/6J25rfKo_400x400.jpg)

##### Omar McAdam

Creator of AugmentedHQ

"Great project & maintainer."

![avatar](https://pbs.twimg.com/profile_images/1783856060249595904/8TfcCN0r_400x400.jpg)

##### Guillermo Rauch

CEO of Vercel

"i cant believe how easy @better\_auth is compared to @authjs all i had to do was connect it to my drizzle schema and create a sign up page w the auth :)))."

![avatar](https://pbs.twimg.com/profile_images/1884987569961570304/TP3OWz64_400x400.jpg)

##### Nizzy

engineer @calcom

"better-auth is a work of art.."

![avatar](https://pbs.twimg.com/profile_images/1690579403070451712/zs46gsPl_400x400.jpg)

##### Vybhav Bhargav

Founding engineer @glyfspace

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"if you're building a code project in 2025 use @better\_auth. It has everything you need now and everything you'll need at scale. dont take this suggestion lightly..."

![avatar](https://pbs.twimg.com/profile_images/1889741029470801920/6J25rfKo_400x400.jpg)

##### Omar McAdam

Creator of AugmentedHQ

"Great project & maintainer."

![avatar](https://pbs.twimg.com/profile_images/1783856060249595904/8TfcCN0r_400x400.jpg)

##### Guillermo Rauch

CEO of Vercel

"i cant believe how easy @better\_auth is compared to @authjs all i had to do was connect it to my drizzle schema and create a sign up page w the auth :)))."

![avatar](https://pbs.twimg.com/profile_images/1884987569961570304/TP3OWz64_400x400.jpg)

##### Nizzy

engineer @calcom

"better-auth is a work of art.."

![avatar](https://pbs.twimg.com/profile_images/1690579403070451712/zs46gsPl_400x400.jpg)

##### Vybhav Bhargav

Founding engineer @glyfspace

"Using @better\_auth with custom components feels like having someone hand you the remote while you're comfortably on the sofa. The ease I'm feeling rn is insane Auth done in under 5 minutes 🤌⚡️.."

![avatar](https://pbs.twimg.com/profile_images/1826246307326902273/Ee4nlPjH_400x400.jpg)

##### Tech Nerd

Developer

"if you're building a code project in 2025 use @better\_auth. It has everything you need now and everything you'll need at scale. dont take this suggestion lightly..."

![avatar](https://pbs.twimg.com/profile_images/1889741029470801920/6J25rfKo_400x400.jpg)

##### Omar McAdam

Creator of AugmentedHQ

"Great project & maintainer."

![avatar](https://pbs.twimg.com/profile_images/1783856060249595904/8TfcCN0r_400x400.jpg)

##### Guillermo Rauch

CEO of Vercel

"i cant believe how easy @better\_auth is compared to @authjs all i had to do was connect it to my drizzle schema and create a sign up page w the auth :)))."

![avatar](https://pbs.twimg.com/profile_images/1884987569961570304/TP3OWz64_400x400.jpg)

##### Nizzy

engineer @calcom

"better-auth is a work of art.."

![avatar](https://pbs.twimg.com/profile_images/1690579403070451712/zs46gsPl_400x400.jpg)

##### Vybhav Bhargav

Founding engineer @glyfspace

Own your auth

**Roll your own auth with confidence in minutes!**

[Star on GitHub\\
\\
8.1k](https://github.com/better-auth/better-auth)

* * *Docs

On this pageGet your LinkedIn credentials

# LinkedIn

### [Get your LinkedIn credentials](https://www.better-auth.com/docs/authentication/linkedin\#get-your-linkedin-credentials)

To use LinkedIn sign in, you need a client ID and client secret. You can get them from the [LinkedIn Developer Portal](https://www.linkedin.com/developers/).

Make sure to set the redirect URL to `http://localhost:3000/api/auth/callback/linkedin` for local development. For production, you should set it to the URL of your application. If you change the base path of the auth routes, you should update the redirect URL accordingly.

In the LinkedIn portal under products you need the **Sign In with LinkedIn using OpenID Connect** product.

There are some different Guides here:
[Authorization Code Flow (3-legged OAuth) (Outdated)](https://learn.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow) [Sign In with LinkedIn using OpenID Connect](https://learn.microsoft.com/en-us/linkedin/consumer/integrations/self-serve/sign-in-with-linkedin-v2?context=linkedin%2Fconsumer%2Fcontext)

### [Configure the provider](https://www.better-auth.com/docs/authentication/linkedin\#configure-the-provider)

To configure the provider, you need to import the provider and pass it to the `socialProviders` option of the auth instance.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        linkedin: {
            clientId: process.env.LINKEDIN_CLIENT_ID as string,
            clientSecret: process.env.LINKEDIN_CLIENT_SECRET as string,
        },
    },
})
```

### [Sign In with LinkedIn](https://www.better-auth.com/docs/authentication/linkedin\#sign-in-with-linkedin)

To sign in with LinkedIn, you can use the `signIn.social` function provided by the client. The `signIn` function takes an object with the following properties:

- `provider`: The provider to use. It should be set to `linkedin`.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "linkedin"
    })
}
```

[**Dropbox** \\
Dropbox provider setup and usage.](https://www.better-auth.com/docs/authentication/dropbox) [**GitLab** \\
GitLab provider setup and usage.](https://www.better-auth.com/docs/authentication/gitlab)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Get your LinkedIn credentials](https://www.better-auth.com/docs/authentication/linkedin#get-your-linkedin-credentials) [Configure the provider](https://www.better-auth.com/docs/authentication/linkedin#configure-the-provider) [Sign In with LinkedIn](https://www.better-auth.com/docs/authentication/linkedin#sign-in-with-linkedin)Docs

On this pageTypescript Config

# TypeScript

Better Auth is designed to be type-safe. Both the client and server are built with TypeScript, allowing you to easily infer types.

## [Typescript Config](https://www.better-auth.com/docs/concepts/typescript\#typescript-config)

### [Strict Mode](https://www.better-auth.com/docs/concepts/typescript\#strict-mode)

Better Auth is designed to work with TypeScript's strict mode. We recommend enabling strict mode in your TypeScript config file:

tsconfig.json

```
{
  "compilerOptions": {
    "strict": true
  }
}
```

if you can't set `strict` to `true`, you can enable `strictNullChecks`:

tsconfig.json

```
{
  "compilerOptions": {
    "strictNullChecks": true,
  }
}
```

## [Inferring Types](https://www.better-auth.com/docs/concepts/typescript\#inferring-types)

Both the client SDK and the server offer types that can be inferred using the `$Infer` property. Plugins can extend base types like `User` and `Session`, and you can use `$Infer` to infer these types. Additionally, plugins can provide extra types that can also be inferred through `$Infer`.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"

const authClient = createAuthClient()

export type Session = typeof authClient.$Infer.Session
```

The `Session` type includes both `session` and `user` properties. The user property represents the user object type, and the `session` property represents the `session` object type.

You can also infer types on the server side.

auth.ts

```
import { betterAuth } from "better-auth"
import Database from "better-sqlite3"

export const auth = betterAuth({
    database: new Database("database.db")
})

type Session = typeof auth.$Infer.Session
```

## [Additional Fields](https://www.better-auth.com/docs/concepts/typescript\#additional-fields)

Better Auth allows you to add additional fields to the user and session objects. All additional fields are properly inferred and available on the server and client side.

```
import { betterAuth } from "better-auth"
import Database from "better-sqlite3"

export const auth = betterAuth({
    database: new Database("database.db"),
    user: {
       additionalFields: {
          role: {
              type: "string"
            }
        }
    }

})

type Session = typeof auth.$Infer.Session
```

In the example above, we added a `role` field to the user object. This field is now available on the `Session` type.

### [Inferring Additional Fields on Client](https://www.better-auth.com/docs/concepts/typescript\#inferring-additional-fields-on-client)

To make sure proper type inference for additional fields on the client side, you need to inform the client about these fields. There are two approaches to achieve this, depending on your project structure:

1. For Monorepo or Single-Project Setups

If your server and client code reside in the same project, you can use the `inferAdditionalFields` plugin to automatically infer the additional fields from your server configuration.

```
import { inferAdditionalFields } from "better-auth/client/plugins";
import { createAuthClient } from "better-auth/react";
import type { auth } from "./auth";

export const authClient = createAuthClient({
  plugins: [inferAdditionalFields<typeof auth>()],
});
```

2. For Separate Client-Server Projects

If your client and server are in separate projects, you'll need to manually specify the additional fields when creating the auth client.

```
import type { auth } from "./auth";
import { inferAdditionalFields } from "better-auth/client/plugins";

export const authClient = createAuthClient({
  plugins: [inferAdditionalFields({\
      user: {\
        role: {\
          type: "string"\
        }\
      }\
  })],
});
```

[**Session Management** \\
Better Auth session management.](https://www.better-auth.com/docs/concepts/session-management) [**User & Accounts** \\
User and account management.](https://www.better-auth.com/docs/concepts/users-accounts)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Typescript Config](https://www.better-auth.com/docs/concepts/typescript#typescript-config) [Strict Mode](https://www.better-auth.com/docs/concepts/typescript#strict-mode) [Inferring Types](https://www.better-auth.com/docs/concepts/typescript#inferring-types) [Additional Fields](https://www.better-auth.com/docs/concepts/typescript#additional-fields) [Inferring Additional Fields on Client](https://www.better-auth.com/docs/concepts/typescript#inferring-additional-fields-on-client)Docs

On this pageMount the handler

# TanStack Start Integration

This integration guide is assuming you are using TanStack Start.

Before you start, make sure you have a Better Auth instance configured. If you haven't done that yet, check out the [installation](https://www.better-auth.com/docs/installation).

### [Mount the handler](https://www.better-auth.com/docs/integrations/tanstack\#mount-the-handler)

We need to mount the handler to a TanStack API endpoint.
Create a new file: `/app/routes/api/auth/$.ts`

```
import { auth } from '@/lib/auth'
import { createAPIFileRoute } from '@tanstack/start/api'

export const APIRoute = createAPIFileRoute('/api/auth/$')({
  GET: ({ request }) => {
    return auth.handler(request)
  },
  POST: ({ request }) => {
    return auth.handler(request)
  },
})
```

This will allow you to access use the `getSession` method in all of your routes.

[**SolidStart Integration** \\
Integrate Better Auth with SolidStart.](https://www.better-auth.com/docs/integrations/solid-start) [**Hono Integration** \\
Integrate Better Auth with Hono.](https://www.better-auth.com/docs/integrations/hono)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Mount the handler](https://www.better-auth.com/docs/integrations/tanstack#mount-the-handler)Docs

On this pageBefore You Begin

# Migrating from NextAuth.js to Better Auth

In this guide, we’ll walk through the steps to migrate a project from [NextAuth.js](https://authjs.dev/) to Better Auth, ensuring no loss of data or functionality. While this guide focuses on Next.js, it can be adapted for other frameworks as well.

* * *

## [Before You Begin](https://www.better-auth.com/docs/guides/next-auth-migration-guide\#before-you-begin)

Before starting the migration process, set up Better Auth in your project. Follow the [installation guide](https://www.better-auth.com/docs/installation) to get started.

* * *

### [Mapping Existing Columns](https://www.better-auth.com/docs/guides/next-auth-migration-guide\#mapping-existing-columns)

Instead of altering your existing database column names, you can map them to match Better Auth's expected structure. This allows you to retain your current database schema.

#### [User Schema](https://www.better-auth.com/docs/guides/next-auth-migration-guide\#user-schema)

Your existing user schema is likely compatible with Better Auth, so no changes are needed.

#### [Session Schema](https://www.better-auth.com/docs/guides/next-auth-migration-guide\#session-schema)

Map the following fields in the session schema:

- `expires` → `expiresAt`
- `sessionToken` → `token`

auth.ts

```
export const auth = betterAuth({
    // Other configs
    session: {
        fields: {
            expiresAt: "expires", // e.g., "expires_at" or your existing field name
            token: "sessionToken" // e.g., "session_token" or your existing field name
        }
    },
});
```

#### [Accounts Schema](https://www.better-auth.com/docs/guides/next-auth-migration-guide\#accounts-schema)

Map these fields in the accounts schema:

- `providerAccountId` → `accountId`
- `refresh_token` → `refreshToken`
- `access_token` → `accessToken`
- `access_token_expires` → `accessTokenExpiresAt`
- `id_token` → `idToken`

Remove the `session_state`, `type`, and `token_type` fields, as they are not required by Better Auth.

auth.ts

```
export const auth = betterAuth({
    // Other configs
    accounts: {
        fields: {
            accountId: "providerAccountId",
            refreshToken: "refresh_token",
            accessToken: "access_token",
            accessTokenExpiresAt: "access_token_expires",
            idToken: "id_token",
        }
    },
});
```

**Note:** If you use ORM adapters, you can map these fields in your schema file.

**Example with Prisma:**

schema.prisma

```
model Session {
    id          String   @id @default(cuid())
    expires     DateTime @map("expiresAt") // Map `expires` to your existing field
    token       String   @map("sessionToken") // Map `token` to your existing field
    userId      String
    user        User     @relation(fields: [userId], references: [id])
}
```

### [Update the Route Handler](https://www.better-auth.com/docs/guides/next-auth-migration-guide\#update-the-route-handler)

In the `app/api/auth` folder, rename the `[...nextauth]` file to `[...all]` to avoid confusion. Then, update the `route.ts` file as follows:

app/api/auth/\[...all\]/route.ts

```
import { toNextJsHandler } from "better-auth/next-js";
import { auth } from "~/server/auth";

export const { POST, GET } = toNextJsHandler(auth);
```

### [Update the Client](https://www.better-auth.com/docs/guides/next-auth-migration-guide\#update-the-client)

Create a file named `auth-client.ts` in the `lib` folder. Add the following code:

auth-client.ts

```
import { createAuthClient } from "better-auth/react";

export const authClient = createAuthClient({
    baseURL: process.env.BASE_URL! // Optional if the API base URL matches the frontend
});

export const { signIn, signOut, useSession } = authClient;
```

#### [Social Login Functions](https://www.better-auth.com/docs/guides/next-auth-migration-guide\#social-login-functions)

Update your social login functions to use Better Auth. For example, for Discord:

```
import { signIn } from "~/lib/auth-client";

export const signInDiscord = async () => {
    const data = await signIn.social({
        provider: "discord"
    });
    return data;
};
```

#### [Update `useSession` Calls](https://www.better-auth.com/docs/guides/next-auth-migration-guide\#update-usesession-calls)

Replace `useSession` calls with Better Auth’s version. Example:

Profile.tsx

```
import { useSession } from "~/lib/auth-client";

export const Profile = () => {
    const { data } = useSession();
    return (
        <div>
            <pre>
                {JSON.stringify(data, null, 2)}
            </pre>
        </div>
    );
};
```

### [Server-Side Session Handling](https://www.better-auth.com/docs/guides/next-auth-migration-guide\#server-side-session-handling)

Use the `auth` instance to get session data on the server:

actions.ts

```
"use server";

import { auth } from "~/server/auth";
import { headers } from "next/headers";

export const protectedAction = async () => {
    const session = await auth.api.getSession({
        headers: await headers(),
    });
};
```

### [Middleware](https://www.better-auth.com/docs/guides/next-auth-migration-guide\#middleware)

To protect routes with middleware, refer to the [Next.js middleware guide](https://www.better-auth.com/docs/integrations/next#middleware).

## [Wrapping Up](https://www.better-auth.com/docs/guides/next-auth-migration-guide\#wrapping-up)

Congratulations! You’ve successfully migrated from NextAuth.js to Better Auth. For a complete implementation with multiple authentication methods, check out the [demo repository](https://github.com/Bekacru/t3-app-better-auth).

Better Auth offers greater flexibility and more features—be sure to explore the [documentation](https://www.better-auth.com/docs) to unlock its full potential.

[**Community Plugins** \\
A list of recommended community plugins.](https://www.better-auth.com/docs/plugins/community-plugins) [**Create your first plugin** \\
A step-by-step guide to creating your first Better Auth plugin.](https://www.better-auth.com/docs/guides/your-first-plugin)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Before You Begin](https://www.better-auth.com/docs/guides/next-auth-migration-guide#before-you-begin) [Mapping Existing Columns](https://www.better-auth.com/docs/guides/next-auth-migration-guide#mapping-existing-columns) [User Schema](https://www.better-auth.com/docs/guides/next-auth-migration-guide#user-schema) [Session Schema](https://www.better-auth.com/docs/guides/next-auth-migration-guide#session-schema) [Accounts Schema](https://www.better-auth.com/docs/guides/next-auth-migration-guide#accounts-schema) [Update the Route Handler](https://www.better-auth.com/docs/guides/next-auth-migration-guide#update-the-route-handler) [Update the Client](https://www.better-auth.com/docs/guides/next-auth-migration-guide#update-the-client) [Social Login Functions](https://www.better-auth.com/docs/guides/next-auth-migration-guide#social-login-functions) [Update `useSession` Calls](https://www.better-auth.com/docs/guides/next-auth-migration-guide#update-usesession-calls) [Server-Side Session Handling](https://www.better-auth.com/docs/guides/next-auth-migration-guide#server-side-session-handling) [Middleware](https://www.better-auth.com/docs/guides/next-auth-migration-guide#middleware) [Wrapping Up](https://www.better-auth.com/docs/guides/next-auth-migration-guide#wrapping-up)Docs

On this pagevs Other Auth Libraries

# Comparison

> Comparison is the thief of joy. — Kanye West

Here are non detailed reasons why you may want to use Better Auth over other auth libraries and services.

### [vs Other Auth Libraries](https://www.better-auth.com/docs/comparison\#vs-other-auth-libraries)

- You need more features from your auth library.
- We support almost all frameworks out of the box.
- You need advanced features like two-factor authentication, multi-tenancy, multi-session, admin tools, rate limiting, etc.
- You want to have more control over your auth flow.
- You prefer more comprehensive documentation.
- You like the idea of a plugin system to extend the library.
- You want to use a library that is actively maintained and has a growing community.

### [vs Self Hosted Auth Server](https://www.better-auth.com/docs/comparison\#vs-self-hosted-auth-server)

- You want to keep your users in your main database (the same database as your app).
- You need more control over your auth flow.
- You don't want the hassle of self-hosting your auth server.
- And there's a high possibility that we already cover the features you need. Additionally, you can always extend it using our plugin system.

### [vs Managed Auth Services (Paid)](https://www.better-auth.com/docs/comparison\#vs-managed-auth-services-paid)

- You don't want to give up user data to a third party.
- You want a single source of truth for your users.
- $$$ \- You don't want to pay for every user.
- You want to keep your users in your own database (the same database as your app).

### [vs Roll Your Own Auth](https://www.better-auth.com/docs/comparison\#vs-roll-your-own-auth)

- You don't want to maintain a lot of code that isn't your core business.
- You want to delegate the security to a community of people who probably care more than you do.
- We probably cover most of the features you'll need, and you can always extend it using our plugin system.

[**Introduction** \\
Introduction to Better Auth.](https://www.better-auth.com/docs/introduction) [**Installation** \\
Learn how to configure Better Auth in your project.](https://www.better-auth.com/docs/installation)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[vs Other Auth Libraries](https://www.better-auth.com/docs/comparison#vs-other-auth-libraries) [vs Self Hosted Auth Server](https://www.better-auth.com/docs/comparison#vs-self-hosted-auth-server) [vs Managed Auth Services (Paid)](https://www.better-auth.com/docs/comparison#vs-managed-auth-services-paid) [vs Roll Your Own Auth](https://www.better-auth.com/docs/comparison#vs-roll-your-own-auth)[BETTER-AUTH.](https://demo.better-auth.com/)

Toggle theme

### Forgot password

Enter your email to reset your password

Email

Send reset link

[Back to sign in](https://demo.better-auth.com/sign-in)Docs

On this page

# Community Plugins

This page showcases a list of recommended community made plugins.

We encourage you to create custom plugins and maybe get added to the list!

To create your own custom plugin, get started by reading our [plugins documentation](https://www.better-auth.com/docs/concepts/plugins). And if you want to share your plugin with the community, please open a pull request to add it to this list.

| Plugin | Description | Author |
| --- | --- | --- |
| [better-auth-harmony](https://github.com/gekorm/better-auth-harmony/) | Email & phone normalization and additional validation, blocking over 55,000 temporary email domains. | ![](https://github.com/GeKorm.png)[GeKorm](https://github.com/GeKorm) |
| [validation-better-auth](https://github.com/Daanish2003/validation-better-auth) | Validate API request using any validation library (e.g., Zod, Yup) | ![](https://github.com/Daanish2003.png)[Daanish2003](https://github.com/Daanish2003) |

[**JWT** \\
Authenticate users with JWT tokens in services that can't use the session](https://www.better-auth.com/docs/plugins/jwt) [**Migrating from NextAuth.js to Better Auth** \\
A step-by-step guide to transitioning from NextAuth.js to Better Auth.](https://www.better-auth.com/docs/guides/next-auth-migration-guide)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

No Headings# 500

## Internal Server Error.Docs

On this pageInstallation

# Username

The username plugin wraps the email and password authenticator and adds username support. This allows users to sign in and sign up with their username instead of their email.

## [Installation](https://beta.better-auth.com/docs/plugins/username\#installation)

### [Add Plugin to the server](https://beta.better-auth.com/docs/plugins/username\#add-plugin-to-the-server)

auth.ts

```
import { betterAuth } from "better-auth"
import { username } from "better-auth/plugins"

const auth = betterAuth({
    plugins: [\
        username()\
    ]
})
```

### [Migrate the database](https://beta.better-auth.com/docs/plugins/username\#migrate-the-database)

Run the migration or generate the schema to add the necessary fields and tables to the database.

migrategenerate

```
npx @better-auth/cli migrate
```

See the [Schema](https://beta.better-auth.com/docs/plugins/username#schema) section to add the fields manually.

### [Add the client plugin](https://beta.better-auth.com/docs/plugins/username\#add-the-client-plugin)

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
import { usernameClient } from "better-auth/client/plugins"

const authClient = createAuthClient({
    plugins: [\
        usernameClient()\
    ]
})
```

## [Usage](https://beta.better-auth.com/docs/plugins/username\#usage)

### [Signup with username](https://beta.better-auth.com/docs/plugins/username\#signup-with-username)

To sign up a user with username, you can use the existing `signUp.email` function provided by the client. The `signUp` function should take a new `username` property in the object.

auth-client.ts

```
const data = await authClient.signUp.email({
    email: "email@domain.com",
    name: "Test User",
    password: "password1234",
    username: "test"
})
```

### [Signin with username](https://beta.better-auth.com/docs/plugins/username\#signin-with-username)

To signin a user with username, you can use the `signIn.username` function provided by the client. The `signIn` function takes an object with the following properties:

- `username`: The username of the user.
- `password`: The password of the user.

auth-client.ts

```
const data = await authClient.signIn.username({
    username: "test",
    password: "password1234",
})
```

### [Update username](https://beta.better-auth.com/docs/plugins/username\#update-username)

To update the username of a user, you can use the `updateUser` function provided by the client.

auth-client.ts

```
const data = await authClient.updateUser({
    username: "new-username"
})
```

## [Schema](https://beta.better-auth.com/docs/plugins/username\#schema)

The plugin requires 1 field to be added to the user table:

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| username | string | - | The username of the user |

## [Options](https://beta.better-auth.com/docs/plugins/username\#options)

### [Min Username Length](https://beta.better-auth.com/docs/plugins/username\#min-username-length)

The minimum length of the username. Default is `3`.

auth.ts

```
import { betterAuth } from "better-auth"
import { username } from "better-auth/plugins"

const auth = betterAuth({
    plugins: [\
        username({\
            minUsernameLength: 5\
        })\
    ]
})
```

### [Max Username Length](https://beta.better-auth.com/docs/plugins/username\#max-username-length)

The maximum length of the username. Default is `30`.

auth.ts

```
import { betterAuth } from "better-auth"
import { username } from "better-auth/plugins"

const auth = betterAuth({
    plugins: [\
        username({\
            maxUsernameLength: 100\
        })\
    ]
})
```

### [Username Validator](https://beta.better-auth.com/docs/plugins/username\#username-validator)

A function that validates the username. The function should return false if the username is invalid. By default, the username should only contain alphanumeric characters and underscores.

auth.ts

```
import { betterAuth } from "better-auth"
import { username } from "better-auth/plugins"

const auth = betterAuth({
    plugins: [\
        username({\
            usernameValidator: (username) => {\
                if (username === "admin") {\
                    return false\
                }\
            }\
        })\
    ]
})
```

[**Two-Factor Authentication (2FA)** \\
Enhance your app's security with two-factor authentication.](https://beta.better-auth.com/docs/plugins/2fa) [**Anonymous** \\
Anonymous plugin for Better Auth.](https://beta.better-auth.com/docs/plugins/anonymous)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://beta.better-auth.com/docs/plugins/username#installation) [Add Plugin to the server](https://beta.better-auth.com/docs/plugins/username#add-plugin-to-the-server) [Migrate the database](https://beta.better-auth.com/docs/plugins/username#migrate-the-database) [Add the client plugin](https://beta.better-auth.com/docs/plugins/username#add-the-client-plugin) [Usage](https://beta.better-auth.com/docs/plugins/username#usage) [Signup with username](https://beta.better-auth.com/docs/plugins/username#signup-with-username) [Signin with username](https://beta.better-auth.com/docs/plugins/username#signin-with-username) [Update username](https://beta.better-auth.com/docs/plugins/username#update-username) [Schema](https://beta.better-auth.com/docs/plugins/username#schema) [Options](https://beta.better-auth.com/docs/plugins/username#options) [Min Username Length](https://beta.better-auth.com/docs/plugins/username#min-username-length) [Max Username Length](https://beta.better-auth.com/docs/plugins/username#max-username-length) [Username Validator](https://beta.better-auth.com/docs/plugins/username#username-validator)# 500

## Internal Server Error.Docs

On this pageInstallation

# Single Sign-On (SSO)

`OIDC` `OAuth2` `SSO`

Single Sign-On (SSO) allows users to authenticate with multiple applications using a single set of credentials. This plugin supports OpenID Connect (OIDC) and OAuth2 providers.

SAML support is coming soon. Upvote the feature request on our [GitHub](https://github.com/better-auth/better-auth/issues/96)

## [Installation](https://www.better-auth.com/docs/plugins/sso\#installation)

### [Add Plugin to the server](https://www.better-auth.com/docs/plugins/sso\#add-plugin-to-the-server)

auth.ts

```
import { betterAuth } from "better-auth"
import { sso } from "better-auth/plugins/sso";

const auth = betterAuth({
    plugins: [\
        sso()\
    ]
})
```

### [Migrate the database](https://www.better-auth.com/docs/plugins/sso\#migrate-the-database)

Run the migration or generate the schema to add the necessary fields and tables to the database.

migrategenerate

```
npx @better-auth/cli migrate
```

See the [Schema](https://www.better-auth.com/docs/plugins/sso#schema) section to add the fields manually.

### [Add the client plugin](https://www.better-auth.com/docs/plugins/sso\#add-the-client-plugin)

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
import { ssoClient } from "better-auth/client/plugins"

const authClient = createAuthClient({
    plugins: [\
        ssoClient()\
    ]
})
```

## [Usage](https://www.better-auth.com/docs/plugins/sso\#usage)

### [Register an OIDC Provider](https://www.better-auth.com/docs/plugins/sso\#register-an-oidc-provider)

To register an OIDC provider, use the `createOIDCProvider` endpoint and provide the necessary configuration details for the provider.

A redirect URL will be automatically generated using the provider ID. For instance, if the provider ID is `hydra`, the redirect URL would be `{baseURL}/api/auth/sso/hydra`. Note that `/api/auth` may vary depending on your base path configuration.

clientserver

register-provider.ts

```
import { authClient } from "@/lib/auth-client";

// only with issuer if the provider supports discovery
await authClient.sso.register({
    issuer: "https://idp.example.com",
    providerId: "example-provider",
});

// with all fields
await authClient.sso.register({
    issuer: "https://idp.example.com
    domain: "example.com",
    clientId: "client-id",
    clientSecret: "client-secret",
    authorizationEndpoint: "https://idp.example.com/authorize",
    tokenEndpoint: "https://idp.example.com/token",
    jwksEndpoint: "https://idp.example.com/jwks",
    mapping: {
        id: "sub",
        email: "email",
        emailVerified: "email_verified",
        name: "name",
        image: "picture",
    },
    providerId: "example-provider",
});
```

### [Sign In with SSO](https://www.better-auth.com/docs/plugins/sso\#sign-in-with-sso)

To sign in with an SSO provider, you can call `signIn.sso`

You can sign in using the email with domain matching:

sign-in.ts

```
const res = await authClient.signIn.sso({
    email: "user@example.com",
    callbackURL: "/dashboard",
});
```

or you can specify the domain:

sign-in-domain.ts

```
const res = await authClient.signIn.sso({
    domain: "example.com",
    callbackURL: "/dashboard",
});
```

You can also sign in using the organization slug if a provider is associated with an organization:

sign-in-org.ts

```
const res = await authClient.signIn.sso({
    organizationSlug: "example-org",
    callbackURL: "/dashboard",
});
```

Alternatively, you can sign in using the provider's ID:

sign-in-provider-id.ts

```
const res = await authClient.signIn.sso({
    providerId: "example-provider-id",
    callbackURL: "/dashboard",
});
```

To use the server api you can use `signInSSO`

sign-in-org.ts

```
const res = await auth.api.signInSSO({
    body: {
        organizationSlug: "example-org",
        callbackURL: "/dashboard",
    }
});
```

When a user is authenticated, if the user does not exist, the user will be provisioned using the `provisionUser` function. If the organization provisioning is enabled and a provider is associated with an organization, the user will be added to the organization.

auth.ts

```
const auth = betterAuth({
    plugins: [\
        sso({\
            provisionUser: async (user) => {\
                // provision user\
            },\
            organizationProvisioning: {\
                disabled: false,\
                defaultRole: "member",\
                getRole: async (user) => {\
                    // get role if needed\
                },\
            },\
        }),\
    ],
});
```

## [Schema](https://www.better-auth.com/docs/plugins/sso\#schema)

The plugin requires additional fields in the `ssoProvider` table to store the provider's configuration.

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | A database identifier |
| issuer | string | - | The issuer identifier |
| domain | string | - | The domain of the provider |
| oidcConfig | string | - | The OIDC configuration |
| userId | string | - | The user id |
| providerId | string | - | The provider id. Used to identify a provider and to generate a redirect url. |
| organizationId | string | - | The organization Id. If provider is linked to an organization. |

## [Options](https://www.better-auth.com/docs/plugins/sso\#options)

### [Server](https://www.better-auth.com/docs/plugins/sso\#server)

**provisionUser**: A custom function to provision a user when they sign in with an SSO provider.

**organizationProvisioning**: Options for provisioning users to an organization.

| Prop | Type | Default |
| --- | --- | --- |
| `provisionUser` | `function` | - |
| `organizationProvisioning` | `object` | - |

[**OIDC Provider** \\
Open ID Connect plugin for Better Auth that allows you to have your own OIDC provider.](https://www.better-auth.com/docs/plugins/oidc-provider) [**Bearer Token Authentication** \\
Authenticate API requests using Bearer tokens instead of browser cookies](https://www.better-auth.com/docs/plugins/bearer)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/sso#installation) [Add Plugin to the server](https://www.better-auth.com/docs/plugins/sso#add-plugin-to-the-server) [Migrate the database](https://www.better-auth.com/docs/plugins/sso#migrate-the-database) [Add the client plugin](https://www.better-auth.com/docs/plugins/sso#add-the-client-plugin) [Usage](https://www.better-auth.com/docs/plugins/sso#usage) [Register an OIDC Provider](https://www.better-auth.com/docs/plugins/sso#register-an-oidc-provider) [Sign In with SSO](https://www.better-auth.com/docs/plugins/sso#sign-in-with-sso) [Schema](https://www.better-auth.com/docs/plugins/sso#schema) [Options](https://www.better-auth.com/docs/plugins/sso#options) [Server](https://www.better-auth.com/docs/plugins/sso#server)# V1.0 - nov.22

We are excited to announce the Better Auth V1.0 release.

## What does V1 means?

Since introducing Better Auth, the community's excitement has been incredibly motivating—thank you!

V1 is an important milestone, but it simply means we believe you can use it in production and that we'll strive to keep the APIs stable until the next major version. However, we'll continue improving, adding new features, and fixing bugs at the same pace as before.

If you were using Better Auth for production, we recommend updating to V1 as soon as possible. There are some breaking changes, feel free to join us on [Discord](https://discord.gg/GYC3W7tZzb), and we'll gladly assist.

### Install Latest

`npm i better-auth@latest`

Get the latest [Node.js and npm](https://beta.better-auth.com/v1#).

### Adopt the new Schema

`pnpx @better-auth/cli migrate
`

Ensure you have the latest `schema required` by Better Auth. `You can also` add them manually. Read the [Core Schema](https://beta.better-auth.com/docs/concepts/database#core-schema) for full instructions.

### Check out the change log, the new UI Builder, OpenAPI Docs, and more

We have some exciting new features and updates that you should check out.

[Star on GitHub](https://github.com/better-auth/better-auth) [Join Discord](https://discord.gg/GYC3W7tZzb)

## Changelog

### 1.0.0

2024

- feat: Open API Docs
- docs: Sign In Box Builder
- feat: default memory adapter. If no database is provided, it will use memory adapter
- feat: New server only endpoints for Organization and Two Factor plugins
- refactor: all core tables now have \`createdAt\` and \`updatedAt\` fields
- refactor: accounts now store \`expiresAt\` for both refresh and access tokens
- feat: Email OTP forget password flow
- docs: NextAuth.js migration guide
- feat: sensitive endpoints now check for fresh tokens
- feat: two-factor now have different interface for redirect and callback
- and a lot more bug fixes and improvements...Docs

On this pageInstallation

# Organization

Organizations simplifies user access and permissions management. Assign roles and permissions to streamline project management, team coordination, and partnerships.

## [Installation](https://beta.better-auth.com/docs/plugins/organization\#installation)

### [Add the plugin to your **auth** config](https://beta.better-auth.com/docs/plugins/organization\#add-the-plugin-to-your-auth-config)

auth.ts

```
import { betterAuth } from "better-auth"
import { organization } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [\
        organization()\
    ]
})
```

### [Migrate the database](https://beta.better-auth.com/docs/plugins/organization\#migrate-the-database)

Run the migration or generate the schema to add the necessary fields and tables to the database.

migrategenerate

```
npx @better-auth/cli migrate
```

See the [Schema](https://beta.better-auth.com/docs/plugins/organization#schema) section to add the fields manually.

### [Add the client plugin](https://beta.better-auth.com/docs/plugins/organization\#add-the-client-plugin)

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
import { organizationClient } from "better-auth/client/plugins"

const client = createAuthClient({
    plugins: [\
        organizationClient()\
    ]
})
```

## [Usage](https://beta.better-auth.com/docs/plugins/organization\#usage)

Once you've installed the plugin, you can start using the organization plugin to manage your organization's members and teams. The client plugin will provide you methods under the `organization` namespace. And the server `api` will provide you with the necessary endpoints to manage your organization and gives you easier way to call the functions on your own backend.

## [Organization](https://beta.better-auth.com/docs/plugins/organization\#organization)

### [Create an organization](https://beta.better-auth.com/docs/plugins/organization\#create-an-organization)

To create an organization, you need to provide:

- `name`: The name of the organization.
- `slug`: The slug of the organization.
- `logo`: The logo of the organization. (Optional)

auth-client.ts

```
await authClient.organization.create({
    name: "My Organization",
    slug: "my-org",
    logo: "https://example.com/logo.png"
})
```

#### [Restrict who can create an organization](https://beta.better-auth.com/docs/plugins/organization\#restrict-who-can-create-an-organization)

By default, any user can create an organization. To restrict this, set the `allowUserToCreateOrganization` option to a function that returns a boolean, or directly to `true` or `false`.

auth.ts

```
import { betterAuth } from "better-auth"
import { organization } from "better-auth/plugins"

const auth = betterAuth({
    //...
    plugins: [\
        organization({\
            allowUserToCreateOrganization: async (user) => {\
                const subscription = await getSubscription(user.id)\
                return subscription.plan === "pro"\
            }\
        })\
    ]
})
```

#### [Check if organization slug is taken](https://beta.better-auth.com/docs/plugins/organization\#check-if-organization-slug-is-taken)

To check if an organization slug is taken or not you can use the `checkSlug` function provided by the client. The function takes an object with the following properties:

- `slug`: The slug of the organization.

auth-client.ts

```
await authClient.organization.checkSlug({
    slug: "my-org",
});
```

### [List User's Organizations](https://beta.better-auth.com/docs/plugins/organization\#list-users-organizations)

To list the organizations that a user is a member of, you can use `useListOrganizations` hook. It implements a reactive way to get the organizations that the user is a member of.

ReactVueSvelte

client.tsx

```
import { client } from "@/auth/client"

function App(){
    const { data: organizations } = client.useListOrganizations()
    return (
        <div>
            {organizations.map(org => <p>{org.name}</p>)}
        </div>
    )
}
```

### [Active Organization](https://beta.better-auth.com/docs/plugins/organization\#active-organization)

Active organization is the workspace the user is currently working on. By default when the user is signed in the active organization is set to `null`. You can set the active organization to the user session.

It's not always you want to persist the active organization in the session. You can manage the active organization in the client side only. For example, multiple tabs can have different active organizations.

#### [Set Active Organization](https://beta.better-auth.com/docs/plugins/organization\#set-active-organization)

You can set the active organization by calling the `organization.setActive` function. It'll set the active organization for the user session.

clientserver

auth-client.ts

```
import { client } from "@/lib/auth-client";

await authClient.organization.setActive({
  organizationId: "organization-id"
})

// you can also use organizationSlug instead of organizationId
authClient.organization.setActive({
  organizationSlug: "organization-slug"
})
```

To set active organization when a session is created you can use [database hooks](https://beta.better-auth.com/docs/concepts/database#database-hooks).

auth.ts

```
export const auth = betterAuth({
  databaseHooks: {
      session: {
          create: {
              before: async(session)=>{
                  const organization = await getActiveOrganization(session.userId)
                  return {
                    data: {
                      ...session,
                      activeOrganizationId: organization.id
                    }
                  }
              }
          }
      }
  }
})
```

#### [Use Active Organization](https://beta.better-auth.com/docs/plugins/organization\#use-active-organization)

To retrieve the active organization for the user, you can call the `useActiveOrganization` hook. It returns the active organization for the user. Whenever the active organization changes, the hook will re-evaluate and return the new active organization.

ReactVueSvelte

client.tsx

```
import { client } from "@/auth/client"

function App(){
    const { data: activeOrganization } = client.useActiveOrganization()
    return (
        <div>
            {activeOrganization ? <p>{activeOrganization.name}</p> : null}
        </div>
    )
}
```

### [Get Full Organization](https://beta.better-auth.com/docs/plugins/organization\#get-full-organization)

To get the full details of an organization, you can use the `getFullOrganization` function provided by the client. The function takes an object with the following properties:

- `organizationId`: The id of the organization. (Optional) – By default, it will use the active organization.
- `organizationSlug`: The slug of the organization. (Optional) – To get the organization by slug.

clientserver

auth-client.ts

```
const organization = await authClient.organization.getFullOrganization({
    organizationId: "organization-id" // optional, by default it will use the active organization
})
//you can also use organizationSlug instead of organizationId
const organization = await authClient.organization.getFullOrganization({
    organizationSlug: "organization-slug"
})
```

### [Update Organization](https://beta.better-auth.com/docs/plugins/organization\#update-organization)

To update organization info, you can use `organization.update`

```
await client.organization.update({
  data: {
    name: "updated-name",
    logo: "new-logo.url",
    metadata: {
      customerId: "test"
    },
    slug: "updated-slug"
  },
  organizationId: 'org-id' //defaults to the current active organization
})
```

### [Delete Organization](https://beta.better-auth.com/docs/plugins/organization\#delete-organization)

To remove user owned organization, you can use `organization.delete`

org.ts

```
await authClient.organization.delete({
  organizationId: "test"
});
```

If the user has the necessary permissions (by default: role is owner) in the specified organization, all members, invitations and organization information will be removed.

You can configure how organization deletion is handled through `organizationDeletion` option:

```
const auth = betterAuth({
  organizationDeletion: {
    disabled: true, //to disable it altogether
    beforeDelete: async(data, request)=>{
      // a callback to run before deleting org
    },
    afterDelete: async(data, request)=>{
      // a callback to run after deleting org
    }
  }
})
```

## [Invitations](https://beta.better-auth.com/docs/plugins/organization\#invitations)

To add a member to an organization, we first need to send an invitation to the user. The user will receive an email/sms with the invitation link. Once the user accepts the invitation, they will be added to the organization.

### [Setup Invitation Email](https://beta.better-auth.com/docs/plugins/organization\#setup-invitation-email)

For member invitation to work we first need to provider `sendInvitationEmail` to the `better-auth` instance. This function is responsible for sending the invitation email to the user.

You'll need to construct and send the invitation link to the user. The link should include the invitation ID, which will be used with the acceptInvitation function when the user clicks on it.

auth.ts

```
import { betterAuth } from "better-auth"
import { organization } from "better-auth/plugins"
import { sendOrganizationInvitation } from "./email"
export const auth = betterAuth({
	plugins: [\
		organization({\
			async sendInvitationEmail(data) {\
                const inviteLink = `https://example.com/accept-invitation/${data.id}`\
				sendOrganizationInvitation({\
					    email: data.email,\
						invitedByUsername: data.inviter.user.name,\
						invitedByEmail: data.inviter.user.email,\
						teamName: data.organization.name,\
						inviteLink\
					})\
			},\
		}),\
	],
});
```

### [Send Invitation](https://beta.better-auth.com/docs/plugins/organization\#send-invitation)

To invite users to an organization, you can use the `invite` function provided by the client. The `invite` function takes an object with the following properties:

- `email`: The email address of the user.
- `role`: The role of the user in the organization. It can be `admin`, `member`, or `guest`.
- `organizationId`: The id of the organization. this is optional by default it will use the active organization. (Optional)

invitation.ts

```
await authClient.organization.inviteMember({
    email: "test@email.com",
    role: "admin", //this can also be an array for multiple roles (e.g. ["admin", "sale"])
})
```

### [Accept Invitation](https://beta.better-auth.com/docs/plugins/organization\#accept-invitation)

When a user receives an invitation email, they can click on the invitation link to accept the invitation. The invitation link should include the invitation ID, which will be used to accept the invitation.

Make sure to call the `acceptInvitation` function after the user is logged in.

auth-client.ts

```
await authClient.organization.acceptInvitation({
    invitationId: "invitation-id"
})
```

### [Update Invitation Status](https://beta.better-auth.com/docs/plugins/organization\#update-invitation-status)

To update the status of invitation you can use the `acceptInvitation`, `cancelInvitation`, `rejectInvitation` functions provided by the client. The functions take the invitation id as an argument.

auth-client.ts

```
//cancel invitation
await authClient.organization.cancelInvitation({
    invitationId: "invitation-id"
})

//reject invitation (needs to be called when the user who received the invitation is logged in)
await authClient.organization.rejectInvitation({
    invitationId: "invitation-id"
})
```

### [Get Invitation](https://beta.better-auth.com/docs/plugins/organization\#get-invitation)

To get an invitation you can use the `getInvitation` function provided by the client. You need to provide the invitation id as a query parameter.

auth-client.ts

```
client.organization.getInvitation({
    query: {
        id: params.id
    }
})
```

## [Members](https://beta.better-auth.com/docs/plugins/organization\#members)

### [Remove Member](https://beta.better-auth.com/docs/plugins/organization\#remove-member)

To remove you can use `organization.removeMember`

auth-client.ts

```
//remove member
await authClient.organization.removeMember({
    memberId: "member-id"
})
```

### [Update Member Role](https://beta.better-auth.com/docs/plugins/organization\#update-member-role)

To update the role of a member in an organization, you can use the `organization.updateMemberRole`. If the user has the permission to update the role of the member, the role will be updated.

auth-client.ts

```
await authClient.organization.updateMemberRole({
    memberId: "member-id",
    role: "admin" // this can also be an array for multiple roles (e.g. ["admin", "sale"])
})
```

### [Get Active Member](https://beta.better-auth.com/docs/plugins/organization\#get-active-member)

To get the current member of the organization you can use the `organization.getActiveMember` function. This function will return the current active member.

auth-client.ts

```
const member = await authClient.organization.getActiveMember()
```

### [Add Member](https://beta.better-auth.com/docs/plugins/organization\#add-member)

If you want to add a member directly to an organization without sending an invitation, you can use the `addMember` function which can only be invoked on the server.

api.ts

```
import { auth } from "@/auth";

auth.api.addMember({
  body: {
      userId: "user-id",
      organizationId: "organization-id",
      role: "admin"
  }
})
```

### [Leave Organization](https://beta.better-auth.com/docs/plugins/organization\#leave-organization)

To leave organization you can use `organization.leave` function. This function will remove the current user from the organization.

auth-client.ts

```
await authClient.organization.leave({
    organizationId: "organization-id"
})
```

## [Access Control](https://beta.better-auth.com/docs/plugins/organization\#access-control)

The organization plugin providers a very flexible access control system. You can control the access of the user based on the role they have in the organization. You can define your own set of permissions based on the role of the user.

### [Roles](https://beta.better-auth.com/docs/plugins/organization\#roles)

By default, there are three roles in the organization:

`owner`: The user who created the organization by default. The owner has full control over the organization and can perform any action.

`admin`: Users with the admin role have full control over the organization except for deleting the organization or changing the owner.

`member`: Users with the member role have limited control over the organization. They can create projects, invite users, and manage projects they have created.

A user can have multiple roles. Multiple roles are stored as string separated by comma (",").

### [Permissions](https://beta.better-auth.com/docs/plugins/organization\#permissions)

By default, there are three resources, and these have two to three actions.

**organization**:

`update` `delete`

**member**:

`create` `update` `delete`

**invitation**:

`create` `cancel`

The owner have full control over all the resources and actions. The admin have full control over all the resources except for deleting the organization or changing the owner. The member have no control over any of those action other than reading the data.

### [Custom Permissions](https://beta.better-auth.com/docs/plugins/organization\#custom-permissions)

the plugin providers easy way to define your own set of permission for each role.

#### [Create Access Control](https://beta.better-auth.com/docs/plugins/organization\#create-access-control)

You first need to create access controller by calling `createAccessControl` function and passing the statement object. The statement object should have the resource name as the key and the array of actions as the value.

permissions.ts

```
import { createAccessControl } from "better-auth/plugins/access";

/**
 * make sure to use `as const` so typescript can infer the type correctly
 */
const statement = {
    project: ["create", "share", "update", "delete"],
} as const;

const ac = createAccessControl(statement);
```

#### [Create Roles](https://beta.better-auth.com/docs/plugins/organization\#create-roles)

Once you have created the access controller you can create roles with the permissions you have defined.

permissions.ts

```
import { createAccessControl } from "better-auth/plugins/access";

const statement = {
    project: ["create", "share", "update", "delete"],
} as const;

const ac = createAccessControl(statement);

const member = ac.newRole({
    project: ["create"],
});

const admin = ac.newRole({
    project: ["create", "update"],
});

const owner = ac.newRole({
    project: ["create", "update", "delete"],
});

const myCustomRole = ac.newRole({
    project: ["create", "update", "delete"],
    organization: ["update"],
});
```

When you create custom roles for existing roles, the predefined permissions for those roles will be overridden. To add the existing permissions to the custom role, you need to import `defaultStatement` and merge it with your new statement, plus merge the roles' permissions set with the default roles.

permissions.ts

```
import { createAccessControl, defaultStatements, adminAc } from "better-auth/plugins/access";

const statement = {
    ...defaultStatements,
    project: ["create", "share", "update", "delete"],
} as const;

const ac = createAccessControl(statement);

const admin = ac.newRole({
    project: ["create", "update"],
    ...adminAc.statements,
});
```

#### [Pass Roles to the Plugin](https://beta.better-auth.com/docs/plugins/organization\#pass-roles-to-the-plugin)

Once you have created the roles you can pass them to the organization plugin both on the client and the server.

auth.ts

```
import { ac, owner, admin, member } from "@/auth/permissions"
import { betterAuth } from "better-auth"
import { organization } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [\
        organization({\
            ac: ac,\
            roles: {\
                owner,\
                admin,\
                member,\
                myCustomRole\
            }\
        }),\
    ],
});
```

You also need to pass the access controller and the roles to the client plugin.

auth-client

```
import { createAuthClient } from "better-auth/client"
import { organizationClient } from "better-auth/client/plugins"
import { ac } from "@/auth/permissions"

export const client = createAuthClient({
    plugins: [\
        organizationClient({\
            ac: ac,\
            roles: {\
                owner,\
                admin,\
                member,\
                myCustomRole\
            }\
        })\
    ]
})
```

### [Access Control Usage](https://beta.better-auth.com/docs/plugins/organization\#access-control-usage)

**Has Permission**:

You can use the `hasPermission` action provided by the `api` to check the permission of the user.

api.ts

```
import { auth } from "@/auth";
    auth.api.hasPermission({
        headers: await headers(),
        body: {
            permission: {
                project: ["create"] // This must match the structure in your access control
            }
        }
    });
```

If you want to check the permission of the user on the client from the server you can use the `hasPermission` function provided by the client.

auth-client.ts

```
const canCreateProject = await authClient.organization.hasPermission({
    permission: {
        project: ["create"]
    }
})
```

**Check Role Permission**:

Once you have defined the roles and permissions to avoid checking the permission from the server you can use the `checkRolePermission` function provided by the client.

auth-client.ts

```
const canCreateProject = client.organization.checkRolePermission({
	permission: {
		organization: ["delete"],
	},
	role: "admin",
});
```

## [Schema](https://beta.better-auth.com/docs/plugins/organization\#schema)

The organization plugin adds the following tables to the database:

### [Organization](https://beta.better-auth.com/docs/plugins/organization\#organization-1)

Table Name: `organization`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | Unique identifier for each organization |
| name | string | - | The name of the organization |
| slug | string | - | The slug of the organization |
| logo | string | ? | The logo of the organization |
| metadata | string | ? | Additional metadata for the organization |
| createdAt | Date | - | Timestamp of when the organization was created |

### [Member](https://beta.better-auth.com/docs/plugins/organization\#member)

Table Name: `member`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | Unique identifier for each member |
| userId | string | FK | The id of the user |
| organizationId | string | FK | The id of the organization |
| role | string | - | The role of the user in the organization |
| createdAt | Date | - | Timestamp of when the member was added to the organization |

### [Invitation](https://beta.better-auth.com/docs/plugins/organization\#invitation)

Table Name: `invitation`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | Unique identifier for each invitation |
| email | string | - | The email address of the user |
| inviterId | string | FK | The id of the inviter |
| organizationId | string | FK | The id of the organization |
| role | string | - | The role of the user in the organization |
| status | string | - | The status of the invitation |
| expiresAt | Date | - | Timestamp of when the invitation expires |
| createdAt | Date | - | Timestamp of when the invitation was created |

### [Session](https://beta.better-auth.com/docs/plugins/organization\#session)

Table Name: `session`

You need to add one more field to the session table to store the active organization id.

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| activeOrganizationId | string | ? | The id of the active organization |

### [Customizing the Schema](https://beta.better-auth.com/docs/plugins/organization\#customizing-the-schema)

To change the schema table name or fields, you can pass `schema` option to the organization plugin.

auth.ts

```
const auth = betterAuth({
  plugins: [organization({\
    schema: {\
      organization: {\
        modelName: "organizations",  //map the organization table to organizations\
        fields: {\
          name: "title" //map the name field to title\
        }\
      }\
    }\
  })]
})
```

## [Options](https://beta.better-auth.com/docs/plugins/organization\#options)

**allowUserToCreateOrganization**: `boolean` \| `((user: User) => Promise<boolean> | boolean)` \- A function that determines whether a user can create an organization. By default, it's `true`. You can set it to `false` to restrict users from creating organizations.

**organizationLimit**: `number` \| `((user: User) => Promise<boolean> | boolean)` \- The maximum number of organizations allowed for a user. By default, it's `5`. You can set it to any number you want or a function that returns a boolean.

**creatorRole**: `admin | owner` \- The role of the user who creates the organization. By default, it's `owner`. You can set it to `admin`.

**membershipLimit**: `number` \- The maximum number of members allowed in an organization. By default, it's `100`. You can set it to any number you want.

**sendInvitationEmail**: `async (data) => Promise<void>` \- A function that sends an invitation email to the user.

**invitationExpiresIn** : `number` \- How long the invitation link is valid for in seconds. By default, it's 48 hours (2 days).

[**Admin** \\
Admin plugin for Better Auth](https://beta.better-auth.com/docs/plugins/admin) [**OIDC Provider** \\
Open ID Connect plugin for Better Auth that allows you to have your own OIDC provider.](https://beta.better-auth.com/docs/plugins/oidc-provider)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://beta.better-auth.com/docs/plugins/organization#installation) [Add the plugin to your **auth** config](https://beta.better-auth.com/docs/plugins/organization#add-the-plugin-to-your-auth-config) [Migrate the database](https://beta.better-auth.com/docs/plugins/organization#migrate-the-database) [Add the client plugin](https://beta.better-auth.com/docs/plugins/organization#add-the-client-plugin) [Usage](https://beta.better-auth.com/docs/plugins/organization#usage) [Organization](https://beta.better-auth.com/docs/plugins/organization#organization) [Create an organization](https://beta.better-auth.com/docs/plugins/organization#create-an-organization) [Restrict who can create an organization](https://beta.better-auth.com/docs/plugins/organization#restrict-who-can-create-an-organization) [Check if organization slug is taken](https://beta.better-auth.com/docs/plugins/organization#check-if-organization-slug-is-taken) [List User's Organizations](https://beta.better-auth.com/docs/plugins/organization#list-users-organizations) [Active Organization](https://beta.better-auth.com/docs/plugins/organization#active-organization) [Set Active Organization](https://beta.better-auth.com/docs/plugins/organization#set-active-organization) [Use Active Organization](https://beta.better-auth.com/docs/plugins/organization#use-active-organization) [Get Full Organization](https://beta.better-auth.com/docs/plugins/organization#get-full-organization) [Update Organization](https://beta.better-auth.com/docs/plugins/organization#update-organization) [Delete Organization](https://beta.better-auth.com/docs/plugins/organization#delete-organization) [Invitations](https://beta.better-auth.com/docs/plugins/organization#invitations) [Setup Invitation Email](https://beta.better-auth.com/docs/plugins/organization#setup-invitation-email) [Send Invitation](https://beta.better-auth.com/docs/plugins/organization#send-invitation) [Accept Invitation](https://beta.better-auth.com/docs/plugins/organization#accept-invitation) [Update Invitation Status](https://beta.better-auth.com/docs/plugins/organization#update-invitation-status) [Get Invitation](https://beta.better-auth.com/docs/plugins/organization#get-invitation) [Members](https://beta.better-auth.com/docs/plugins/organization#members) [Remove Member](https://beta.better-auth.com/docs/plugins/organization#remove-member) [Update Member Role](https://beta.better-auth.com/docs/plugins/organization#update-member-role) [Get Active Member](https://beta.better-auth.com/docs/plugins/organization#get-active-member) [Add Member](https://beta.better-auth.com/docs/plugins/organization#add-member) [Leave Organization](https://beta.better-auth.com/docs/plugins/organization#leave-organization) [Access Control](https://beta.better-auth.com/docs/plugins/organization#access-control) [Roles](https://beta.better-auth.com/docs/plugins/organization#roles) [Permissions](https://beta.better-auth.com/docs/plugins/organization#permissions) [Custom Permissions](https://beta.better-auth.com/docs/plugins/organization#custom-permissions) [Create Access Control](https://beta.better-auth.com/docs/plugins/organization#create-access-control) [Create Roles](https://beta.better-auth.com/docs/plugins/organization#create-roles) [Pass Roles to the Plugin](https://beta.better-auth.com/docs/plugins/organization#pass-roles-to-the-plugin) [Access Control Usage](https://beta.better-auth.com/docs/plugins/organization#access-control-usage) [Schema](https://beta.better-auth.com/docs/plugins/organization#schema) [Organization](https://beta.better-auth.com/docs/plugins/organization#organization-1) [Member](https://beta.better-auth.com/docs/plugins/organization#member) [Invitation](https://beta.better-auth.com/docs/plugins/organization#invitation) [Session](https://beta.better-auth.com/docs/plugins/organization#session) [Customizing the Schema](https://beta.better-auth.com/docs/plugins/organization#customizing-the-schema) [Options](https://beta.better-auth.com/docs/plugins/organization#options)Docs

On this pageInstallation

# Organization

Organizations simplifies user access and permissions management. Assign roles and permissions to streamline project management, team coordination, and partnerships.

## [Installation](https://www.better-auth.com/docs/plugins/organization\#installation)

### [Add the plugin to your **auth** config](https://www.better-auth.com/docs/plugins/organization\#add-the-plugin-to-your-auth-config)

auth.ts

```
import { betterAuth } from "better-auth"
import { organization } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [\
        organization()\
    ]
})
```

### [Migrate the database](https://www.better-auth.com/docs/plugins/organization\#migrate-the-database)

Run the migration or generate the schema to add the necessary fields and tables to the database.

migrategenerate

```
npx @better-auth/cli migrate
```

See the [Schema](https://www.better-auth.com/docs/plugins/organization#schema) section to add the fields manually.

### [Add the client plugin](https://www.better-auth.com/docs/plugins/organization\#add-the-client-plugin)

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
import { organizationClient } from "better-auth/client/plugins"

const client = createAuthClient({
    plugins: [\
        organizationClient()\
    ]
})
```

## [Usage](https://www.better-auth.com/docs/plugins/organization\#usage)

Once you've installed the plugin, you can start using the organization plugin to manage your organization's members and teams. The client plugin will provide you methods under the `organization` namespace. And the server `api` will provide you with the necessary endpoints to manage your organization and gives you easier way to call the functions on your own backend.

## [Organization](https://www.better-auth.com/docs/plugins/organization\#organization)

### [Create an organization](https://www.better-auth.com/docs/plugins/organization\#create-an-organization)

To create an organization, you need to provide:

- `name`: The name of the organization.
- `slug`: The slug of the organization.
- `logo`: The logo of the organization. (Optional)

auth-client.ts

```
await authClient.organization.create({
    name: "My Organization",
    slug: "my-org",
    logo: "https://example.com/logo.png"
})
```

#### [Restrict who can create an organization](https://www.better-auth.com/docs/plugins/organization\#restrict-who-can-create-an-organization)

By default, any user can create an organization. To restrict this, set the `allowUserToCreateOrganization` option to a function that returns a boolean, or directly to `true` or `false`.

auth.ts

```
import { betterAuth } from "better-auth"
import { organization } from "better-auth/plugins"

const auth = betterAuth({
    //...
    plugins: [\
        organization({\
            allowUserToCreateOrganization: async (user) => {\
                const subscription = await getSubscription(user.id)\
                return subscription.plan === "pro"\
            }\
        })\
    ]
})
```

### [List User's Organizations](https://www.better-auth.com/docs/plugins/organization\#list-users-organizations)

To list the organizations that a user is a member of, you can use `useListOrganizations` hook. It implements a reactive way to get the organizations that the user is a member of.

ReactVueSvelte

client.tsx

```
import { client } from "@/auth/client"

function App(){
    const { data: organizations } = client.useListOrganizations()
    return (
        <div>
            {organizations.map(org => <p>{org.name}</p>)}
        </div>
    )
}
```

### [Active Organization](https://www.better-auth.com/docs/plugins/organization\#active-organization)

Active organization is the workspace the user is currently working on. By default when the user is signed in the active organization is set to `null`. You can set the active organization to the user session.

It's not always you want to persist the active organization in the session. You can manage the active organization in the client side only. For example, multiple tabs can have different active organizations.

#### [Set Active Organization](https://www.better-auth.com/docs/plugins/organization\#set-active-organization)

You can set the active organization by calling the `organization.setActive` function. It'll set the active organization for the user session.

clientserver

auth-client.ts

```
import { client } from "@/lib/auth-client";

await authClient.organization.setActive({
  organizationId: "organization-id"
})

// you can also use organizationSlug instead of organizationId
authClient.organization.setActive({
  organizationSlug: "organization-slug"
})
```

To set active organization when a session is created you can use [database hooks](https://www.better-auth.com/docs/concepts/database#database-hooks).

auth.ts

```
export const auth = betterAuth({
  databaseHooks: {
      session: {
          create: {
              before: async(session)=>{
                  const organization = await getActiveOrganization(session.userId)
                  return {
                    data: {
                      ...session,
                      activeOrganizationId: organization.id
                    }
                  }
              }
          }
      }
  }
})
```

#### [Use Active Organization](https://www.better-auth.com/docs/plugins/organization\#use-active-organization)

To retrieve the active organization for the user, you can call the `useActiveOrganization` hook. It returns the active organization for the user. Whenever the active organization changes, the hook will re-evaluate and return the new active organization.

ReactVueSvelte

client.tsx

```
import { client } from "@/auth/client"

function App(){
    const { data: activeOrganization } = client.useActiveOrganization()
    return (
        <div>
            {activeOrganization ? <p>{activeOrganization.name}</p> : null}
        </div>
    )
}
```

### [Get Full Organization](https://www.better-auth.com/docs/plugins/organization\#get-full-organization)

To get the full details of an organization, you can use the `getFullOrganization` function provided by the client. The function takes an object with the following properties:

- `organizationId`: The id of the organization. (Optional) – By default, it will use the active organization.
- `organizationSlug`: The slug of the organization. (Optional) – To get the organization by slug.

clientserver

auth-client.ts

```
const organization = await authClient.organization.getFullOrganization({
    organizationId: "organization-id" // optional, by default it will use the active organization
})
//you can also use organizationSlug instead of organizationId
const organization = await authClient.organization.getFullOrganization({
    organizationSlug: "organization-slug"
})
```

### [Update Organization](https://www.better-auth.com/docs/plugins/organization\#update-organization)

To update organization info, you can use `organization.update`

```
await client.organization.update({
  data: {
    name: "updated-name",
    logo: "new-logo.url",
    metadata: {
      customerId: "test"
    },
    slug: "updated-slug"
  },
  organizationId: 'org-id' //defaults to the current active organization
})
```

### [Delete Organization](https://www.better-auth.com/docs/plugins/organization\#delete-organization)

To remove user owned organization, you can use `organization.delete`

org.ts

```
await authClient.organization.delete({
  organizationId: "test"
});
```

If the user has the necessary permissions (by default: role is owner) in the specified organization, all members, invitations and organization information will be removed.

You can configure how organization deletion is handled through `organizationDeletion` option:

```
const auth = betterAuth({
  organizationDeletion: {
    disabled: true, //to disable it altogether
    beforeDelete: async(data, request)=>{
      // a callback to run before deleting org
    },
    afterDelete: async(data, request)=>{
      // a callback to run after deleting org
    }
  }
})
```

## [Invitations](https://www.better-auth.com/docs/plugins/organization\#invitations)

To add a member to an organization, we first need to send an invitation to the user. The user will receive an email/sms with the invitation link. Once the user accepts the invitation, they will be added to the organization.

### [Setup Invitation Email](https://www.better-auth.com/docs/plugins/organization\#setup-invitation-email)

For member invitation to work we first need to provider `sendInvitationEmail` to the `better-auth` instance. This function is responsible for sending the invitation email to the user.

You'll need to construct and send the invitation link to the user. The link should include the invitation ID, which will be used with the acceptInvitation function when the user clicks on it.

auth.ts

```
import { betterAuth } from "better-auth"
import { organization } from "better-auth/plugins"
import { sendOrganizationInvitation } from "./email"
export const auth = betterAuth({
	plugins: [\
		organization({\
			async sendInvitationEmail(data) {\
                const inviteLink = `https://example.com/accept-invitation/${data.id}`\
				sendOrganizationInvitation({\
					    email: data.email,\
						invitedByUsername: data.inviter.user.name,\
						invitedByEmail: data.inviter.user.email,\
						teamName: data.organization.name,\
						inviteLink\
					})\
			},\
		}),\
	],
});
```

### [Send Invitation](https://www.better-auth.com/docs/plugins/organization\#send-invitation)

To invite users to an organization, you can use the `invite` function provided by the client. The `invite` function takes an object with the following properties:

- `email`: The email address of the user.
- `role`: The role of the user in the organization. It can be `admin`, `member`, or `guest`.
- `organizationId`: The id of the organization. this is optional by default it will use the active organization. (Optional)

invitation.ts

```
await authClient.organization.inviteMember({
    email: "test@email.com",
    role: "admin",
})
```

### [Accept Invitation](https://www.better-auth.com/docs/plugins/organization\#accept-invitation)

When a user receives an invitation email, they can click on the invitation link to accept the invitation. The invitation link should include the invitation ID, which will be used to accept the invitation.

Make sure to call the `acceptInvitation` function after the user is logged in.

auth-client.ts

```
await authClient.organization.acceptInvitation({
    invitationId: "invitation-id"
})
```

### [Update Invitation Status](https://www.better-auth.com/docs/plugins/organization\#update-invitation-status)

To update the status of invitation you can use the `acceptInvitation`, `cancelInvitation`, `rejectInvitation` functions provided by the client. The functions take the invitation id as an argument.

auth-client.ts

```
//cancel invitation
await authClient.organization.cancelInvitation({
    invitationId: "invitation-id"
})

//reject invitation (needs to be called when the user who received the invitation is logged in)
await authClient.organization.rejectInvitation({
    invitationId: "invitation-id"
})
```

### [Get Invitation](https://www.better-auth.com/docs/plugins/organization\#get-invitation)

To get an invitation you can use the `getInvitation` function provided by the client. You need to provide the invitation id as a query parameter.

auth-client.ts

```
client.organization.getInvitation({
    query: {
        id: params.id
    }
})
```

## [Members](https://www.better-auth.com/docs/plugins/organization\#members)

### [Remove Member](https://www.better-auth.com/docs/plugins/organization\#remove-member)

To remove you can use `organization.removeMember`

auth-client.ts

```
//remove member
await authClient.organization.removeMember({
    memberId: "member-id"
})
```

### [Update Member Role](https://www.better-auth.com/docs/plugins/organization\#update-member-role)

To update the role of a member in an organization, you can use the `organization.updateMemberRole`. If the user has the permission to update the role of the member, the role will be updated.

auth-client.ts

```
await authClient.organization.updateMemberRole({
    memberId: "member-id",
    role: "admin"
})
```

### [Get Active Member](https://www.better-auth.com/docs/plugins/organization\#get-active-member)

To get the current member of the organization you can use the `organization.getActiveMember` function. This function will return the current active member.

auth-client.ts

```
const member = await authClient.organization.getActiveMember()
```

### [Add Member](https://www.better-auth.com/docs/plugins/organization\#add-member)

If you want to add a member directly to an organization without sending an invitation, you can use the `addMember` function which can only be invoked on the server.

api.ts

```
import { auth } from "@/auth";

auth.api.addMember({
  body: {
      userId: "user-id",
      organizationId: "organization-id",
      role: "admin"
  }
})
```

### [Leave Organization](https://www.better-auth.com/docs/plugins/organization\#leave-organization)

To leave organization you can use `organization.leave` function. This function will remove the current user from the organization.

auth-client.ts

```
await authClient.organization.leave({
    organizationId: "organization-id"
})
```

## [Access Control](https://www.better-auth.com/docs/plugins/organization\#access-control)

The organization plugin providers a very flexible access control system. You can control the access of the user based on the role they have in the organization. You can define your own set of permissions based on the role of the user.

### [Roles](https://www.better-auth.com/docs/plugins/organization\#roles)

By default, there are three roles in the organization:

`owner`: The user who created the organization by default. The owner has full control over the organization and can perform any action.

`admin`: Users with the admin role have full control over the organization except for deleting the organization or changing the owner.

`member`: Users with the member role have limited control over the organization. They can create projects, invite users, and manage projects they have created.

### [Permissions](https://www.better-auth.com/docs/plugins/organization\#permissions)

By default, there are three resources, and these have two to three actions.

**organization**:

`update` `delete`

**member**:

`create` `update` `delete`

**invitation**:

`create` `cancel`

The owner have full control over all the resources and actions. The admin have full control over all the resources except for deleting the organization or changing the owner. The member have no control over any of those action other than reading the data.

### [Custom Permissions](https://www.better-auth.com/docs/plugins/organization\#custom-permissions)

the plugin providers easy way to define your own set of permission for each role.

#### [Create Access Control](https://www.better-auth.com/docs/plugins/organization\#create-access-control)

You first need to create access controller by calling `createAccessControl` function and passing the statement object. The statement object should have the resource name as the key and the array of actions as the value.

permissions.ts

```
import { createAccessControl } from "better-auth/plugins/access";

/**
 * make sure to use `as const` so typescript can infer the type correctly
 */
const statement = {
    project: ["create", "share", "update", "delete"],
} as const;

const ac = createAccessControl(statement);
```

#### [Create Roles](https://www.better-auth.com/docs/plugins/organization\#create-roles)

Once you have created the access controller you can create roles with the permissions you have defined.

permissions.ts

```
import { createAccessControl } from "better-auth/plugins/access";

const statement = {
    project: ["create", "share", "update", "delete"],
} as const;

const ac = createAccessControl(statement);

const member = ac.newRole({
    project: ["create"],
});

const admin = ac.newRole({
    project: ["create", "update"],
});

const owner = ac.newRole({
    project: ["create", "update", "delete"],
});

const myCustomRole = ac.newRole({
    project: ["create", "update", "delete"],
    organization: ["update"],
});
```

When you create custom roles for existing roles, the predefined permissions for those roles will be overridden. To add the existing permissions to the custom role, you need to import `defaultStatement` and merge it with your new statement, plus merge the roles' permissions set with the default roles.

permissions.ts

```
import { createAccessControl, defaultStatements, adminAc } from "better-auth/plugins/access";

const statement = {
    ...defaultStatements,
    project: ["create", "share", "update", "delete"],
} as const;

const ac = createAccessControl(statement);

const admin = ac.newRole({
    project: ["create", "update"],
    ...adminAc.statements,
});
```

#### [Pass Roles to the Plugin](https://www.better-auth.com/docs/plugins/organization\#pass-roles-to-the-plugin)

Once you have created the roles you can pass them to the organization plugin both on the client and the server.

auth.ts

```
import { ac, owner, admin, member } from "@/auth/permissions"
import { betterAuth } from "better-auth"
import { organization } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [\
        organization({\
            ac: ac,\
            roles: {\
                owner,\
                admin,\
                member,\
                myCustomRole\
            }\
        }),\
    ],
});
```

You also need to pass the access controller and the roles to the client plugin.

auth-client

```
import { createAuthClient } from "better-auth/client"
import { organizationClient } from "better-auth/client/plugins"
import { ac } from "@/auth/permissions"

export const client = createAuthClient({
    plugins: [\
        organizationClient({\
            ac: ac,\
            roles: {\
                owner,\
                admin,\
                member,\
                myCustomRole\
            }\
        })\
    ]
})
```

### [Access Control Usage](https://www.better-auth.com/docs/plugins/organization\#access-control-usage)

**Has Permission**:

You can use the `hasPermission` action provided by the `api` to check the permission of the user.

api.ts

```
import { auth } from "@/auth";
    auth.api.hasPermission({
        headers: await headers(),
        body: {
            permission: {
                project: ["create"] // This must match the structure in your access control
            }
        }
    });
```

If you want to check the permission of the user on the client from the server you can use the `hasPermission` function provided by the client.

auth-client.ts

```
const canCreateProject = await authClient.organization.hasPermission({
    permission: {
        project: ["create"]
    }
})
```

**Check Role Permission**:

Once you have defined the roles and permissions to avoid checking the permission from the server you can use the `checkRolePermission` function provided by the client.

auth-client.ts

```
const canCreateProject = client.organization.checkRolePermission({
	permission: {
		organization: ["delete"],
	},
	role: "admin",
});
```

## [Schema](https://www.better-auth.com/docs/plugins/organization\#schema)

The organization plugin adds the following tables to the database:

### [Organization](https://www.better-auth.com/docs/plugins/organization\#organization-1)

Table Name: `organization`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | Unique identifier for each organization |
| name | string | - | The name of the organization |
| slug | string | - | The slug of the organization |
| logo | string | ? | The logo of the organization |
| metadata | string | ? | Additional metadata for the organization |
| createdAt | Date | - | Timestamp of when the organization was created |

### [Member](https://www.better-auth.com/docs/plugins/organization\#member)

Table Name: `member`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | Unique identifier for each member |
| userId | string | FK | The id of the user |
| organizationId | string | FK | The id of the organization |
| role | string | - | The role of the user in the organization |
| createdAt | Date | - | Timestamp of when the member was added to the organization |

### [Invitation](https://www.better-auth.com/docs/plugins/organization\#invitation)

Table Name: `invitation`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | Unique identifier for each invitation |
| email | string | - | The email address of the user |
| inviterId | string | FK | The id of the inviter |
| organizationId | string | FK | The id of the organization |
| role | string | - | The role of the user in the organization |
| status | string | - | The status of the invitation |
| expiresAt | Date | - | Timestamp of when the invitation expires |
| createdAt | Date | - | Timestamp of when the invitation was created |

### [Session](https://www.better-auth.com/docs/plugins/organization\#session)

Table Name: `session`

You need to add one more field to the session table to store the active organization id.

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| activeOrganizationId | string | ? | The id of the active organization |

### [Customizing the Schema](https://www.better-auth.com/docs/plugins/organization\#customizing-the-schema)

To change the schema table name or fields, you can pass `schema` option to the organization plugin.

auth.ts

```
const auth = betterAuth({
  plugins: [organization({\
    schema: {\
      organization: {\
        modelName: "organizations",  //map the organization table to organizations\
        fields: {\
          name: "title" //map the name field to title\
        }\
      }\
    }\
  })]
})
```

## [Options](https://www.better-auth.com/docs/plugins/organization\#options)

**allowUserToCreateOrganization**: `boolean` \| `((user: User) => Promise<boolean> | boolean)` \- A function that determines whether a user can create an organization. By default, it's `true`. You can set it to `false` to restrict users from creating organizations.

**organizationLimit**: `number` \| `((user: User) => Promise<boolean> | boolean)` \- The maximum number of organizations allowed for a user. By default, it's `5`. You can set it to any number you want or a function that returns a boolean.

**creatorRole**: `admin | owner` \- The role of the user who creates the organization. By default, it's `owner`. You can set it to `admin`.

**membershipLimit**: `number` \- The maximum number of members allowed in an organization. By default, it's `100`. You can set it to any number you want.

**sendInvitationEmail**: `async (data) => Promise<void>` \- A function that sends an invitation email to the user.

**invitationExpiresIn** : `number` \- How long the invitation link is valid for in seconds. By default, it's 48 hours (2 days).

[**Admin** \\
Admin plugin for Better Auth](https://www.better-auth.com/docs/plugins/admin) [**OIDC Provider** \\
Open ID Connect plugin for Better Auth that allows you to have your own OIDC provider.](https://www.better-auth.com/docs/plugins/oidc-provider)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/organization#installation) [Add the plugin to your **auth** config](https://www.better-auth.com/docs/plugins/organization#add-the-plugin-to-your-auth-config) [Migrate the database](https://www.better-auth.com/docs/plugins/organization#migrate-the-database) [Add the client plugin](https://www.better-auth.com/docs/plugins/organization#add-the-client-plugin) [Usage](https://www.better-auth.com/docs/plugins/organization#usage) [Organization](https://www.better-auth.com/docs/plugins/organization#organization) [Create an organization](https://www.better-auth.com/docs/plugins/organization#create-an-organization) [Restrict who can create an organization](https://www.better-auth.com/docs/plugins/organization#restrict-who-can-create-an-organization) [List User's Organizations](https://www.better-auth.com/docs/plugins/organization#list-users-organizations) [Active Organization](https://www.better-auth.com/docs/plugins/organization#active-organization) [Set Active Organization](https://www.better-auth.com/docs/plugins/organization#set-active-organization) [Use Active Organization](https://www.better-auth.com/docs/plugins/organization#use-active-organization) [Get Full Organization](https://www.better-auth.com/docs/plugins/organization#get-full-organization) [Update Organization](https://www.better-auth.com/docs/plugins/organization#update-organization) [Delete Organization](https://www.better-auth.com/docs/plugins/organization#delete-organization) [Invitations](https://www.better-auth.com/docs/plugins/organization#invitations) [Setup Invitation Email](https://www.better-auth.com/docs/plugins/organization#setup-invitation-email) [Send Invitation](https://www.better-auth.com/docs/plugins/organization#send-invitation) [Accept Invitation](https://www.better-auth.com/docs/plugins/organization#accept-invitation) [Update Invitation Status](https://www.better-auth.com/docs/plugins/organization#update-invitation-status) [Get Invitation](https://www.better-auth.com/docs/plugins/organization#get-invitation) [Members](https://www.better-auth.com/docs/plugins/organization#members) [Remove Member](https://www.better-auth.com/docs/plugins/organization#remove-member) [Update Member Role](https://www.better-auth.com/docs/plugins/organization#update-member-role) [Get Active Member](https://www.better-auth.com/docs/plugins/organization#get-active-member) [Add Member](https://www.better-auth.com/docs/plugins/organization#add-member) [Leave Organization](https://www.better-auth.com/docs/plugins/organization#leave-organization) [Access Control](https://www.better-auth.com/docs/plugins/organization#access-control) [Roles](https://www.better-auth.com/docs/plugins/organization#roles) [Permissions](https://www.better-auth.com/docs/plugins/organization#permissions) [Custom Permissions](https://www.better-auth.com/docs/plugins/organization#custom-permissions) [Create Access Control](https://www.better-auth.com/docs/plugins/organization#create-access-control) [Create Roles](https://www.better-auth.com/docs/plugins/organization#create-roles) [Pass Roles to the Plugin](https://www.better-auth.com/docs/plugins/organization#pass-roles-to-the-plugin) [Access Control Usage](https://www.better-auth.com/docs/plugins/organization#access-control-usage) [Schema](https://www.better-auth.com/docs/plugins/organization#schema) [Organization](https://www.better-auth.com/docs/plugins/organization#organization-1) [Member](https://www.better-auth.com/docs/plugins/organization#member) [Invitation](https://www.better-auth.com/docs/plugins/organization#invitation) [Session](https://www.better-auth.com/docs/plugins/organization#session) [Customizing the Schema](https://www.better-auth.com/docs/plugins/organization#customizing-the-schema) [Options](https://www.better-auth.com/docs/plugins/organization#options)Docs

On this pageEmail & Password

# Basic Usage

Better Auth provides built-in authentication support for:

- **Email and password**
- **Social provider (Google, GitHub, Apple, and more)**

But also can easily be extended using plugins, such as: [username](https://www.better-auth.com/docs/plugins/username), [magic link](https://www.better-auth.com/docs/plugins/magic-link), [passkey](https://www.better-auth.com/docs/plugins/passkey), [email-otp](https://www.better-auth.com/docs/plugins/email-otp), and more.

## [Email & Password](https://www.better-auth.com/docs/basic-usage\#email--password)

To enable email and password authentication:

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    emailAndPassword: {
        enabled: true
    }
})
```

### [Sign Up](https://www.better-auth.com/docs/basic-usage\#sign-up)

To sign up a user you need to call the client method `signUp.email` with the user's information.

sign-up.ts

```
import { authClient } from "@/lib/auth-client"; //import the auth client

const { data, error } = await authClient.signUp.email({
        email, // user email address
        password, // user password -> min 8 characters by default
        name, // user display name
        image, // user image url (optional)
        callbackURL: "/dashboard" // a url to redirect to after the user verifies their email (optional)
    }, {
        onRequest: (ctx) => {
            //show loading
        },
        onSuccess: (ctx) => {
            //redirect to the dashboard or sign in page
        },
        onError: (ctx) => {
            // display the error message
            alert(ctx.error.message);
        },
});
```

By default, the users are automatically signed in after they successfully sign up. To disable this behavior you can set `autoSignIn` to `false`.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    emailAndPassword: {
    	enabled: true,
    	autoSignIn: false //defaults to true
  },
})
```

### [Sign In](https://www.better-auth.com/docs/basic-usage\#sign-in)

To sign a user in, you can use the `signIn.email` function provided by the client.

sign-in

```
const { data, error } = await authClient.signIn.email({
        /**
         * The user email
         */
        email,
        /**
         * The user password
         */
        password,
        /**
         * a url to redirect to after the user verifies their email (optional)
         */
        callbackURL: "/dashboard",
        /**
         * remember the user session after the browser is closed.
         * @default true
         */
        rememberMe: false
}, {
    //callbacks
})
```

Always invoke client methods from the client side. Don't call them from the server.

### [Server-Side Authentication](https://www.better-auth.com/docs/basic-usage\#server-side-authentication)

To authenticate a user on the server, you can use the `auth.api` methods.

server.ts

```
import { auth } from "./auth"; // path to your Better Auth server instance

const response = await auth.api.signInEmail({
    body: {
        email,
        password
    },
    asResponse: true // returns a response object instead of data
});
```

If the server cannot return a response object, you'll need to manually parse and set cookies. But for frameworks like Next.js we provide [a plugin](https://www.better-auth.com/docs/integrations/next#server-action-cookies) to handle this automatically

## [Social Sign-On](https://www.better-auth.com/docs/basic-usage\#social-sign-on)

Better Auth supports multiple social providers, including Google, GitHub, Apple, Discord, and more. To use a social provider, you need to configure the ones you need in the `socialProviders` option on your `auth` object.

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    socialProviders: {
        github: {
            clientId: process.env.GITHUB_CLIENT_ID!,
            clientSecret: process.env.GITHUB_CLIENT_SECRET!,
        }
    },
})
```

### [Signin with social providers](https://www.better-auth.com/docs/basic-usage\#signin-with-social-providers)

To sign in using a social provider you need to call `signIn.social`. It takes an object with the following properties:

sign-in.ts

```
import { authClient } from "@/lib/auth-client"; //import the auth client

await authClient.signIn.social({
    /**
     * The social provider id
     * @example "github", "google", "apple"
     */
    provider: "github",
    /**
     * a url to redirect after the user authenticates with the provider
     * @default "/"
     */
    callbackURL: "/dashboard",
    /**
     * a url to redirect if an error occurs during the sign in process
     */
    errorCallbackURL: "/error",
    /**
     * a url to redirect if the user is newly registered
     */
    newUserCallbackURL: "/welcome",
    /**
     * disable the automatic redirect to the provider.
     * @default false
     */
    disableRedirect: true,
});
```

You can also authenticate using `idToken` or `accessToken` from the social provider instead of redirecting the user to the provider's site. See social providers documentation for more details.

## [Signout](https://www.better-auth.com/docs/basic-usage\#signout)

To signout a user, you can use the `signOut` function provided by the client.

user-card.tsx

```
await authClient.signOut();
```

you can pass `fetchOptions` to redirect onSuccess

user-card.tsx

```
await authClient.signOut({
  fetchOptions: {
    onSuccess: () => {
      router.push("/login"); // redirect to login page
    },
  },
});
```

## [Session](https://www.better-auth.com/docs/basic-usage\#session)

Once a user is signed in, you'll want to access the user session. Better Auth allows you easily to access the session data from the server and client side.

### [Client Side](https://www.better-auth.com/docs/basic-usage\#client-side)

#### [Use Session](https://www.better-auth.com/docs/basic-usage\#use-session)

Better Auth provides a `useSession` hook to easily access session data on the client side. This hook is implemented using nanostore and has support for each supported framework and vanilla client, ensuring that any changes to the session (such as signing out) are immediately reflected in your UI.

ReactVueSvelteSolidVanilla

user.tsx

```
import { authClient } from "@/lib/auth-client" // import the auth client

export function User(){

    const {
        data: session,
        isPending, //loading state
        error, //error object
        refetch //refetch the session
    } = authClient.useSession()

    return (
        //...
    )
}
```

#### [Get Session](https://www.better-auth.com/docs/basic-usage\#get-session)

If you prefer not to use the hook, you can use the `getSession` method provided by the client.

user.tsx

```
import { authClient } from "@/lib/auth-client" // import the auth client

const { data: session, error } = await authClient.getSession()
```

You can also use it with client-side data-fetching libraries like [TanStack Query](https://tanstack.com/query/latest).

### [Server Side](https://www.better-auth.com/docs/basic-usage\#server-side)

The server provides a `session` object that you can use to access the session data. It requires request headers object to be passed to the `getSession` method.

**Example: Using some popular frameworks**

NextJsNuxtSvelteAstroHonoTanStack

server.ts

```
import { auth } from "./auth"; // path to your Better Auth server instance
import { headers } from "next/headers";

const session = await auth.api.getSession({
    headers: await headers() // you need to pass the headers object.
})
```

For more details check [session-management](https://www.better-auth.com/docs/concepts/session-management) documentation.

## [Using Plugins](https://www.better-auth.com/docs/basic-usage\#using-plugins)

One of the unique features of Better Auth is a plugins ecosystem. It allows you to add complex auth related functionality with small lines of code.

Below is an example of how to add two factor authentication using two factor plugin.

### [Server Configuration](https://www.better-auth.com/docs/basic-usage\#server-configuration)

To add a plugin, you need to import the plugin and pass it to the `plugins` option of the auth instance. For example, to add two factor authentication, you can use the following code:

auth.ts

```
import { betterAuth } from "better-auth"
import { twoFactor } from "better-auth/plugins"

export const auth = betterAuth({
    //...rest of the options
    plugins: [\
        twoFactor()\
    ]
})
```

now two factor related routes and method will be available on the server.

### [Migrate Database](https://www.better-auth.com/docs/basic-usage\#migrate-database)

After adding the plugin, you'll need to add the required tables to your database. You can do this by running the `migrate` command, or by using the `generate` command to create the schema and handle the migration manually.

generating the schema:

terminal

```
npx @better-auth/cli generate
```

using the `migrate` command:

terminal

```
npx @better-auth/cli migrate
```

If you prefer adding the schema manually, you can check the schema required on the [two factor plugin](https://www.better-auth.com/docs/plugins/2fa#schema) documentation.

### [Client Configuration](https://www.better-auth.com/docs/basic-usage\#client-configuration)

Once we're done with the server, we need to add the plugin to the client. To do this, you need to import the plugin and pass it to the `plugins` option of the auth client. For example, to add two factor authentication, you can use the following code:

auth-client.ts

```
import { createAuthClient } from "better-auth/client";
import { twoFactorClient } from "better-auth/client/plugins";

const authClient = createAuthClient({
    plugins: [\
        twoFactorClient({\
            twoFactorPage: "/two-factor" // the page to redirect if a user need to verify 2nd factor\
        })\
    ]
})
```

now two factor related methods will be available on the client.

profile.ts

```
import { authClient } from "./auth-client"

const enableTwoFactor = async() => {
    const data = await authClient.twoFactor.enable({
        password // the user password is required
    }) // this will enable two factor
}

const disableTwoFactor = async() => {
    const data = await authClient.twoFactor.disable({
        password // the user password is required
    }) // this will disable two factor
}

const signInWith2Factor = async() => {
    const data = await authClient.signIn.email({
        //...
    })
    //if the user has two factor enabled, it will redirect to the two factor page
}

const verifyTOTP = async() => {
    const data = await authClient.twoFactor.verifyTOTP({
        code: "123456", // the code entered by the user
        /**
         * If the device is trusted, the user won't
         * need to pass 2FA again on the same device
         */
        trustDevice: true
    })
}
```

Next step: See the [the two factor plugin documentation](https://www.better-auth.com/docs/plugins/2fa).

[**Installation** \\
Learn how to configure Better Auth in your project.](https://www.better-auth.com/docs/installation) [**API** \\
Better Auth API.](https://www.better-auth.com/docs/concepts/api)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Email & Password](https://www.better-auth.com/docs/basic-usage#email--password) [Sign Up](https://www.better-auth.com/docs/basic-usage#sign-up) [Sign In](https://www.better-auth.com/docs/basic-usage#sign-in) [Server-Side Authentication](https://www.better-auth.com/docs/basic-usage#server-side-authentication) [Social Sign-On](https://www.better-auth.com/docs/basic-usage#social-sign-on) [Signin with social providers](https://www.better-auth.com/docs/basic-usage#signin-with-social-providers) [Signout](https://www.better-auth.com/docs/basic-usage#signout) [Session](https://www.better-auth.com/docs/basic-usage#session) [Client Side](https://www.better-auth.com/docs/basic-usage#client-side) [Use Session](https://www.better-auth.com/docs/basic-usage#use-session) [Get Session](https://www.better-auth.com/docs/basic-usage#get-session) [Server Side](https://www.better-auth.com/docs/basic-usage#server-side) [Using Plugins](https://www.better-auth.com/docs/basic-usage#using-plugins) [Server Configuration](https://www.better-auth.com/docs/basic-usage#server-configuration) [Migrate Database](https://www.better-auth.com/docs/basic-usage#migrate-database) [Client Configuration](https://www.better-auth.com/docs/basic-usage#client-configuration)# Open Source Community

join better-auth community to get help, share ideas, and stay up-to-date.

[X (formerly Twitter)](https://x.com/better_auth) [GitHub](https://github.com/better-auth/better-auth)

Discord

[Join Our Discord](https://discord.gg/Mh3DaacaFs)

386k+

[Downloads](https://www.npmjs.com/package/better-auth)

Reddit

[Join Subreddit](https://reddit.com/r/better_auth)Docs

On this pageCookie Prefix

# Cookies

Cookies are used to store data such as session tokens, OAuth state, and more. All cookies are signed using the `secret` key provided in the auth options.

### [Cookie Prefix](https://www.better-auth.com/docs/concepts/cookies\#cookie-prefix)

Better Auth cookies will follow `${prefix}.${cookie_name}` format by default. The prefix will be "better-auth" by default. You can change the prefix by setting `cookiePrefix` in the `advanced` object of the auth options.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    advanced: {
        cookiePrefix: "my-app"
    }
})
```

### [Custom Cookies](https://www.better-auth.com/docs/concepts/cookies\#custom-cookies)

All cookies are `httpOnly` and `secure` if the server is running in production mode.

If you want to set custom cookie names and attributes, you can do so by setting `cookieOptions` in the `advanced` object of the auth options.

By default, Better Auth uses the following cookies:

- `session_token` to store the session token
- `session_data` to store the session data if cookie cache is enabled
- `dont_remember` to store the `dont_remember` flag if remember me is disabled

Plugins may also use cookies to store data. For example, the Two Factor Authentication plugin uses the `two_factor` cookie to store the two-factor authentication state.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    advanced: {
        cookies: {
            session_token: {
                name: "custom_session_token",
                attributes: {
                    // Set custom cookie attributes
                }
            },
        }
    }
})
```

### [Cross Subdomain Cookies](https://www.better-auth.com/docs/concepts/cookies\#cross-subdomain-cookies)

Sometimes you may need to share cookies across subdomains. For example, if you have `app.example.com` and `example.com`, and if you authenticate on `example.com`, you may want to access the same session on `app.example.com`.

By default, cookies are not shared between subdomains. However, if you need to access the same session across different subdomains, you can enable cross-subdomain cookies by configuring `crossSubDomainCookies` and `defaultCookieAttributes` in the `advanced` object of the auth options.

The leading period of the `domain` attribute broadens the cookie's scope beyond your main domain, making it accessible across all subdomains.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    advanced: {
        crossSubDomainCookies: {
            enabled: true,
            domain: ".example.com", // Domain with a leading period
        },
        defaultCookieAttributes: {
            secure: true,
            httpOnly: true,
            sameSite: "none", // Allows CORS-based cookie sharing across subdomains
        },
    },
    trustedOrigins: [\
        'https://example.com',\
        'https://app1.example.com',\
        'https://app2.example.com',\
    ],
})
```

Setting your `sameSite` cookie attribute to `none` makes you vulnerable to CSRF attacks. To mitigate risks, configure `trustedOrigins` with an array of authorized origins to allow.

### [Secure Cookies](https://www.better-auth.com/docs/concepts/cookies\#secure-cookies)

By default, cookies are secure only when the server is running in production mode. You can force cookies to be always secure by setting `useSecureCookies` to `true` in the `advanced` object in the auth options.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    advanced: {
        useSecureCookies: true
    }
})
```

[**Client** \\
Better Auth client library for authentication.](https://www.better-auth.com/docs/concepts/client) [**Database** \\
Learn how to use a database with Better Auth.](https://www.better-auth.com/docs/concepts/database)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Cookie Prefix](https://www.better-auth.com/docs/concepts/cookies#cookie-prefix) [Custom Cookies](https://www.better-auth.com/docs/concepts/cookies#custom-cookies) [Cross Subdomain Cookies](https://www.better-auth.com/docs/concepts/cookies#cross-subdomain-cookies) [Secure Cookies](https://www.better-auth.com/docs/concepts/cookies#secure-cookies)Docs

On this pageConfiguring Rate Limit

# Rate Limit

Better Auth includes a built-in rate limiter to help manage traffic and prevent abuse. By default, in production mode, the rate limiter is set to:

- Window: 60 seconds
- Max Requests: 100 requests

You can easily customize these settings by passing the rateLimit object to the betterAuth function.

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    rateLimit: {
        window: 10, // time window in seconds
        max: 100, // max requests in the window
    },
})
```

In addition to the default settings, Better Auth provides custom rules for specific paths. For example:

- `/sign-in/email`: Is limited to 3 requests within 10 seconds.

In addition, plugins also define custom rules for specific paths. For example, `twoFactor` plugin has custom rules:

- `/two-factor/verify`: Is limited to 3 requests within 10 seconds.

These custom rules ensure that sensitive operations are protected with stricter limits.

## [Configuring Rate Limit](https://www.better-auth.com/docs/concepts/rate-limit\#configuring-rate-limit)

### [Rate Limit Window](https://www.better-auth.com/docs/concepts/rate-limit\#rate-limit-window)

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    //...other options
    rateLimit: {
        window: 60, // time window in seconds
        max: 100, // max requests in the window
    },
})
```

You can also pass custom rules for specific paths.

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    //...other options
    rateLimit: {
        window: 60, // time window in seconds
        max: 100, // max requests in the window
        customRules: {
            "/sign-in/email": {
                window: 10,
                max: 3,
            },
            "/two-factor/*": async (request)=> {
                // custom function to return rate limit window and max
                return {
                    window: 10,
                    max: 3,
                }
            }
        },
    },
})
```

### [Storage](https://www.better-auth.com/docs/concepts/rate-limit\#storage)

By default, rate limit data is stored in memory, which may not be suitable for many use cases, particularly in serverless environments. To address this, you can use a database, secondary storage, or custom storage for storing rate limit data.

**Using Database**

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    //...other options
    rateLimit: {
        storage: "database",
        modelName: "rateLimit", //optional by default "rateLimit" is used
    },
})
```

Make sure to run `migrate` to create the rate limit table in your database.

```
npx @better-auth/cli migrate
```

**Using Secondary Storage**

If a [Secondary Storage](https://www.better-auth.com/docs/concepts/database#secondary-storage) has been configured you can use that to store rate limit data.

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    //...other options
    rateLimit: {
		storage: "secondary-storage"
    },
})
```

**Custom Storage**

If none of the above solutions suits your use case you can implement a `customStorage`.

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    //...other options
    rateLimit: {
        customStorage: {
            get: async (key) => {
                // get rate limit data
            },
            set: async (key, value) => {
                // set rate limit data
            },
        },
    },
})
```

## [Handling Rate Limit Errors](https://www.better-auth.com/docs/concepts/rate-limit\#handling-rate-limit-errors)

When a request exceeds the rate limit, Better Auth returns the following header:

- `X-Retry-After`: The number of seconds until the user can make another request.

To handle rate limit errors on the client side, you can manage them either globally or on a per-request basis. Since Better Auth clients wrap over Better Fetch, you can pass `fetchOptions` to handle rate limit errors

**Global Handling**

auth-client.ts

```
import { createAuthClient } from "better-auth/client";

export const authClient =  createAuthClient({
    fetchOptions: {
        onError: async (context) => {
            const { response } = context;
            if (response.status === 429) {
                const retryAfter = response.headers.get("X-Retry-After");
                console.log(`Rate limit exceeded. Retry after ${retryAfter} seconds`);
            }
        },
    }
})
```

**Per Request Handling**

auth-client.ts

```
import { client } from "./client";

await authClient.signIn.email({
    fetchOptions: {
        onError: async (context) => {
            const { response } = context;
            if (response.status === 429) {
                const retryAfter = response.headers.get("X-Retry-After");
                console.log(`Rate limit exceeded. Retry after ${retryAfter} seconds`);
            }
        },
    }
})
```

### [Schema](https://www.better-auth.com/docs/concepts/rate-limit\#schema)

If you are using a database to store rate limit data you need this schema:

Table Name: `rateLimit`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| key | string | PK | Unique identifier for each rate limit key |
| count | integer | - | Time window in seconds |
| lastRequest | bigint | - | Max requests in the window |

[**OAuth** \\
How Better Auth handles OAuth](https://www.better-auth.com/docs/concepts/oauth) [**Session Management** \\
Better Auth session management.](https://www.better-auth.com/docs/concepts/session-management)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Configuring Rate Limit](https://www.better-auth.com/docs/concepts/rate-limit#configuring-rate-limit) [Rate Limit Window](https://www.better-auth.com/docs/concepts/rate-limit#rate-limit-window) [Storage](https://www.better-auth.com/docs/concepts/rate-limit#storage) [Handling Rate Limit Errors](https://www.better-auth.com/docs/concepts/rate-limit#handling-rate-limit-errors) [Schema](https://www.better-auth.com/docs/concepts/rate-limit#schema)Docs

On this pageInstallation

# Two-Factor Authentication (2FA)

`OTP` `TOTP` `Backup Codes` `Trusted Devices`

Two-Factor Authentication (2FA) adds an extra security step when users log in. Instead of just using a password, they'll need to provide a second form of verification. This makes it much harder for unauthorized people to access accounts, even if they've somehow gotten the password.

This plugin offers two main methods to do a second factor verification:

1. **OTP (One-Time Password)**: A temporary code sent to the user's email or phone.
2. **TOTP (Time-based One-Time Password)**: A code generated by an app on the user's device.

**Additional features include:**

- Generating backup codes for account recovery
- Enabling/disabling 2FA
- Managing trusted devices

## [Installation](https://www.better-auth.com/docs/plugins/2fa\#installation)

### [Add the plugin to your auth config](https://www.better-auth.com/docs/plugins/2fa\#add-the-plugin-to-your-auth-config)

Add the two-factor plugin to your auth configuration and specify your app name as the issuer.

auth.ts

```
import { betterAuth } from "better-auth"
import { twoFactor } from "better-auth/plugins"

export const auth = betterAuth({
    // ... other config options
    appName: "My App", // provide your app name. It'll be used as an issuer.
    plugins: [\
        twoFactor()\
    ]
})
```

### [Migrate the database](https://www.better-auth.com/docs/plugins/2fa\#migrate-the-database)

Run the migration or generate the schema to add the necessary fields and tables to the database.

migrategenerate

```
npx @better-auth/cli migrate
```

See the [Schema](https://www.better-auth.com/docs/plugins/2fa#schema) section to add the fields manually.

### [Add the client plugin](https://www.better-auth.com/docs/plugins/2fa\#add-the-client-plugin)

Add the client plugin and Specify where the user should be redirected if they need to verify 2nd factor

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
import { twoFactorClient } from "better-auth/client/plugins"

const authClient = createAuthClient({
    plugins: [\
        twoFactorClient()\
    ]
})
```

## [Usage](https://www.better-auth.com/docs/plugins/2fa\#usage)

### [Enabling 2FA](https://www.better-auth.com/docs/plugins/2fa\#enabling-2fa)

To enable two-factor authentication, call `twoFactor.enable` with the user's password:

two-factor.ts

```
const { data } = await authClient.twoFactor.enable({
    password: "password" // user password required
})
```

When 2FA is enabled:

- An encrypted `secret` and `backupCodes` are generated.
- `enable` returns `totpURI` and `backupCodes`.

Note: `twoFactorEnabled` won’t be set to `true` until the user verifies their TOTP code.

To verify, display the QR code for the user to scan with their authenticator app. After they enter the code, call `verifyTotp`:

```
await authClient.twoFactor.verifyTotp({
    code: "" // user input
})
```

You can skip verification by setting `skipVerificationOnEnable` to true in your plugin config.

### [Sign In with 2FA](https://www.better-auth.com/docs/plugins/2fa\#sign-in-with-2fa)

When a user with 2FA enabled tries to sign in via email, the response will contain `twoFactorRedirect` set to `true`. This indicates that the user needs to verify their 2FA code.

sign-in.ts

```
await authClient.signIn.email({
    email: "user@example.com",
    password: "password123",
})
```

You can handle this in the `onSuccess` callback or by providing a `onTwoFactorRedirect` callback in the plugin config.

sign-in.ts

```
import { createAuthClient } from "better-auth/client";
import { twoFactorClient } from "better-auth/client/plugins";

const authClient = createAuthClient({
    plugins: [twoFactorClient({\
        onTwoFactorRedirect(){\
            // Handle the 2FA verification globally\
        }\
    })]
})
```

Or you can handle it in place:

```
await authClient.signIn.email({
        email: "user@example.com",
        password: "password123",
    }, {
        async onSuccess(context) {
            if (context.data.twoFactorRedirect) {
                // Handle the 2FA verification in place
            }
        }
    }
})
```

#### [Using `auth.api`](https://www.better-auth.com/docs/plugins/2fa\#using-authapi)

When you call `auth.api.signInEmail` on the server, and the user has 2FA enabled, it will, by default, respond with an object where `twoFactorRedirect` is set to `true`. This behavior isn’t inferred in TypeScript, which can be misleading. We recommend passing `asResponse: true` to receive the Response object instead.

```
const response = await auth.api.signInEmail({
    email: "my-email@email.com",
    password: "secure-password",
    asResponse: true
})
```

### [TOTP](https://www.better-auth.com/docs/plugins/2fa\#totp)

TOTP (Time-Based One-Time Password) is an algorithm that generates a unique password for each login attempt using time as a counter. Every fixed interval (Better Auth defaults to 30 seconds), a new password is generated. This addresses several issues with traditional passwords: they can be forgotten, stolen, or guessed. OTPs solve some of these problems, but their delivery via SMS or email can be unreliable (or even risky, considering it opens new attack vectors).

TOTP, however, generates codes offline, making it both secure and convenient. You just need an authenticator app on your phone, and you’re set—no internet required.

#### [Getting TOTP URI](https://www.better-auth.com/docs/plugins/2fa\#getting-totp-uri)

After enabling 2FA, you can get the TOTP URI to display to the user. This URI is generated by the server using the `secret` and `issuer` and can be used to generate a QR code for the user to scan with their authenticator app.

```
const { data, error } = await authClient.twoFactor.getTotpUri({
    password: "password" // user password required
})
```

**Example: Using React**

user-card.tsx

```
import QRCode from "react-qr-code";

export default function UserCard(){
    const { data: session } = client.useSession();
	const { data: qr } = useQuery({
		queryKey: ["two-factor-qr"],
		queryFn: async () => {
			const res = await authClient.twoFactor.getTotpUri();
			return res.data;
		},
		enabled: !!session?.user.twoFactorEnabled,
	});
    return (
        <QRCode value={qr?.totpURI || ""} />
   )
}
```

By default the issuer for TOTP is set to the app name provided in the auth config or if not provided it will be set to `Better Auth`. You can override this by passing `issuer` to the plugin config.

#### [Verifying TOTP](https://www.better-auth.com/docs/plugins/2fa\#verifying-totp)

After the user has entered their 2FA code, you can verify it using `twoFactor.verifyTotp` method.

```
const verifyTotp = async (code: string) => {
    const { data, error } = await authClient.twoFactor.verifyTotp({ code })
}
```

### [OTP](https://www.better-auth.com/docs/plugins/2fa\#otp)

OTP (One-Time Password) is similar to TOTP but a random code is generated and sent to the user's email or phone.

Before using OTP to verify the second factor, you need to configure `sendOTP` in your Better Auth instance. This function is responsible for sending the OTP to the user's email, phone, or any other method supported by your application.

auth.ts

```
import { betterAuth } from "better-auth"
import { twoFactor } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [\
        twoFactor({\
          	otpOptions: {\
				async sendOTP({ user, otp }, request) {\
                    // send otp to user\
				},\
			},\
        })\
    ]
})
```

#### [Sending OTP](https://www.better-auth.com/docs/plugins/2fa\#sending-otp)

Sending an OTP is done by calling the `twoFactor.sendOtp` function. This function will trigger your sendOTP implementation that you provided in the Better Auth configuration.

```
const { data, error } = await authClient.twoFactor.sendOtp()
if (data) {
    // redirect or show the user to enter the code
}
```

#### [Verifying OTP](https://www.better-auth.com/docs/plugins/2fa\#verifying-otp)

After the user has entered their OTP code, you can verify it

```
const verifyOtp = async (code: string) => {
    await authClient.twoFactor.verifyOtp({ code }, {
        onSuccess(){
            //redirect the user on success
        },
        onError(ctx){
            alert(ctx.error.message)
        }
    })
}
```

### [Backup Codes](https://www.better-auth.com/docs/plugins/2fa\#backup-codes)

Backup codes are generated and stored in the database. This can be used to recover access to the account if the user loses access to their phone or email.

#### [Generating Backup Codes](https://www.better-auth.com/docs/plugins/2fa\#generating-backup-codes)

Generate backup codes for account recovery:

```
const { data, error } = await authClient.twoFactor.generateBackupCodes({
    password: "password" // user password required
})
if (data) {
    // Show the backup codes to the user
}
```

#### [Using Backup Codes](https://www.better-auth.com/docs/plugins/2fa\#using-backup-codes)

You can now allow users to provider backup code as account recover method.

```
await authClient.twoFactor.verifyBackupCode({code: ""}, {
    onSuccess(){
        //redirect the user on success
    },
    onError(ctx){
        alert(ctx.error.message)
    }
})
```

once a backup code is used, it will be removed from the database and can't be used again.

#### [Viewing Backup Codes](https://www.better-auth.com/docs/plugins/2fa\#viewing-backup-codes)

You can view the backup codes at any time by calling `viewBackupCodes`. This action can only be performed on the server using `auth.api`.

```
await auth.api.viewBackupCodes({
    body: {
        userId: "user-id"
    }
})
```

### [Trusted Devices](https://www.better-auth.com/docs/plugins/2fa\#trusted-devices)

You can mark a device as trusted by passing `trustDevice` to `verifyTotp` or `verifyOtp`.

```
const verify2FA = async (code: string) => {
    const { data, error } = await authClient.twoFactor.verifyTotp({
        code,
        callbackURL: "/dashboard",
        trustDevice: true // Mark this device as trusted
    })
    if (data) {
        // 2FA verified and device trusted
    }
}
```

When `trustDevice` is set to `true`, the current device will be remembered for 60 days. During this period, the user won't be prompted for 2FA on subsequent sign-ins from this device. The trust period is refreshed each time the user signs in successfully.

### [Issuer](https://www.better-auth.com/docs/plugins/2fa\#issuer)

By adding an `issuer` you can set your application name for the 2fa application.

For example, if your user uses Google Auth, the default appName will show up as `Better Auth`. However, by using the following code, it will show up as `my-app-name`.

```
twoFactor({
    issuer: "my-app-name"
})
```

* * *

## [Schema](https://www.better-auth.com/docs/plugins/2fa\#schema)

The plugin requires 1 additional fields in the `user` table and 1 additional table to store the two factor authentication data.

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| twoFactorEnabled | boolean | ? | Whether two factor authentication is enabled for the user. |

Table: `twoFactor`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| userId | string | FK | The id of the user |
| secret | string | ? | The secret used to generate the TOTP code. |
| backupCodes | string | ? | The backup codes used to recover access to the account if the user loses access to their phone or email. |

## [Options](https://www.better-auth.com/docs/plugins/2fa\#options)

### [Server](https://www.better-auth.com/docs/plugins/2fa\#server)

**twoFactorTable**: The name of the table that stores the two factor authentication data. Default: `twoFactor`.

**skipVerificationOnEnable**: Skip the verification process before enabling two factor for a user.

**Issuer**: The issuer is the name of your application. It's used to generate TOTP codes. It'll be displayed in the authenticator apps.

**TOTP options**

these are options for TOTP.

| Prop | Type | Default |
| --- | --- | --- |
| `digits` | `number` | `6` |
| `period` | `number` | `30` |

**OTP options**

these are options for OTP.

| Prop | Type | Default |
| --- | --- | --- |
| `sendOTP` | `function` | - |
| `period` | `number` | `30` |

**Backup Code Options**

backup codes are generated and stored in the database when the user enabled two factor authentication. This can be used to recover access to the account if the user loses access to their phone or email.

| Prop | Type | Default |
| --- | --- | --- |
| `amount` | `number` | `10` |
| `length` | `number` | `10` |
| `customBackupCodesGenerate` | `function` | - |

### [Client](https://www.better-auth.com/docs/plugins/2fa\#client)

To use the two factor plugin in the client, you need to add it on your plugins list.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
import { twoFactorClient } from "better-auth/client/plugins"

const authClient =  createAuthClient({
    plugins: [\
        twoFactorClient({\
            onTwoFactorRedirect(){\
                window.location.href = "/2fa" // Handle the 2FA verification redirect\
            }\
        })\
    ]
})
```

**Options**

`onTwoFactorRedirect`: A callback that will be called when the user needs to verify their 2FA code. This can be used to redirect the user to the 2FA page.

[**Expo Integration** \\
Integrate Better Auth with Expo.](https://www.better-auth.com/docs/integrations/expo) [**Username** \\
Username plugin](https://www.better-auth.com/docs/plugins/username)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/2fa#installation) [Add the plugin to your auth config](https://www.better-auth.com/docs/plugins/2fa#add-the-plugin-to-your-auth-config) [Migrate the database](https://www.better-auth.com/docs/plugins/2fa#migrate-the-database) [Add the client plugin](https://www.better-auth.com/docs/plugins/2fa#add-the-client-plugin) [Usage](https://www.better-auth.com/docs/plugins/2fa#usage) [Enabling 2FA](https://www.better-auth.com/docs/plugins/2fa#enabling-2fa) [Sign In with 2FA](https://www.better-auth.com/docs/plugins/2fa#sign-in-with-2fa) [Using `auth.api`](https://www.better-auth.com/docs/plugins/2fa#using-authapi) [TOTP](https://www.better-auth.com/docs/plugins/2fa#totp) [Getting TOTP URI](https://www.better-auth.com/docs/plugins/2fa#getting-totp-uri) [Verifying TOTP](https://www.better-auth.com/docs/plugins/2fa#verifying-totp) [OTP](https://www.better-auth.com/docs/plugins/2fa#otp) [Sending OTP](https://www.better-auth.com/docs/plugins/2fa#sending-otp) [Verifying OTP](https://www.better-auth.com/docs/plugins/2fa#verifying-otp) [Backup Codes](https://www.better-auth.com/docs/plugins/2fa#backup-codes) [Generating Backup Codes](https://www.better-auth.com/docs/plugins/2fa#generating-backup-codes) [Using Backup Codes](https://www.better-auth.com/docs/plugins/2fa#using-backup-codes) [Viewing Backup Codes](https://www.better-auth.com/docs/plugins/2fa#viewing-backup-codes) [Trusted Devices](https://www.better-auth.com/docs/plugins/2fa#trusted-devices) [Issuer](https://www.better-auth.com/docs/plugins/2fa#issuer) [Schema](https://www.better-auth.com/docs/plugins/2fa#schema) [Options](https://www.better-auth.com/docs/plugins/2fa#options) [Server](https://www.better-auth.com/docs/plugins/2fa#server) [Client](https://www.better-auth.com/docs/plugins/2fa#client)Docs

On this pageInstallation

# OAuth Proxy

A proxy plugin, that allows you to proxy OAuth requests. Useful for development and preview deployments where the redirect URL can't be known in advance to add to the OAuth provider.

## [Installation](https://www.better-auth.com/docs/plugins/oauth-proxy\#installation)

### [Add the plugin to your **auth** config](https://www.better-auth.com/docs/plugins/oauth-proxy\#add-the-plugin-to-your-auth-config)

auth.ts

```
import { betterAuth } from "better-auth"
import { oAuthProxy } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [\
        oAuthProxy(),\
    ]
})
```

### [Add redirect URL to your OAuth provider](https://www.better-auth.com/docs/plugins/oauth-proxy\#add-redirect-url-to-your-oauth-provider)

For the proxy server to work properly, you’ll need to pass the redirect URL of your main production app registered with the OAuth provider in your social provider config. This needs to be done for each social provider you want to proxy requests for.

```
export const auth = betterAuth({
   plugins: [\
       oAuthProxy(),\
   ],
   socialProviders: {
        github: {
            clientId: "your-client-id",
            clientSecret: "your-client-secret",
            redirectURI: "https://my-main-app.com/api/auth/callback/github".
        }
   }
})
```

## [How it works](https://www.better-auth.com/docs/plugins/oauth-proxy\#how-it-works)

The plugin adds an endpoint to your server that proxies OAuth requests. When you initiate a social sign-in, it sets the redirect URL to this proxy endpoint. After the OAuth provider redirects back to your server, the plugin then forwards the user to the original callback URL.

```
await authClient.signIn.social({
    provider: "github",
    callbackURL: "/dashboard" // the plugin will override this to something like "http://localhost:3000/api/auth/oauth-proxy?callbackURL=/dashboard"
})
```

When the OAuth provider returns the user to your server, the plugin automatically redirects them to the intended callback URL.

To share cookies between the proxy server and your main server it uses url query parameters to pass the cookies encrypted in the URL. This is secure as the cookies are encrypted and can only be decrypted by the server.

## [Options](https://www.better-auth.com/docs/plugins/oauth-proxy\#options)

**currentURL**: The application's current URL is automatically determined by the plugin. It first it check for the request URL if invoked by a client, then it checks the base URL from popular hosting providers, and finally falls back to the `baseURL` in your auth config. If the URL isn’t inferred correctly, you can specify it manually here.

[**Multi Session** \\
Learn how to use multi-session plugin in Better Auth.](https://www.better-auth.com/docs/plugins/multi-session) [**Open API** \\
Open API reference for Better Auth.](https://www.better-auth.com/docs/plugins/open-api)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/oauth-proxy#installation) [Add the plugin to your **auth** config](https://www.better-auth.com/docs/plugins/oauth-proxy#add-the-plugin-to-your-auth-config) [Add redirect URL to your OAuth provider](https://www.better-auth.com/docs/plugins/oauth-proxy#add-redirect-url-to-your-oauth-provider) [How it works](https://www.better-auth.com/docs/plugins/oauth-proxy#how-it-works) [Options](https://www.better-auth.com/docs/plugins/oauth-proxy#options)Docs

On this pagePassword Hashing

# Security

This page contains information about security features of Better Auth.

## [Password Hashing](https://www.better-auth.com/docs/reference/security\#password-hashing)

Better Auth uses the `scrypt` algorithm to hash passwords by default. This algorithm is designed to be memory-hard and CPU-intensive, making it resistant to brute-force attacks. You can customize the password hashing function by setting the `password` option in the configuration. This option should include a `hash` function to hash passwords and a `verify` function to verify them.

## [Session Management](https://www.better-auth.com/docs/reference/security\#session-management)

### [Session Expiration](https://www.better-auth.com/docs/reference/security\#session-expiration)

Better Auth uses secure session management to protect user data. Sessions are stored in the database or a secondary storage, if configured, to prevent unauthorized access. By default, sessions expire after 7 days, but you can customize this value in the configuration. Additionally, each time a session is used, if it reaches the `updateAge` threshold, the expiration date is extended, which by default is set to 1 day.

### [Session Revocation](https://www.better-auth.com/docs/reference/security\#session-revocation)

Better Auth allows you to revoke sessions to enhance security. When a session is revoked, the user is logged out and can no longer access the application. A logged in user can also revoke their own sessions to log out from different devices or browsers.

See the [session management](https://www.better-auth.com/docs/concepts/session-management) for more details.

## [CSRF Protection](https://www.better-auth.com/docs/reference/security\#csrf-protection)

Better Auth ensures CSRF protection by validating the Origin header in requests. This check confirms that requests originate from the application or a trusted source. If a request comes from an untrusted origin, it is blocked to prevent potential CSRF attacks. By default, the origin matching the base URL is trusted, but you can set a list of trusted origins in the trustedOrigins configuration option.

## [OAuth State and PKCE](https://www.better-auth.com/docs/reference/security\#oauth-state-and-pkce)

To secure OAuth flows, Better Auth stores the OAuth state and PKCE (Proof Key for Code Exchange) in the database. The state helps prevent CSRF attacks, while PKCE protects against code injection threats. Once the OAuth process completes, these values are removed from the database.

## [Cookies](https://www.better-auth.com/docs/reference/security\#cookies)

Better Auth assigns secure cookies by default when the base URL uses `https`. These secure cookies are encrypted and only sent over secure connections, adding an extra layer of protection. They are also set with the `sameSite` attribute to `lax` by default to prevent cross-site request forgery attacks. And the `httpOnly` attribute is enabled to prevent client-side JavaScript from accessing the cookie.

For Cross-Subdomain Cookies, you can set the `crossSubDomainCookies` option in the configuration. This option allows cookies to be shared across subdomains, enabling seamless authentication across multiple subdomains.

### [Customizing Cookies](https://www.better-auth.com/docs/reference/security\#customizing-cookies)

You can customize cookie names to minimize the risk of fingerprinting attacks and set specific cookie options as needed for additional control. For more information, refer to the [cookie options](https://www.better-auth.com/docs/concepts/cookies).

Plugins can also set custom cookie options to align with specific security needs. If you're using Better Auth in non-browser environments, plugins offer ways to manage cookies securely in those contexts as well.

## [Rate Limiting](https://www.better-auth.com/docs/reference/security\#rate-limiting)

Better Auth includes built-in rate limiting to safeguard against brute-force attacks. Rate limits are applied across all routes by default, with specific routes subject to stricter limits based on potential risk.

## [Trusted Origins](https://www.better-auth.com/docs/reference/security\#trusted-origins)

Trusted origins prevent CSRF attacks and block open redirects. You can set a list of trusted origins in the `trustedOrigins` configuration option. Requests from origins not on this list are automatically blocked.

## [Reporting Vulnerabilities](https://www.better-auth.com/docs/reference/security\#reporting-vulnerabilities)

If you discover a security vulnerability in Better Auth, please report it to us at [security@better-auth.com](mailto:security@better-auth.com). We address all reports promptly, and credits will be given for validated discoveries.

[**Options** \\
Better Auth configuration options reference.](https://www.better-auth.com/docs/reference/options) [**FAQ** \\
Frequently asked questions about Better Auth.](https://www.better-auth.com/docs/reference/faq)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Password Hashing](https://www.better-auth.com/docs/reference/security#password-hashing) [Session Management](https://www.better-auth.com/docs/reference/security#session-management) [Session Expiration](https://www.better-auth.com/docs/reference/security#session-expiration) [Session Revocation](https://www.better-auth.com/docs/reference/security#session-revocation) [CSRF Protection](https://www.better-auth.com/docs/reference/security#csrf-protection) [OAuth State and PKCE](https://www.better-auth.com/docs/reference/security#oauth-state-and-pkce) [Cookies](https://www.better-auth.com/docs/reference/security#cookies) [Customizing Cookies](https://www.better-auth.com/docs/reference/security#customizing-cookies) [Rate Limiting](https://www.better-auth.com/docs/reference/security#rate-limiting) [Trusted Origins](https://www.better-auth.com/docs/reference/security#trusted-origins) [Reporting Vulnerabilities](https://www.better-auth.com/docs/reference/security#reporting-vulnerabilities)Docs

On this pageInstallation

# Client

Better Auth offers a client library compatible with popular frontend frameworks like React, Vue, Svelte, and more. This client library includes a set of functions for interacting with the Better Auth server. Each framework's client library is built on top of a core client library that is framework-agnostic, so that all methods and hooks are consistently available across all client libraries.

## [Installation](https://www.better-auth.com/docs/concepts/client\#installation)

If you haven't already, install better-auth.

npmpnpmyarnbun

```
npm i better-auth
```

## [Create Client Instance](https://www.better-auth.com/docs/concepts/client\#create-client-instance)

Import `createAuthClient` from the package for your framework (e.g., "better-auth/react" for React). Call the function to create your client. Pass the base URL of your auth server. If the auth server is running on the same domain as your client, you can skip this step.

If you're using a different base path other than `/api/auth`, make sure to pass the whole URL, including the path. (e.g., `http://localhost:3000/custom-path/auth`)

reactvuesveltesolidvanilla

lib/auth-client.ts

```
import { createAuthClient } from "better-auth/react"
export const authClient =  createAuthClient({
    baseURL: "http://localhost:3000" // the base url of your auth server
})
```

## [Usage](https://www.better-auth.com/docs/concepts/client\#usage)

Once you've created your client instance, you can use the client to interact with the Better Auth server. The client provides a set of functions by default and they can be extended with plugins.

**Example: Sign In**

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

await authClient.signIn.email({
    email: "test@user.com",
    password: "password1234"
})
```

### [Hooks](https://www.better-auth.com/docs/concepts/client\#hooks)

On top of normal methods, the client provides hooks to easily access different reactive data. Every hook is available in the root object of the client and they all start with `use`.

**Example: useSession**

ReactVueSvelteSolid

user.tsx

```
//make sure you're using the react client
import { createAuthClient } from "better-auth/react"
const { useSession } = createAuthClient()

export function User() {
    const {
        data: session,
        isPending, //loading state
        error, //error object
        refetch //refetch the session
    } = useSession()
    return (
        //...
    )
}
```

### [Fetch Options](https://www.better-auth.com/docs/concepts/client\#fetch-options)

The client uses a library called [better fetch](https://better-fetch.vercel.app/) to make requests to the server.

Better fetch is a wrapper around the native fetch API that provides a more convenient way to make requests. It's created by the same team behind Better Auth and is designed to work seamlessly with it.

You can pass any default fetch options to the client by passing `fetchOptions` object to the `createAuthClient`.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"

const authClient =  createAuthClient({
    fetchOptions: {
        //any better-fetch options
    },
})
```

You can also pass fetch options to most of the client functions. Either as the second argument or as a property in the object.

auth-client.ts

```
await authClient.signIn.email({
    email: "email@email.com",
    password: "password1234",
}, {
    onSuccess(ctx) {
            //
    }
})

//or

await authClient.signIn.email({
    email: "email@email.com",
    password: "password1234",
    fetchOptions: {
        onSuccess(ctx) {
            //
        }
    },
})
```

### [Handling Errors](https://www.better-auth.com/docs/concepts/client\#handling-errors)

Most of the client functions return a response object with the following properties:

- `data`: The response data.
- `error`: The error object if there was an error.

the error object contains the following properties:

- `message`: The error message. (e.g., "Invalid email or password")
- `status`: The HTTP status code.
- `statusText`: The HTTP status text.

auth-client.ts

```
const { data, error } = await authClient.signIn.email({
    email: "email@email.com",
    password: "password1234"
})
if (error) {
    //handle error
}
```

If the actions accepts a `fetchOptions` option, you can pass `onError` callback to handle errors.

auth-client.ts

```

await authClient.signIn.email({
    email: "email@email.com",
    password: "password1234",
}, {
    onError(ctx) {
        //handle error
    }
})

//or
await authClient.signIn.email({
    email: "email@email.com",
    password: "password1234",
    fetchOptions: {
        onError(ctx) {
            //handle error
        }
    }
})
```

Hooks like `useSession` also return an error object if there was an error fetching the session. On top of that, they also return a `isPending` property to indicate if the request is still pending.

auth-client.ts

```
const { data, error, isPending } = useSession()
if (error) {
    //handle error
}
```

#### [Error Codes](https://www.better-auth.com/docs/concepts/client\#error-codes)

The client instance contains $ERROR\_CODES object that contains all the error codes returned by the server. You can use this to handle error translations or custom error messages.

auth-client.ts

```
const authClient = createAuthClient();

type ErrorTypes = Partial<
	Record<
		keyof typeof client.$ERROR_CODES,
		{
			en: string;
			es: string;
		}
	>
>;

const errorCodes = {
	USER_ALREADY_EXISTS: {
		en: "user already registered",
		es: "usuario ya registrada",
	},
} satisfies ErrorTypes;

const getErrorMessage = (code: string, lang: "en" | "es") => {
	if (code in errorCodes) {
		return errorCodes[code as keyof typeof errorCodes][lang];
	}
	return "";
};


const { error } = await authClient.signUp.email({
	email: "user@email.com",
	password: "password",
	name: "User",
});
if(error?.code){
    alert(getErrorMessage(error.code), "en");
}
```

### [Plugins](https://www.better-auth.com/docs/concepts/client\#plugins)

You can extend the client with plugins to add more functionality. Plugins can add new functions to the client or modify existing ones.

**Example: Magic Link Plugin**

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
import { magicLinkClient } from "better-auth/client/plugins"

const authClient =  createAuthClient({
    plugins: [\
        magicLinkClient()\
    ]
})
```

once you've added the plugin, you can use the new functions provided by the plugin.

auth-client.ts

```
await authClient.signIn.magicLink({
    email: "test@email.com"
})
```

[**CLI** \\
Built in CLI for managing your project.](https://www.better-auth.com/docs/concepts/cli) [**Cookies** \\
Learn how cookies are used in Better Auth.](https://www.better-auth.com/docs/concepts/cookies)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/concepts/client#installation) [Create Client Instance](https://www.better-auth.com/docs/concepts/client#create-client-instance) [Usage](https://www.better-auth.com/docs/concepts/client#usage) [Hooks](https://www.better-auth.com/docs/concepts/client#hooks) [Fetch Options](https://www.better-auth.com/docs/concepts/client#fetch-options) [Handling Errors](https://www.better-auth.com/docs/concepts/client#handling-errors) [Error Codes](https://www.better-auth.com/docs/concepts/client#error-codes) [Plugins](https://www.better-auth.com/docs/concepts/client#plugins)Docs

On this pageCreate a new Nitro Application

# Nitro Integration

Better Auth can be integrated with your [Nitro Application](https://nitro.build/)(an open source framework to build web servers).

This guide aims to help you integrate Better Auth with your Nitro application in a few simple steps.

## [Create a new Nitro Application](https://www.better-auth.com/docs/integrations/nitro\#create-a-new-nitro-application)

Start by scaffolding a new Nitro application using the following command:

Terminal

```
npx giget@latest nitro nitro-app --install
```

This will create the `nitro-app` directory and install all the dependencies. You can now open the `nitro-app` directory in your code editor.

### [Prisma Adapter Setup](https://www.better-auth.com/docs/integrations/nitro\#prisma-adapter-setup)

This guide assumes that you have a basic understanding of Prisma. If you are new to Prisma, you can check out the [Prisma documentation](https://www.prisma.io/docs/getting-started).

The `sqlite` database used in this guide will not work in a production environment. You should replace it with a production-ready database like `PostgreSQL`.

For this guide, we will be using the Prisma adapter. You can install prisma client by running the following command:

npmpnpmyarnbun

```
npm install @prisma/client
```

`prisma` can be installed as a dev dependency using the following command:

npmpnpmyarnbun

```
npm install -D prisma
```

Generate a `schema.prisma` file in the `prisma` directory by running the following command:

Terminal

```
npx prisma init
```

You can now replace the contents of the `schema.prisma` file with the following:

prisma/schema.prisma

```
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Will be deleted. Just need it to generate the prisma client
model Test {
  id   Int    @id @default(autoincrement())
  name String
}
```

Ensure that you update the `DATABASE_URL` in your `.env` file to point to the location of your database.

```env
DATABASE_URL="file:./dev.db"

```

Run the following command to generate the Prisma client & sync the database:

Terminal

```
npx prisma db push
```

### [Install & Configure Better Auth](https://www.better-auth.com/docs/integrations/nitro\#install--configure-better-auth)

Follow steps 1 & 2 from the [installation guide](https://www.better-auth.com/docs/installation) to install Better Auth in your Nitro application & set up the environment variables.

Once that is done, create your better auth instance within the `server/utils/auth.ts` file.

server/utils/auth.ts

```
import { betterAuth } from "better-auth";
import { prismaAdapter } from "better-auth/adapters/prisma";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();
export const auth = betterAuth({
  database: prismaAdapter(prisma, { provider: "sqlite" }),
  emailAndPassword: { enabled: true },
});
```

### [Update Prisma Schema](https://www.better-auth.com/docs/integrations/nitro\#update-prisma-schema)

Use the Better Auth CLI to update your Prisma schema with the required models by running the following command:

Terminal

```
npx @better-auth/cli generate --config server/utils/auth.ts
```

The `--config` flag is used to specify the path to the file where you have created your Better Auth instance.

Head over to the `prisma/schema.prisma` file & save the file to trigger the format on save.

After saving the file, you can run the `npx prisma db push` command to update the database schema.

## [Mount The Handler](https://www.better-auth.com/docs/integrations/nitro\#mount-the-handler)

You can now mount the Better Auth handler in your Nitro application. You can do this by adding the following code to your `server/routes/api/auth/[...all].ts` file:

server/routes/api/auth/\[...all\].ts

```
export default defineEventHandler((event) => {
  return auth.handler(toWebRequest(event));
});
```

This is a [catch-all](https://nitro.build/guide/routing#catch-all-route) route that will handle all requests to `/api/auth/*`.

### [Cors](https://www.better-auth.com/docs/integrations/nitro\#cors)

You can configure CORS for your Nitro app by creating a plugin.

Start by installing the cors package:

npmpnpmyarnbun

```
npm install cors
```

You can now create a new file `server/plugins/cors.ts` and add the following code:

server/plugins/cors.ts

```
import cors from "cors";
export default defineNitroPlugin((plugin) => {
  plugin.h3App.use(
    fromNodeMiddleware(
      cors({
        origin: "*",
      }),
    ),
  );
});
```

This will enable CORS for all routes. You can customize the `origin` property to allow requests from specific domains. Ensure that the config is in sync with your frontend application.

### [Auth Guard/Middleware](https://www.better-auth.com/docs/integrations/nitro\#auth-guardmiddleware)

You can add an auth guard to your Nitro application to protect routes that require authentication. You can do this by creating a new file `server/utils/require-auth.ts` and adding the following code:

server/utils/require-auth.ts

```
import { EventHandler, H3Event } from "h3";
import { fromNodeHeaders } from "better-auth/node";

/**
 * Middleware used to require authentication for a route.
 *
 * Can be extended to check for specific roles or permissions.
 */
export const requireAuth: EventHandler = async (event: H3Event) => {
  const headers = event.headers;

  const session = await auth.api.getSession({
    headers: headers,
  });
  if (!session)
    throw createError({
      statusCode: 401,
      statusMessage: "Unauthorized",
    });
  // You can save the session to the event context for later use
  event.context.auth = session;
};
```

You can now use this event handler/middleware in your routes to protect them:

server/routes/api/secret.get.ts

```
// Object syntax of the route handler
export default defineEventHandler({
  // The user has to be logged in to access this route
  onRequest: [requireAuth],
  handler: async (event) => {
    setResponseStatus(event, 201, "Secret data");
    return { message: "Secret data" };
  },
});
```

### [Example](https://www.better-auth.com/docs/integrations/nitro\#example)

You can find an example of a Nitro application integrated with Better Auth & Prisma [here](https://github.com/BayBreezy/nitrojs-better-auth-prisma).

[**Elysia Integration** \\
Integrate Better Auth with Elysia.](https://www.better-auth.com/docs/integrations/elysia) [**Expo Integration** \\
Integrate Better Auth with Expo.](https://www.better-auth.com/docs/integrations/expo)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Create a new Nitro Application](https://www.better-auth.com/docs/integrations/nitro#create-a-new-nitro-application) [Prisma Adapter Setup](https://www.better-auth.com/docs/integrations/nitro#prisma-adapter-setup) [Install & Configure Better Auth](https://www.better-auth.com/docs/integrations/nitro#install--configure-better-auth) [Update Prisma Schema](https://www.better-auth.com/docs/integrations/nitro#update-prisma-schema) [Mount The Handler](https://www.better-auth.com/docs/integrations/nitro#mount-the-handler) [Cors](https://www.better-auth.com/docs/integrations/nitro#cors) [Auth Guard/Middleware](https://www.better-auth.com/docs/integrations/nitro#auth-guardmiddleware) [Example](https://www.better-auth.com/docs/integrations/nitro#example)Docs

On this pageInstallation

# OIDC Provider

The **OIDC Provider Plugin** enables you to build and manage your own OpenID Connect (OIDC) provider, granting full control over user authentication without relying on third-party services like Okta or Azure AD. It also allows other services to authenticate users through your OIDC provider.

**Key Features**:

- **Client Registration**: Register clients to authenticate with your OIDC provider.
- **Dynamic Client Registration**: Allow clients to register dynamically.
- **Authorization Code Flow**: Support the Authorization Code Flow.
- **JWKS Endpoint**: Publish a JWKS endpoint to allow clients to verify tokens. (Not fully implemented)
- **Refresh Tokens**: Issue refresh tokens and handle access token renewal using the `refresh_token` grant.
- **OAuth Consent**: Implement OAuth consent screens for user authorization, with an option to bypass consent for trusted applications.
- **UserInfo Endpoint**: Provide a UserInfo endpoint for clients to retrieve user details.

This plugin is in active development and may not be suitable for production use. Please report any issues or bugs on [GitHub](https://github.com/better-auth/better-auth).

## [Installation](https://www.better-auth.com/docs/plugins/oidc-provider\#installation)

### [Mount the Plugin](https://www.better-auth.com/docs/plugins/oidc-provider\#mount-the-plugin)

Add the OIDC plugin to your auth config. See [OIDC Configuration](https://www.better-auth.com/docs/plugins/oidc-provider#oidc-configuration) on how to configure the plugin.

auth.ts

```
import { betterAuth } from "better-auth";
import { oidcProvider } from "better-auth/plugins";

const auth = betterAuth({
    plugins: [oidcProvider({\
        loginPage: "/sign-in", // path to the login page\
        // ...other options\
    })]
})
```

### [Migrate the Database](https://www.better-auth.com/docs/plugins/oidc-provider\#migrate-the-database)

Run the migration or generate the schema to add the necessary fields and tables to the database.

migrategenerate

```
npx @better-auth/cli migrate
```

See the [Schema](https://www.better-auth.com/docs/plugins/oidc-provider#schema) section to add the fields manually.

### [Add the Client Plugin](https://www.better-auth.com/docs/plugins/oidc-provider\#add-the-client-plugin)

Add the OIDC client plugin to your auth client config.

```
import { createAuthClient } from "better-auth/client";
import { oidcClient } from "better-auth/client/plugins"
const authClient = createAuthClient({
    plugins: [oidcClient({\
        // Your OIDC configuration\
    })]
})
```

## [Usage](https://www.better-auth.com/docs/plugins/oidc-provider\#usage)

Once installed, you can utilize the OIDC Provider to manage authentication flows within your application.

### [Register a New Client](https://www.better-auth.com/docs/plugins/oidc-provider\#register-a-new-client)

To register a new OIDC client, use the `oauth2.register` method.

client.ts

```
const application = await client.oauth2.register({
    name: "My Client",
    redirectURLs: ["https://client.example.com/callback"],
});
```

Once the application is created, you will receive a `clientId` and `clientSecret` that you can display to the user.

### [Consent Screen](https://www.better-auth.com/docs/plugins/oidc-provider\#consent-screen)

When a user is redirected to the OIDC provider for authentication, they may be prompted to authorize the application to access their data. This is known as the consent screen. By default, Better Auth will display a sample consent screen. You can customize the consent screen by providing a `consentPage` option during initialization.

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    plugins: [oidcProvider({\
        consentPage: "/path/to/consent/page"\
    })]
})
```

The plugin will redirect the user to the specified path with a `client_id` and `scope` query parameter. You can use this information to display a custom consent screen. Once the user consents, you can call `oauth2.consent` to complete the authorization.

server.ts

```
const res = await client.oauth2.consent({
	accept: true, // or false to deny
});
```

The `client_id` and other necessary information are stored in the browser cookie, so you don't need to pass them in the request. If they don't exist in the cookie, the consent method will return an error.

### [Handling Login](https://www.better-auth.com/docs/plugins/oidc-provider\#handling-login)

When a user is redirected to the OIDC provider for authentication, if they are not already logged in, they will be redirected to the login page. You can customize the login page by providing a `loginPage` option during initialization.

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    plugins: [oidcProvider({\
        loginPage: "/sign-in"\
    })]
})
```

You don't need to handle anything from your side; when a new session is created, the plugin will handle continuing the authorization flow.

## [Configuration](https://www.better-auth.com/docs/plugins/oidc-provider\#configuration)

### [OIDC Metadata](https://www.better-auth.com/docs/plugins/oidc-provider\#oidc-metadata)

Customize the OIDC metadata by providing a configuration object during initialization.

auth.ts

```
import { betterAuth } from "better-auth";
import { oidcProvider } from "better-auth/plugins";

export const auth = betterAuth({
    plugins: [oidcProvider({\
        metadata: {\
            issuer: "https://your-domain.com",\
            authorization_endpoint: "/custom/oauth2/authorize",\
            token_endpoint: "/custom/oauth2/token",\
            // ...other custom metadata\
        }\
    })]
})
```

### [JWKS Endpoint (Not Fully Implemented)](https://www.better-auth.com/docs/plugins/oidc-provider\#jwks-endpoint-not-fully-implemented)

For JWKS support, you need to use the `jwt` plugin. It exposes the `/jwks` endpoint to provide the public keys.

Currently, the token is signed with the application's secret key. The JWKS endpoint is not fully implemented yet.

### [Dynamic Client Registration](https://www.better-auth.com/docs/plugins/oidc-provider\#dynamic-client-registration)

If you want to allow clients to register dynamically, you can enable this feature by setting the `allowDynamicClientRegistration` option to `true`.

auth.ts

```
const auth = betterAuth({
    plugins: [oidcProvider({\
        allowDynamicClientRegistration: true,\
    })]
})
```

This will allow clients to register using the `/register` endpoint to be publicly available.

## [Schema](https://www.better-auth.com/docs/plugins/oidc-provider\#schema)

The OIDC Provider plugin adds the following tables to the database:

### [OAuth Application](https://www.better-auth.com/docs/plugins/oidc-provider\#oauth-application)

Table Name: `oauthApplication`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | Database ID of the OAuth client |
| clientId | string | PK | Unique identifier for each OAuth client |
| clientSecret | string | - | Secret key for the OAuth client |
| name | string | - | Name of the OAuth client |
| redirectURLs | string | - | Comma-separated list of redirect URLs |
| metadata | string | ? | Additional metadata for the OAuth client |
| type | string | - | Type of OAuth client (e.g., web, mobile) |
| disabled | boolean | - | Indicates if the client is disabled |
| userId | string | ? | ID of the user who owns the client. (optional) |
| createdAt | Date | - | Timestamp of when the OAuth client was created |
| updatedAt | Date | - | Timestamp of when the OAuth client was last updated |

### [OAuth Access Token](https://www.better-auth.com/docs/plugins/oidc-provider\#oauth-access-token)

Table Name: `oauthAccessToken`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | Database ID of the access token |
| accessToken | string | - | Access token issued to the client |
| refreshToken | string | - | Refresh token issued to the client |
| accessTokenExpiresAt | Date | - | Expiration date of the access token |
| refreshTokenExpiresAt | Date | - | Expiration date of the refresh token |
| clientId | string | FK | ID of the OAuth client |
| userId | string | FK | ID of the user associated with the token |
| scopes | string | - | Comma-separated list of scopes granted |
| createdAt | Date | - | Timestamp of when the access token was created |
| updatedAt | Date | - | Timestamp of when the access token was last updated |

### [OAuth Consent](https://www.better-auth.com/docs/plugins/oidc-provider\#oauth-consent)

Table Name: `oauthConsent`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | Database ID of the consent |
| userId | string | FK | ID of the user who gave consent |
| clientId | string | FK | ID of the OAuth client |
| scopes | string | - | Comma-separated list of scopes consented to |
| consentGiven | boolean | - | Indicates if consent was given |
| createdAt | Date | - | Timestamp of when the consent was given |
| updatedAt | Date | - | Timestamp of when the consent was last updated |

## [Options](https://www.better-auth.com/docs/plugins/oidc-provider\#options)

**allowDynamicClientRegistration**: `boolean` \- Enable or disable dynamic client registration.

**metadata**: `OIDCMetadata` \- Customize the OIDC provider metadata.

**loginPage**: `string` \- Path to the custom login page.

**consentPage**: `string` \- Path to the custom consent page.

[**Organization** \\
The organization plugin allows you to manage your organization's members and teams.](https://www.better-auth.com/docs/plugins/organization) [**Single Sign-On (SSO)** \\
Integrate Single Sign-On (SSO) with your application.](https://www.better-auth.com/docs/plugins/sso)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/oidc-provider#installation) [Mount the Plugin](https://www.better-auth.com/docs/plugins/oidc-provider#mount-the-plugin) [Migrate the Database](https://www.better-auth.com/docs/plugins/oidc-provider#migrate-the-database) [Add the Client Plugin](https://www.better-auth.com/docs/plugins/oidc-provider#add-the-client-plugin) [Usage](https://www.better-auth.com/docs/plugins/oidc-provider#usage) [Register a New Client](https://www.better-auth.com/docs/plugins/oidc-provider#register-a-new-client) [Consent Screen](https://www.better-auth.com/docs/plugins/oidc-provider#consent-screen) [Handling Login](https://www.better-auth.com/docs/plugins/oidc-provider#handling-login) [Configuration](https://www.better-auth.com/docs/plugins/oidc-provider#configuration) [OIDC Metadata](https://www.better-auth.com/docs/plugins/oidc-provider#oidc-metadata) [JWKS Endpoint (Not Fully Implemented)](https://www.better-auth.com/docs/plugins/oidc-provider#jwks-endpoint-not-fully-implemented) [Dynamic Client Registration](https://www.better-auth.com/docs/plugins/oidc-provider#dynamic-client-registration) [Schema](https://www.better-auth.com/docs/plugins/oidc-provider#schema) [OAuth Application](https://www.better-auth.com/docs/plugins/oidc-provider#oauth-application) [OAuth Access Token](https://www.better-auth.com/docs/plugins/oidc-provider#oauth-access-token) [OAuth Consent](https://www.better-auth.com/docs/plugins/oidc-provider#oauth-consent) [Options](https://www.better-auth.com/docs/plugins/oidc-provider#options)Docs

On this pageSession table

# Session Management

Better Auth manages session using a traditional cookie-based session management. The session is stored in a cookie and is sent to the server on every request. The server then verifies the session and returns the user data if the session is valid.

## [Session table](https://www.better-auth.com/docs/concepts/session-management\#session-table)

The session table stores the session data. The session table has the following fields:

- `id`: The session token. Which is also used as the session cookie.
- `userId`: The user id of the user.
- `expiresAt`: The expiration date of the session.
- `ipAddress`: The IP address of the user.
- `userAgent`: The user agent of the user. It stores the user agent header from the request.

## [Session Expiration](https://www.better-auth.com/docs/concepts/session-management\#session-expiration)

The session expires after 7 days by default. But whenever the session is used, and the `updateAge` is reached the session expiration is updated to the current time plus the `expiresIn` value.

You can change both the `expiresIn` and `updateAge` values by passing the `session` object to the `auth` configuration.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    //... other config options
    session: {
        expiresIn: 60 * 60 * 24 * 7, // 7 days
        updateAge: 60 * 60 * 24 // 1 day (every 1 day the session expiration is updated)
    }
})
```

## [Session Freshness](https://www.better-auth.com/docs/concepts/session-management\#session-freshness)

Some endpoints in Better Auth require the session to be **fresh**. A session is considered fresh if its `createdAt` is within the `freshAge` limit. By default, the `freshAge` is set to **1 day** (60 \* 60 \* 24).

You can customize the `freshAge` value by passing a `session` object in the `auth` configuration:

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    //... other config options
    session: {
        freshAge: 60 * 5 // 5 minutes (the session is fresh if created within the last 5 minutes)
    }
})
```

To **disable the freshness check**, set `freshAge` to `0`:

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    //... other config options
    session: {
        freshAge: 0 // Disable freshness check
    }
})
```

## [Session Management](https://www.better-auth.com/docs/concepts/session-management\#session-management)

Better Auth provides a set of functions to manage sessions.

### [Get Session](https://www.better-auth.com/docs/concepts/session-management\#get-session)

The `getSession` function retrieves the current active session.

```
import { authClient } from "@/lib/client"

const { data: session } = await authClient.getSession()
```

To learn how to customize the session response check the [Customizing Session Response](https://www.better-auth.com/docs/concepts/session-management#customizing-session-response) section.

### [Use Session](https://www.better-auth.com/docs/concepts/session-management\#use-session)

The `useSession` action provides a reactive way to access the current session.

```
import { authClient } from "@/lib/client"

const { data: session } = authClient.useSession()
```

### [List Sessions](https://www.better-auth.com/docs/concepts/session-management\#list-sessions)

The `listSessions` function returns a list of sessions that are active for the user.

auth-client.ts

```
import { authClient } from "@/lib/client"

const sessions = await authClient.listSessions()
```

### [Revoke Session](https://www.better-auth.com/docs/concepts/session-management\#revoke-session)

When a user signs out of a device, the session is automatically ended. However, you can also end a session manually from any device the user is signed into.

To end a session, use the `revokeSession` function. Just pass the session token as a parameter.

auth-client.ts

```
await authClient.revokeSession({
    token: "session-token"
})
```

### [Revoke Other Sessions](https://www.better-auth.com/docs/concepts/session-management\#revoke-other-sessions)

To revoke all other sessions except the current session, you can use the `revokeOtherSessions` function.

auth-client.ts

```
await authClient.revokeOtherSessions()
```

### [Revoke All Sessions](https://www.better-auth.com/docs/concepts/session-management\#revoke-all-sessions)

To revoke all sessions, you can use the `revokeSessions` function.

auth-client.ts

```
await authClient.revokeSessions()
```

### [Revoking Sessions on Password Change](https://www.better-auth.com/docs/concepts/session-management\#revoking-sessions-on-password-change)

You can revoke all sessions when the user changes their password by passing `revokeOtherSessions` as true on `changePassword` function.

auth.ts

```
await authClient.changePassword({
    newPassword: newPassword,
    currentPassword: currentPassword,
    revokeOtherSessions: true,
})
```

## [Session Caching](https://www.better-auth.com/docs/concepts/session-management\#session-caching)

### [Cookie Cache](https://www.better-auth.com/docs/concepts/session-management\#cookie-cache)

Calling your database every time `useSession` or `getSession` invoked isn’t ideal, especially if sessions don’t change frequently. Cookie caching handles this by storing session data in a short-lived, signed cookie—similar to how JWT access tokens are used with refresh tokens.

When cookie caching is enabled, the server can check session validity from the cookie itself instead of hitting the database each time. The cookie is signed to prevent tampering, and a short `maxAge` ensures that the session data gets refreshed regularly. If a session is revoked or expires, the cookie will be invalidated automatically.

To turn on cookie caching, just set `session.cookieCache` in your auth config:

auth.ts

```
const auth = new BetterAuth({
    session: {
        cookieCache: {
            enabled: true,
            maxAge: 5 * 60 // Cache duration in seconds
        }
    }
});
```

If you want to disable returning from the cookie cache when fetching the session, you can pass `disableCookieCache:true`

auth-client.ts

```
const session = await authClient.getSession({ query: {
    disableCookieCache: true
}})
```

or on the server

server.ts

```
auth.api.getSession({
    query: {
        disableCookieCache: true,
    },
    headers: req.headers, // pass the headers
});
```

## [Customizing Session Response](https://www.better-auth.com/docs/concepts/session-management\#customizing-session-response)

When you call `getSession` or `useSession`, the session data is returned as a `user` and `session` object. You can customize this response using the `customSession` plugin.

auth.ts

```
import { customSession } from "better-auth/plugins";

export const auth = betterAuth({
    plugins: [\
        customSession(async ({ user, session }) => {\
            const roles = findUserRoles(session.session.userId);\
            return {\
                roles,\
                user: {\
                    ...user,\
                    newField: "newField",\
                },\
                session\
            };\
        }),\
    ],
});
```

This will add `roles` and `user.newField` to the session response.

**Infer on the Client**

auth-client.ts

```
import { customSessionClient } from "better-auth/client/plugins";
import type { auth } from "@/lib/auth"; // Import the auth instance as a type

const authClient = createAuthClient({
    plugins: [customSessionClient<typeof auth>()],
});

const { data } = await authClient.useSession();
const { data: sessionData } = await authClient.getSession();
// data.roles
// data.user.newField
```

**Some Caveats**:

- The passed `session` object to the callback does not infer fields added by plugins.

However, as a workaround, you can pull up your auth options and pass it to the plugin to infer the fields.

```
import { betterAuth, BetterAuthOptions } from "better-auth";

const options = {
  //...config options
  plugins: [\
    //...plugins\
  ]
} satisfies BetterAuthOptions;

export const auth = betterAuth({
    ...options,
    plugins: [\
        ...(options.plugins ?? []),\
        customSession(async ({ user, session }) => {\
            // now both user and session will infer the fields added by plugins and your custom fields\
            return {\
                user,\
                session\
            }\
        }, options), // pass options here\
    ]
})
```

- If you cannot use the `auth` instance as a type, inference will not work on the client.
- Session caching, including secondary storage or cookie cache, does not include custom fields. Each time the session is fetched, your custom session function will be called.

[**Rate Limit** \\
How to limit the number of requests a user can make to the server in a given time period.](https://www.better-auth.com/docs/concepts/rate-limit) [**TypeScript** \\
Better Auth TypeScript integration.](https://www.better-auth.com/docs/concepts/typescript)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Session table](https://www.better-auth.com/docs/concepts/session-management#session-table) [Session Expiration](https://www.better-auth.com/docs/concepts/session-management#session-expiration) [Session Freshness](https://www.better-auth.com/docs/concepts/session-management#session-freshness) [Session Management](https://www.better-auth.com/docs/concepts/session-management#session-management) [Get Session](https://www.better-auth.com/docs/concepts/session-management#get-session) [Use Session](https://www.better-auth.com/docs/concepts/session-management#use-session) [List Sessions](https://www.better-auth.com/docs/concepts/session-management#list-sessions) [Revoke Session](https://www.better-auth.com/docs/concepts/session-management#revoke-session) [Revoke Other Sessions](https://www.better-auth.com/docs/concepts/session-management#revoke-other-sessions) [Revoke All Sessions](https://www.better-auth.com/docs/concepts/session-management#revoke-all-sessions) [Revoking Sessions on Password Change](https://www.better-auth.com/docs/concepts/session-management#revoking-sessions-on-password-change) [Session Caching](https://www.better-auth.com/docs/concepts/session-management#session-caching) [Cookie Cache](https://www.better-auth.com/docs/concepts/session-management#cookie-cache) [Customizing Session Response](https://www.better-auth.com/docs/concepts/session-management#customizing-session-response)Docs

On this pageBefore Hooks

# Hooks

Hooks in Better Auth let you "hook into" the lifecycle and execute custom logic. They provide a way to customize Better Auth's behavior without writing a full plugin.

We highly recommend using hooks if you need to make custom adjustments to an endpoint rather than making another endpoint outside of better auth.

## [Before Hooks](https://www.better-auth.com/docs/concepts/hooks\#before-hooks)

**Before hooks** run _before_ an endpoint is executed. Use them to modify requests, pre validate data, or return early.

### [Example: Enforce Email Domain Restriction](https://www.better-auth.com/docs/concepts/hooks\#example-enforce-email-domain-restriction)

This hook ensures that users can only sign up if their email ends with `@example.com`:

auth.ts

```
import { betterAuth } from "better-auth";
import { createAuthMiddleware, APIError } from "better-auth/api";

export const auth = betterAuth({
    hooks: {
        before: createAuthMiddleware(async (ctx) => {
            if (ctx.path !== "/sign-up/email") {
                return;
            }
            if (!ctx.body?.email.endsWith("@example.com")) {
                throw new APIError("BAD_REQUEST", {
                    message: "Email must end with @example.com",
                });
            }
        }),
    },
});
```

### [Example: Modify Request Context](https://www.better-auth.com/docs/concepts/hooks\#example-modify-request-context)

To adjust the request context before proceeding:

auth.ts

```
import { betterAuth } from "better-auth";
import { createAuthMiddleware } from "better-auth/api";

export const auth = betterAuth({
    hooks: {
        before: createAuthMiddleware(async (ctx) => {
            if (ctx.path === "/sign-up/email") {
                return {
                    context: {
                        ...ctx,
                        body: {
                            ...ctx.body,
                            name: "John Doe",
                        },
                    }
                };
            }
        }),
    },
});
```

## [After Hooks](https://www.better-auth.com/docs/concepts/hooks\#after-hooks)

**After hooks** run _after_ an endpoint is executed. Use them to modify responses.

### [Example: Send a notification to your channel when a new user is registered](https://www.better-auth.com/docs/concepts/hooks\#example-send-a-notification-to-your-channel-when-a-new-user-is-registered)

auth.ts

```
import { betterAuth } from "better-auth";
import { createAuthMiddleware } from "better-auth/api";
import { sendMessage } from "@/lib/notification"

export const auth = betterAuth({
    hooks: {
        after: createAuthMiddleware(async (ctx) => {
            if(ctx.path.startsWith("/sign-up")){
                const newSession = ctx.context.newSession;
                if(newSession){
                    sendMessage({
                        type: "user-register",
                        name: newSession.user.name,
                    })
                }
            }
        }),
    },
});
```

## [Ctx](https://www.better-auth.com/docs/concepts/hooks\#ctx)

When you call `createAuthMiddleware` a `ctx` object is passed that provides a lot of useful properties. Including:

- **Path:** `ctx.path` to get the current endpoint path.
- **Body:** `ctx.body` for parsed request body (available for POST requests).
- **Headers:** `ctx.headers` to access request headers.
- **Request:** `ctx.request` to access the request object (may not exist in server-only endpoints).
- **Query Parameters:** `ctx.query` to access query parameters.
- **Context**: `ctx.context` auth related context, useful for accessing new session, auth cookies configuration, password hashing, config...

and more.

### [Request Response](https://www.better-auth.com/docs/concepts/hooks\#request-response)

This utilities allows you to get request information and to send response from a hook.

#### [JSON Responses](https://www.better-auth.com/docs/concepts/hooks\#json-responses)

Use `ctx.json` to send JSON responses:

```
const hook = createAuthMiddleware(async (ctx) => {
    return ctx.json({
        message: "Hello World",
    });
});
```

#### [Redirects](https://www.better-auth.com/docs/concepts/hooks\#redirects)

Use `ctx.redirect` to redirect users:

```
import { createAuthMiddleware } from "better-auth/api";

const hook = createAuthMiddleware(async (ctx) => {
    throw ctx.redirect("/sign-up/name");
});
```

#### [Cookies](https://www.better-auth.com/docs/concepts/hooks\#cookies)

- Set cookies: `ctx.setCookies` or `ctx.setSignedCookie`.
- Get cookies: `ctx.getCookies` or `ctx.getSignedCookies`.

Example:

```
import { createAuthMiddleware } from "better-auth/api";

const hook = createAuthMiddleware(async (ctx) => {
    ctx.setCookies("my-cookie", "value");
    await ctx.setSignedCookie("my-signed-cookie", "value", ctx.context.secret, {
        maxAge: 1000,
    });

    const cookie = ctx.getCookies("my-cookie");
    const signedCookie = await ctx.getSignedCookies("my-signed-cookie");
});
```

#### [Errors](https://www.better-auth.com/docs/concepts/hooks\#errors)

Throw errors with `APIError` for a specific status code and message:

```
import { createAuthMiddleware, APIError } from "better-auth/api";

const hook = createAuthMiddleware(async (ctx) => {
    throw new APIError("BAD_REQUEST", {
        message: "Invalid request",
    });
});
```

### [Context](https://www.better-auth.com/docs/concepts/hooks\#context)

The `ctx` object contains another `context` object inside that's meant to hold contexts related to auth. Including a newly created session on after hook, cookies configuration, password hasher and so on.

#### [New Session](https://www.better-auth.com/docs/concepts/hooks\#new-session)

The newly created session after an endpoint is run. This only exist in after hook.

auth.ts

```
createAuthMiddleware(async (ctx) => {
    const newSession = ctx.context.newSession
});
```

#### [Predefined Auth Cookies](https://www.better-auth.com/docs/concepts/hooks\#predefined-auth-cookies)

Access BetterAuth’s predefined cookie properties:

auth.ts

```
createAuthMiddleware(async (ctx) => {
    const cookieName = ctx.context.authCookies.sessionToken.name;
});
```

#### [Secret](https://www.better-auth.com/docs/concepts/hooks\#secret)

You can access the `secret` for your auth instance on `ctx.context.secret`

#### [Password](https://www.better-auth.com/docs/concepts/hooks\#password)

The password object provider `hash` and `verify`

- `ctx.context.password.hash`: let's you hash a given password.
- `ctx.context.password.verify`: let's you verify given `password` and a `hash`.

#### [Adapter](https://www.better-auth.com/docs/concepts/hooks\#adapter)

Adapter exposes the adapter methods used by better auth. Including `findOne`, `findMany`, `create`, `delete`, `update` and `updateMany`. You generally should use your actually `db` instance from your orm rather than this adapter.

#### [Internal Adapter](https://www.better-auth.com/docs/concepts/hooks\#internal-adapter)

These are calls to your db that perform specific actions. `createUser`, `createSession`, `updateSession`...

This may be useful to use instead of using your db directly to get access to `databaseHooks`, proper `secondaryStorage` support and so on. If you're make a query similar to what exist in this internal adapter actions it's worth a look.

#### [generateId](https://www.better-auth.com/docs/concepts/hooks\#generateid)

You can use `ctx.context.generateId` to generate Id for various reasons.

## [Reusable Hooks](https://www.better-auth.com/docs/concepts/hooks\#reusable-hooks)

If you need to reuse a hook across multiple endpoints, consider creating a plugin. Learn more in the [Plugins Documentation](https://www.better-auth.com/docs/concepts/plugins).

[**Email** \\
Learn how to use email with Better Auth.](https://www.better-auth.com/docs/concepts/email) [**Plugins** \\
Learn how to use plugins with Better Auth.](https://www.better-auth.com/docs/concepts/plugins)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Before Hooks](https://www.better-auth.com/docs/concepts/hooks#before-hooks) [Example: Enforce Email Domain Restriction](https://www.better-auth.com/docs/concepts/hooks#example-enforce-email-domain-restriction) [Example: Modify Request Context](https://www.better-auth.com/docs/concepts/hooks#example-modify-request-context) [After Hooks](https://www.better-auth.com/docs/concepts/hooks#after-hooks) [Example: Send a notification to your channel when a new user is registered](https://www.better-auth.com/docs/concepts/hooks#example-send-a-notification-to-your-channel-when-a-new-user-is-registered) [Ctx](https://www.better-auth.com/docs/concepts/hooks#ctx) [Request Response](https://www.better-auth.com/docs/concepts/hooks#request-response) [JSON Responses](https://www.better-auth.com/docs/concepts/hooks#json-responses) [Redirects](https://www.better-auth.com/docs/concepts/hooks#redirects) [Cookies](https://www.better-auth.com/docs/concepts/hooks#cookies) [Errors](https://www.better-auth.com/docs/concepts/hooks#errors) [Context](https://www.better-auth.com/docs/concepts/hooks#context) [New Session](https://www.better-auth.com/docs/concepts/hooks#new-session) [Predefined Auth Cookies](https://www.better-auth.com/docs/concepts/hooks#predefined-auth-cookies) [Secret](https://www.better-auth.com/docs/concepts/hooks#secret) [Password](https://www.better-auth.com/docs/concepts/hooks#password) [Adapter](https://www.better-auth.com/docs/concepts/hooks#adapter) [Internal Adapter](https://www.better-auth.com/docs/concepts/hooks#internal-adapter) [generateId](https://www.better-auth.com/docs/concepts/hooks#generateid) [Reusable Hooks](https://www.better-auth.com/docs/concepts/hooks#reusable-hooks)Docs

On this pageGet your Discord credentials

# Discord

### [Get your Discord credentials](https://www.better-auth.com/docs/authentication/discord\#get-your-discord-credentials)

To use Discord sign in, you need a client ID and client secret. You can get them from the [Discord Developer Portal](https://discord.com/developers/applications).

Make sure to set the redirect URL to `http://localhost:3000/api/auth/callback/discord` for local development. For production, you should set it to the URL of your application. If you change the base path of the auth routes, you should update the redirect URL accordingly.

### [Configure the provider](https://www.better-auth.com/docs/authentication/discord\#configure-the-provider)

To configure the provider, you need to import the provider and pass it to the `socialProviders` option of the auth instance.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        discord: {
            clientId: process.env.DISCORD_CLIENT_ID as string,
            clientSecret: process.env.DISCORD_CLIENT_SECRET as string,
        },
    },
})
```

### [Sign In with Discord](https://www.better-auth.com/docs/authentication/discord\#sign-in-with-discord)

To sign in with Discord, you can use the `signIn.social` function provided by the client. The `signIn` function takes an object with the following properties:

- `provider`: The provider to use. It should be set to `discord`.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "discord"
    })
}
```

[**Apple** \\
Apple provider setup and usage.](https://www.better-auth.com/docs/authentication/apple) [**Facebook** \\
Facebook provider setup and usage.](https://www.better-auth.com/docs/authentication/facebook)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Get your Discord credentials](https://www.better-auth.com/docs/authentication/discord#get-your-discord-credentials) [Configure the provider](https://www.better-auth.com/docs/authentication/discord#configure-the-provider) [Sign In with Discord](https://www.better-auth.com/docs/authentication/discord#sign-in-with-discord)Docs

On this pageMount the handler

# Hono Integration

Before you start, make sure you have a Better Auth instance configured. If you haven't done that yet, check out the [installation](https://www.better-auth.com/docs/installation).

### [Mount the handler](https://www.better-auth.com/docs/integrations/hono\#mount-the-handler)

We need to mount the handler to Hono endpoint.

```
import { Hono } from "hono";
import { auth } from "./auth";
import { serve } from "@hono/node-server";
import { cors } from "hono/cors";

const app = new Hono();

app.on(["POST", "GET"], "/api/auth/*", (c) => {
	return auth.handler(c.req.raw);
});

serve(app);
```

### [Cors](https://www.better-auth.com/docs/integrations/hono\#cors)

To configure cors, you need to use the `cors` plugin from `hono/cors`.

```
import { Hono } from "hono";
import { auth } from "./auth";
import { serve } from "@hono/node-server";
import { cors } from "hono/cors";

const app = new Hono();

app.use(
	"/api/auth/*", // or replace with "*" to enable cors for all routes
	cors({
		origin: "http://localhost:3001", // replace with your origin
		allowHeaders: ["Content-Type", "Authorization"],
		allowMethods: ["POST", "GET", "OPTIONS"],
		exposeHeaders: ["Content-Length"],
		maxAge: 600,
		credentials: true,
	}),
);
```

### [Middleware](https://www.better-auth.com/docs/integrations/hono\#middleware)

You can add a middleware to save the `session` and `user` in a `context` and also add validations for every route.

```
import { Hono } from "hono";
import { auth } from "./auth";
import { serve } from "@hono/node-server";
import { cors } from "hono/cors";

const app = new Hono<{
	Variables: {
		user: typeof auth.$Infer.Session.user | null;
		session: typeof auth.$Infer.Session.session | null
	}
}>();

app.use("*", async (c, next) => {
	const session = await auth.api.getSession({ headers: c.req.raw.headers });

  	if (!session) {
    	c.set("user", null);
    	c.set("session", null);
    	return next();
  	}

  	c.set("user", session.user);
  	c.set("session", session.session);
  	return next();
});

app.on(["POST", "GET"], "/api/auth/*", (c) => {
	return auth.handler(c.req.raw);
});


serve(app);
```

This will allow you to access the `user` and `session` object in all of your routes.

```
app.get("/session", async (c) => {
	const session = c.get("session")
	const user = c.get("user")

	if(!user) return c.body(null, 401);

  	return c.json({
	  session,
	  user
	});
});
```

### [Cross-Domain Cookies](https://www.better-auth.com/docs/integrations/hono\#cross-domain-cookies)

By default, all Better Auth cookies are set with `SameSite=Lax`. If you need to use cookies across different domains, you’ll need to set `SameSite=None` and `Secure=true`. However, we recommend using subdomains whenever possible, as this allows you to keep `SameSite=Lax`. To enable cross-subdomain cookies, simply turn on `crossSubDomainCookies` in your auth config.

auth.ts

```
export const auth = createAuth({
  advanced: {
    crossSubDomainCookies: {
      enabled: true
    }
  }
})
```

If you still need to set `SameSite=None` and `Secure=true`, you can adjust these attributes globally through `cookieOptions` in the `createAuth` configuration.

auth.ts

```
export const auth = createAuth({
  advanced: {
    defaultCookieAttributes: {
      sameSite: "none",
      secure: true
    }
  }
})
```

You can also customize cookie attributes individually by setting them within `cookies` in your auth config.

auth.ts

```
export const auth = createAuth({
  advanced: {
    cookies: {
      sessionToken: {
        sameSite: "none",
        secure: true
      }
    }
  }
})
```

[**TanStack Start Integration** \\
Integrate Better Auth with TanStack Start.](https://www.better-auth.com/docs/integrations/tanstack) [**Express Integration** \\
Integrate Better Auth with Express.](https://www.better-auth.com/docs/integrations/express)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Mount the handler](https://www.better-auth.com/docs/integrations/hono#mount-the-handler) [Cors](https://www.better-auth.com/docs/integrations/hono#cors) [Middleware](https://www.better-auth.com/docs/integrations/hono#middleware) [Cross-Domain Cookies](https://www.better-auth.com/docs/integrations/hono#cross-domain-cookies)Docs

On this pageInstallation

# Magic link

Magic link or email link is a way to authenticate users without a password. When a user enters their email, a link is sent to their email. When the user clicks on the link, they are authenticated.

## [Installation](https://beta.better-auth.com/docs/plugins/magic-link\#installation)

### [Add the server Plugin](https://beta.better-auth.com/docs/plugins/magic-link\#add-the-server-plugin)

Add the magic link plugin to your server:

server.ts

```
import { betterAuth } from "better-auth";
import { magicLink } from "better-auth/plugins";

export const auth = betterAuth({
    plugins: [\
        magicLink({\
            sendMagicLink: async ({ email, token, url }, request) => {\
                // send email to user\
            }\
        })\
    ]
})
```

### [Add the client Plugin](https://beta.better-auth.com/docs/plugins/magic-link\#add-the-client-plugin)

Add the magic link plugin to your client:

auth-client.ts

```
import { createAuthClient } from "better-auth/client";
import { magicLinkClient } from "better-auth/client/plugins";
const authClient =  createAuthClient({
    plugins: [\
        magicLinkClient()\
    ]
});
```

## [Usage](https://beta.better-auth.com/docs/plugins/magic-link\#usage)

### [Sign In with Magic Link](https://beta.better-auth.com/docs/plugins/magic-link\#sign-in-with-magic-link)

To sign in with a magic link, you need to call `signIn.magicLink` with the user's email address. The `sendMagicLink` function is called to send the magic link to the user's email.

magic-link.ts

```
const { data, error } = await authClient.signIn.magicLink({
  email: "user@email.com",
  callbackURL: "/dashboard", //redirect after successful login (optional)
});
```

If the user has not signed up, unless `disableSignUp` is set to `true`, the user will be signed up automatically.

### [Verify Magic Link](https://beta.better-auth.com/docs/plugins/magic-link\#verify-magic-link)

When you send the URL generated by the `sendMagicLink` function to a user, clicking the link will authenticate them and redirect them to the `callbackURL` specified in the `signIn.magicLink` function. If an error occurs, the user will be redirected to the `callbackURL` with an error query parameter.

If no `callbackURL` is provided, the user will be redirected to the root URL.

If you want to handle the verification manually, (e.g, if you send the user a different url), you can use the `verify` function.

magic-link.ts

```
const { data, error } = await authClient.magicLink.verify({
  query: {
    token,
  },
});
```

## [Configuration Options](https://beta.better-auth.com/docs/plugins/magic-link\#configuration-options)

**sendMagicLink**: The `sendMagicLink` function is called when a user requests a magic link. It takes an object with the following properties:

- `email`: The email address of the user.
- `url`: The url to be sent to the user. This url contains the token.
- `token`: The token if you want to send the token with custom url.

and a `request` object as the second parameter.

**expiresIn**: specifies the time in seconds after which the magic link will expire. The default value is `300` seconds (5 minutes).

**disableSignUp**: If set to `true`, the user will not be able to sign up using the magic link. The default value is `false`.

**generateToken**: The `generateToken` function is called to generate a token which is used to uniquely identify the user. The default value is a random string. There is one parameter:

- `email`: The email address of the user.

When using `generateToken`, ensure that the returned string is hard to guess
because it is used to verify who someone actually is in a confidential way. By
default, we return a long and cryptographically secure string.

[**Phone Number** \\
Phone number plugin](https://beta.better-auth.com/docs/plugins/phone-number) [**Email OTP** \\
Email OTP plugin for Better Auth.](https://beta.better-auth.com/docs/plugins/email-otp)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://beta.better-auth.com/docs/plugins/magic-link#installation) [Add the server Plugin](https://beta.better-auth.com/docs/plugins/magic-link#add-the-server-plugin) [Add the client Plugin](https://beta.better-auth.com/docs/plugins/magic-link#add-the-client-plugin) [Usage](https://beta.better-auth.com/docs/plugins/magic-link#usage) [Sign In with Magic Link](https://beta.better-auth.com/docs/plugins/magic-link#sign-in-with-magic-link) [Verify Magic Link](https://beta.better-auth.com/docs/plugins/magic-link#verify-magic-link) [Configuration Options](https://beta.better-auth.com/docs/plugins/magic-link#configuration-options)Docs

On this pageCalling API Endpoints on the Server

# API

When you create a new Better Auth instance, it gives you an `api` object. This object provides functions to interact with the server while your code is running server-side. You can use these functions to call any API endpoint on the server.

Any endpoint added to Better Auth, whether from plugins or the core, will be accessible through the `api` object.

## [Calling API Endpoints on the Server](https://www.better-auth.com/docs/concepts/api\#calling-api-endpoints-on-the-server)

To call an API endpoint on the server, import your `auth` instance and call the endpoint using the `api` object.

server.ts

```
import { betterAuth } from "better-auth";
import { headers } from "next/headers";

export const auth = betterAuth({
    //...
})

// calling get session on the server
await auth.api.getSession({
    headers: headers()
})
```

Unlike the client, the server needs the values to be passed as an object with the key `body` for the body, `headers` for the headers, and `query` for the query.

server.ts

```
await auth.api.signInEmail({
    body: {
        email: "",
        password: ""
    }
})
```

Better auth API endpoints are built on top of [better-call](https://github.com/bekacru/better-call), a tiny web framework that lets you call REST API endpoints as if they were regular functions and allows us to easily infer client types from the server.

### [Getting the `Response` Object](https://www.better-auth.com/docs/concepts/api\#getting-the-response-object)

When you invoke an API endpoint on the server, it will return a standard JavaScript object or array directly. To get the `Response` object instead, you can use the `asResponse` option.

server.ts

```
const response = await auth.api.signInEmail({
    body: {
        email: "",
        password: ""
    },
    asResponse: true
})
```

### [Error Handling](https://www.better-auth.com/docs/concepts/api\#error-handling)

When you call an API endpoint in the server, it will throw an error if the request fails. You can catch the error and handle it as you see fit. The error instance is an instance of `APIError`.

server.ts

```
import { APIError } from "better-auth/api";

try {
    await auth.api.signInEmail({
        body: {
            email: "",
            password: ""
        }
    })
} catch (error) {
    if (error instanceof APIError) {
        console.log(error.message, error.status)
    }
}
```

[**Basic Usage** \\
Getting started with Better Auth](https://www.better-auth.com/docs/basic-usage) [**CLI** \\
Built in CLI for managing your project.](https://www.better-auth.com/docs/concepts/cli)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Calling API Endpoints on the Server](https://www.better-auth.com/docs/concepts/api#calling-api-endpoints-on-the-server) [Getting the `Response` Object](https://www.better-auth.com/docs/concepts/api#getting-the-response-object) [Error Handling](https://www.better-auth.com/docs/concepts/api#error-handling)# All of the changes made will beavailable here.

Better Auth is comprehensive authentication library for TypeScript that provides a wide range of features to make authentication easier and more secure.

* * *

[Documentation](https://beta.better-auth.com/docs) [GitHub](https://github.com/better-auth/better-auth) [Community](https://discord.gg/GYC3W7tZzb)

[BETTER-AUTH.](https://x.com/better_auth)

## Feb 14, 2025       [v1.1.18](https://beta.better-auth.com/changelogs\#v1.1.18)   Feb 14, 2025

### 🚀 Features

- Custom generate token function for magic links – [![@t3duk](https://github.com/t3duk.png)](https://github.com/t3duk)
- Support function for trusted origins configuration – [![@ping-maxwell](https://github.com/ping-maxwell.png)](https://github.com/ping-maxwell)[![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **admin**: Set user password – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **generic-oauth**: OAuth2 link account – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **organization**: Leave organization – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **username**: Add default validation and options for validating username – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)

### 🐞 Bug Fixes

- Remove zod type export from clients – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- Log error in handleOAuthUserInfo – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- Use Partial for body and query in InferRoute type – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- Database hooks should use Partial types to avoid overwriting previous hooks returns – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **cli**: Add on delete cascade constraint to drizzle references – [![@gregtjack](https://github.com/gregtjack.png)](https://github.com/gregtjack)
- **expo**: Headers should be retrieved from APIError in OAuth hook – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **phone-number**: Ensure callbackOnVerification is called after user verification – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **rate-limit**: Use the passed model name for rate limiter storage – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)

##### [View changes on GitHub](https://github.com/better-auth/better-auth/compare/v1.1.17...v1.1.18)

## Feb 11, 2025       [v1.1.17](https://beta.better-auth.com/changelogs\#v1.1.17)   Feb 11, 2025

### 🐞 Bug Fixes

- Update user should use `id` as a reference – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- Update session cache on email verification – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- SocialProvider return null if undefined – [![@baptisteArno](https://github.com/baptisteArno.png)](https://github.com/baptisteArno)
- Allow partial returns from update hooks – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **auth**: Update cookie handling in anonymous and multi-session plugins – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **cli**: Wrong kysely schema filename – [![@alfanjauhari](https://github.com/alfanjauhari.png)](https://github.com/alfanjauhari)
- **drizzle**: Drizzle with mysql update breaks on anything other than update by id – [![@Kinfe123](https://github.com/Kinfe123.png)](https://github.com/Kinfe123)[![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **username**: Return email not verified instead of invalid email and password – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)

##### [View changes on GitHub](https://github.com/better-auth/better-auth/compare/v1.1.16...v1.1.17)

## Feb 5, 2025       [v1.1.16](https://beta.better-auth.com/changelogs\#v1.1.16)   Feb 5, 2025

### 🚀 Features

- Add cookie helper for middlewares – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- Add refetch function for all client hooks – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)

### 🐞 Bug Fixes

- Trigger session update on delete user – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- Handle converting date on session parsing from cookie cache – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- Google IdToken auth issuer mismatch – [![@abegehr](https://github.com/abegehr.png)](https://github.com/abegehr)
- Make session table optional when secondary storage is provided – [![@Bekacru](https://github.com/Bekacru.png)](https://github.com/Bekacru)
- **anonymous**:
  - Add sign-up route to linking matcher  -  by @Bekacru [<samp>(6e659)</samp>](https://github.com/better-auth/better-auth/commit/6e659fd6)
  - Link account user and session type should be less strict  -  by @Bekacru [<samp>(2cb80)</samp>](https://github.com/better-auth/better-auth/commit/2cb80056)
- **drizzle**:
  - Incorrect call to `getModelName`  -  by @chrnorm in https://github.com/better-auth/better-auth/issues/1329 [<samp>(9a3e2)</samp>](https://github.com/better-auth/better-auth/commit/9a3e2950)
  - Drizzle adapter failing to return data on create and update when using mysql  -  by @Kinfe123 in https://github.com/better-auth/better-auth/issues/1358 [<samp>(4748b)</samp>](https://github.com/better-auth/better-auth/commit/4748bcc4)
- **oidc**:
  - Missing content type header on openId configuration endpoint  -  by @Bekacru [<samp>(cb91d)</samp>](https://github.com/better-auth/better-auth/commit/cb91d158)
- **passkey**:
  - Use options base url for rpID  -  by @Bekacru [<samp>(2da63)</samp>](https://github.com/better-auth/better-auth/commit/2da63158)
- **security**:
  - Santize query param on error page  -  by @Bekacru [<samp>(7ae34)</samp>](https://github.com/better-auth/better-auth/commit/7ae340e2)

##### [View changes on GitHub](https://github.com/better-auth/better-auth/compare/v1.1.15...v1.1.16)Docs

On this pageInstallation

# Passkey

Passkeys are a secure, passwordless authentication method using cryptographic key pairs, supported by WebAuthn and FIDO2 standards in web browsers. They replace passwords with unique key pairs: a private key stored on the user’s device and a public key shared with the website. Users can log in using biometrics, PINs, or security keys, providing strong, phishing-resistant authentication without traditional passwords.

The passkey plugin implementation is powered by [simple-web-authn](https://simplewebauthn.dev/) behind the scenes.

## [Installation](https://www.better-auth.com/docs/plugins/passkey\#installation)

### [Add the plugin to your auth config](https://www.better-auth.com/docs/plugins/passkey\#add-the-plugin-to-your-auth-config)

To add the passkey plugin to your auth config, you need to import the plugin and pass it to the `plugins` option of the auth instance.

**Options**

`rpID`: A unique identifier for your website. 'localhost' is okay for local dev

`rpName`: Human-readable title for your website

`origin`: The URL at which registrations and authentications should occur. ' [http://localhost](http://localhost/)' and ' [http://localhost:PORT](http://localhost:PORT)' are also valid. Do **NOT** include any trailing /

auth.ts

```
import { betterAuth } from "better-auth"
import { passkey } from "better-auth/plugins/passkey"

export const auth = betterAuth({
    plugins: [\
        passkey(),\
    ],
})
```

### [Migrate the database](https://www.better-auth.com/docs/plugins/passkey\#migrate-the-database)

Run the migration or generate the schema to add the necessary fields and tables to the database.

migrategenerate

```
npx @better-auth/cli migrate
```

See the [Schema](https://www.better-auth.com/docs/plugins/passkey#schema) section to add the fields manually.

### [Add the client plugin](https://www.better-auth.com/docs/plugins/passkey\#add-the-client-plugin)

auth-client.ts

```
   import { createAuthClient } from "better-auth/client"
   import { passkeyClient } from "better-auth/client/plugins"

   const authClient =  createAuthClient({
       plugins: [\
           passkeyClient()\
       ]
   })
```

## [Usage](https://www.better-auth.com/docs/plugins/passkey\#usage)

### [Add/Register a passkey](https://www.better-auth.com/docs/plugins/passkey\#addregister-a-passkey)

To add or register a passkey make sure a user is authenticated and then call the `passkey.addPasskey` function provided by the client.

auth-client.ts

```
import { createAuthClient } from "better-auth/client";
import { passkeyClient } from "better-auth/client/plugins";

const authClient = createAuthClient({
  plugins: [\
    passkeyClient(),\
  ],
});
const data = await authClient.passkey.addPasskey();
```

This will prompt the user to register a passkey. And it'll add the passkey to the user's account.

### [Signin with a passkey](https://www.better-auth.com/docs/plugins/passkey\#signin-with-a-passkey)

To signin with a passkey you can use the passkeySignIn method. This will prompt the user to sign in with their passkey.

Signin method accepts:

`autoFill`: Browser autofill, a.k.a. Conditional UI. [read more](https://simplewebauthn.dev/docs/packages/browser#browser-autofill-aka-conditional-ui)

`callbackURL`: The URL to redirect to after the user has signed in. (optional)

auth-client.ts

```
import { createAuthClient } from "better-auth/client";
import { passkeyClient } from "better-auth/client/plugins";

const authClient = createAuthClient({
  plugins: [\
    passkeyClient(),\
  ],
});
const data = await authClient.signIn.passkey();
```

### [Conditional UI](https://www.better-auth.com/docs/plugins/passkey\#conditional-ui)

The plugin supports conditional UI, which allows the browser to autofill the passkey if the user has already registered a passkey.

There are two requirements for conditional UI to work:

#### [Update input fields](https://www.better-auth.com/docs/plugins/passkey\#update-input-fields)

Add the `autocomplete` attribute with the value `webauthn` to your input fields. You can add this attribute to multiple input fields, but at least one is required for conditional UI to work.

The `webauthn` value should also be the last entry of the `autocomplete` attribute.

```
<label for="name">Username:</label>
<input type="text" name="name" autocomplete="username webauthn">
<label for="password">Password:</label>
<input type="password" name="password" autocomplete="current-password webauthn">
```

#### [Preload the passkeys](https://www.better-auth.com/docs/plugins/passkey\#preload-the-passkeys)

When your component mounts, you can preload the user's passkeys by calling the `authClient.signIn.passkey` method with the `autoFill` option set to `true`.

To prevent unnecessary calls, we will also add a check to see if the browser supports conditional UI.

React

```
useEffect(() => {
   if (!PublicKeyCredential.isConditionalMediationAvailable ||
       !PublicKeyCredential.isConditionalMediationAvailable()) {
     return;
   }

  void authClient.signIn.passkey({ autoFill: true })
}, [])
```

Depending on the browser, a prompt will appear to autofill the passkey. If the user has multiple passkeys, they can select the one they want to use.

Some browsers also require the user to first interact with the input field before the autofill prompt appears.

### [Debugging](https://www.better-auth.com/docs/plugins/passkey\#debugging)

To test your passkey implementation you can use [emulated authenticators](https://developer.chrome.com/docs/devtools/webauthn). This way you can test the registration and sign-in process without even owning a physical device.

## [Schema](https://www.better-auth.com/docs/plugins/passkey\#schema)

The plugin require a new table in the database to store passkey data.

Table Name: `passkey`

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| id | string | PK | Unique identifier for each passkey |
| name | string | ? | The name of the passkey |
| publicKey | string | - | The public key of the passkey |
| userId | string | FK | The id of the user |
| credentialID | string | - | The unique identifier of the registered credential |
| counter | number | - | The counter of the passkey |
| deviceType | string | - | The type of device used to register the passkey |
| backedUp | boolean | - | Whether the passkey is backed up |
| transports | string | - | The transports used to register the passkey |
| createdAt | Date | - | The time when the passkey was created |

## [Options](https://www.better-auth.com/docs/plugins/passkey\#options)

**rpID**: A unique identifier for your website. 'localhost' is okay for local dev.

**rpName**: Human-readable title for your website.

**origin**: The URL at which registrations and authentications should occur. ' [http://localhost](http://localhost/)' and ' [http://localhost:PORT](http://localhost:PORT)' are also valid. Do NOT include any trailing /.

[**Email OTP** \\
Email OTP plugin for Better Auth.](https://www.better-auth.com/docs/plugins/email-otp) [**Generic OAuth** \\
Authenticate users with any OAuth provider](https://www.better-auth.com/docs/plugins/generic-oauth)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/passkey#installation) [Add the plugin to your auth config](https://www.better-auth.com/docs/plugins/passkey#add-the-plugin-to-your-auth-config) [Migrate the database](https://www.better-auth.com/docs/plugins/passkey#migrate-the-database) [Add the client plugin](https://www.better-auth.com/docs/plugins/passkey#add-the-client-plugin) [Usage](https://www.better-auth.com/docs/plugins/passkey#usage) [Add/Register a passkey](https://www.better-auth.com/docs/plugins/passkey#addregister-a-passkey) [Signin with a passkey](https://www.better-auth.com/docs/plugins/passkey#signin-with-a-passkey) [Conditional UI](https://www.better-auth.com/docs/plugins/passkey#conditional-ui) [Update input fields](https://www.better-auth.com/docs/plugins/passkey#update-input-fields) [Preload the passkeys](https://www.better-auth.com/docs/plugins/passkey#preload-the-passkeys) [Debugging](https://www.better-auth.com/docs/plugins/passkey#debugging) [Schema](https://www.better-auth.com/docs/plugins/passkey#schema) [Options](https://www.better-auth.com/docs/plugins/passkey#options)Docs

On this pageGetting Started

# Contributing to BetterAuth

Hello and welcome! We're thrilled that you're interested in contributing to Better Auth. Whether you're fixing bugs, adding new features, improving documentation, or just sharing ideas, your contribution helps make Better Auth better for everyone.

## [Getting Started](https://www.better-auth.com/docs/contribute/getting-started\#getting-started)

Before diving in, here are a few important resources:

- Take a look at our existing [issues](https://github.com/better-auth/better-auth/issues) and [pull requests](https://github.com/better-auth/better-auth/pulls)
- Join our community discussions in [Discord](https://discord.gg/GYC3W7tZzb)

## [Development Setup](https://www.better-auth.com/docs/contribute/getting-started\#development-setup)

To get started with development:

Make sure you have [Node.JS](https://nodejs.org/en/download)
installed, preferably on LTS.

### [1\. Fork the repository](https://www.better-auth.com/docs/contribute/getting-started\#1-fork-the-repository)

Visit [https://github.com/better-auth/better-auth](https://github.com/better-auth/better-auth)

Click the "Fork" button in the top right.

### [2\. Clone your fork](https://www.better-auth.com/docs/contribute/getting-started\#2-clone-your-fork)

```
# Replace YOUR-USERNAME with your GitHub username
git clone https://github.com/YOUR-USERNAME/better-auth.git
cd better-auth
```

### [3\. Install dependencies](https://www.better-auth.com/docs/contribute/getting-started\#3-install-dependencies)

Make sure you have [pnpm](https://pnpm.io/installation) installed!

```
pnpm install
```

### [4\. Prepare ENV files](https://www.better-auth.com/docs/contribute/getting-started\#4-prepare-env-files)

Copy the example env file to create your new `.env` file.

```
cp -n ./docs/.env.example ./docs/.env
```

## [Making changes](https://www.better-auth.com/docs/contribute/getting-started\#making-changes)

Once you have an idea of what you want to contribute, you can start making changes. Here are some steps to get started:

### [1\. Create a new branch](https://www.better-auth.com/docs/contribute/getting-started\#1-create-a-new-branch)

```
# Make sure you're on main
git checkout main

# Pull latest changes
git pull upstream main

# Create and switch to a new branch
git checkout -b feature/your-feature-name
```

### [2\. Start development server](https://www.better-auth.com/docs/contribute/getting-started\#2-start-development-server)

Start the development server:

```
pnpm dev
```

To start the docs server:

```
pnpm -F docs dev
```

### [3\. Make Your Changes](https://www.better-auth.com/docs/contribute/getting-started\#3-make-your-changes)

- Make your changes to the codebase.

- Write tests if needed. (Read more about testing [here](https://www.better-auth.com/docs/contribute/testing))

- Update documentation. (Read more about documenting [here](https://www.better-auth.com/docs/contribute/documenting))


## [Best Practices](https://www.better-auth.com/docs/contribute/getting-started\#best-practices)

- Write clear commit messages
- Update documentation to reflect your changes
- Add tests for new features
- Follow our coding standards
- Keep pull requests focused on a single change

## [Need Help?](https://www.better-auth.com/docs/contribute/getting-started\#need-help)

Don't hesitate to ask for help! You can:

- Open an [issue](https://github.com/better-auth/better-auth/issues) with questions
- Join our [community discussions](https://discord.gg/GYC3W7tZzb)
- Reach out to project maintainers

Together, we can make Better Auth an even better authentication solution. Thank you for being part of our community!
Your contributions are greatly appreciated, and we look forward to collaborating with you!

[**FAQ** \\
Frequently asked questions about Better Auth.](https://www.better-auth.com/docs/reference/faq) [**Areas To Contribute** \\
Areas to contribute to BetterAuth](https://www.better-auth.com/docs/contribute/areas-to-contribute)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Getting Started](https://www.better-auth.com/docs/contribute/getting-started#getting-started) [Development Setup](https://www.better-auth.com/docs/contribute/getting-started#development-setup) [1\. Fork the repository](https://www.better-auth.com/docs/contribute/getting-started#1-fork-the-repository) [2\. Clone your fork](https://www.better-auth.com/docs/contribute/getting-started#2-clone-your-fork) [3\. Install dependencies](https://www.better-auth.com/docs/contribute/getting-started#3-install-dependencies) [4\. Prepare ENV files](https://www.better-auth.com/docs/contribute/getting-started#4-prepare-env-files) [Making changes](https://www.better-auth.com/docs/contribute/getting-started#making-changes) [1\. Create a new branch](https://www.better-auth.com/docs/contribute/getting-started#1-create-a-new-branch) [2\. Start development server](https://www.better-auth.com/docs/contribute/getting-started#2-start-development-server) [3\. Make Your Changes](https://www.better-auth.com/docs/contribute/getting-started#3-make-your-changes) [Best Practices](https://www.better-auth.com/docs/contribute/getting-started#best-practices) [Need Help?](https://www.better-auth.com/docs/contribute/getting-started#need-help)Docs

On this pageSetup & Installations

# Browser Extension Guide

In this guide, we’ll walk you through the steps of creating a browser extension using [Plasmo](https://docs.plasmo.com/) with Better Auth for authentication.

If you would like to view a completed example, you can check out the [browser extension example](https://github.com/better-auth/better-auth/tree/main/examples/browser-extension-example).

The Plasmo framework does not provide a backend for the browser extension.
This guide assumes you have [a backend setup](https://www.better-auth.com/docs/integrations/hono) of BetterAuth and
are ready to create a browser extension to connect to it.

## [Setup & Installations](https://www.better-auth.com/docs/guides/browser-extension-guide\#setup--installations)

Initialize a new Plasmo project with TailwindCSS and a src directory.

```
pnpm create plasmo --with-tailwindcss --with-src
```

Then, install the BetterAuth package.

```
pnpm add better-auth
```

To start the Plasmo development server, run the following command.

```
pnpm dev
```

## [Configure tsconfig](https://www.better-auth.com/docs/guides/browser-extension-guide\#configure-tsconfig)

Configure the `tsconfig.json` file to include `strict` mode.

For this demo, we have also changed the import alias from `~` to `@` and set it to the `src` directory.

tsconfig.json

```
{
    "compilerOptions": {
        "paths": {
            "@/_": [\
                "./src/_"\
            ]
        },
        "strict": true,
        "baseUrl": "."
    }
}
```

## [Create the client auth instance](https://www.better-auth.com/docs/guides/browser-extension-guide\#create-the-client-auth-instance)

Create a new file at `src/auth/auth-client.ts` and add the following code.

src

auth

auth-client.ts

auth-client.ts

```
import { createAuthClient } from "better-auth/react"

export const authClient = createAuthClient({
    baseURL: "http://localhost:3000" /* base url of your Better Auth backend. */,
    plugins: [],
});
```

## [Configure the manifest](https://www.better-auth.com/docs/guides/browser-extension-guide\#configure-the-manifest)

We must ensure the extension knows the URL to the BetterAuth backend.

Head to your package.json file, and add the following code.

package.json

```
{
    //...
    "manifest": {
        "host_permissions": [\
            "https://URL_TO_YOUR_BACKEND" // localhost works too (e.g. http://localhost:3000)\
        ]
    }
}
```

## [You're now ready!](https://www.better-auth.com/docs/guides/browser-extension-guide\#youre-now-ready)

You have now setup BetterAuth for your browser extension.

Add your desired UI and create your dream extension!

To learn more about the client BetterAuth API, check out the [client documentation](https://www.better-auth.com/docs/concepts/client).

Here’s a quick example 😎

src/popup.tsx

```
import { authClient } from "./auth/auth-client"


function IndexPopup() {
    const {data, isPending, error} = authClient.useSession();
    if(isPending){
        return <>Loading...</>
    }
    if(error){
        return <>Error: {error.message}</>
    }
    if(data){
        return <>Signed in as {data.user.name}</>
    }
}

export default IndexPopup;
```

## [Bundle your extension](https://www.better-auth.com/docs/guides/browser-extension-guide\#bundle-your-extension)

To get a production build, run the following command.

```
pnpm build
```

Head over to [chrome://extensions](chrome://extensions) and enable developer mode.

![](https://docs.plasmo.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fdeveloper_mode.76f090f7.png&w=1920&q=75)

Click on "Load Unpacked" and navigate to your extension's `build/chrome-mv3-dev` (or `build/chrome-mv3-prod`) directory.

To see your popup, click on the puzzle piece icon on the Chrome toolbar, and click on your extension.

Learn more about [bundling your extension here.](https://docs.plasmo.com/framework#loading-the-extension-in-chrome)

## [Configure the server auth instance](https://www.better-auth.com/docs/guides/browser-extension-guide\#configure-the-server-auth-instance)

First, we will need your extension URL.

An extension URL formed like this: `chrome-extension://YOUR_EXTENSION_ID`.

You can find your extension ID at [chrome://extensions](chrome://extensions).

![](https://www.better-auth.com/extension-id.png)

Head to your server's auth file, and make sure that your extension's URL is added to the `trustedOrigins` list.

server.ts

```
import { betterAuth } from "better-auth"
import { auth } from "@/auth/auth"

export const auth = betterAuth({
    trustedOrigins: ["chrome-extension://YOUR_EXTENSION_ID"],
})
```

## [That's it!](https://www.better-auth.com/docs/guides/browser-extension-guide\#thats-it)

Everything is set up! You can now start developing your extension. 🎉

## [Wrapping Up](https://www.better-auth.com/docs/guides/browser-extension-guide\#wrapping-up)

Congratulations! You’ve successfully created a browser extension using BetterAuth and Plasmo.
We highly recommend you visit the [Plasmo documentation](https://docs.plasmo.com/) to learn more about the framework.

If you would like to view a completed example, you can check out the [browser extension example](https://github.com/better-auth/better-auth/tree/main/examples/browser-extension-example).

If you have any questions, feel free to open an issue on our [Github repo](https://github.com/better-auth/better-auth/issues), or join our [Discord server](https://discord.gg/6jHcdYMzyq) for support.

[**Create your first plugin** \\
A step-by-step guide to creating your first Better Auth plugin.](https://www.better-auth.com/docs/guides/your-first-plugin) [**Optimizing for Performance** \\
A guide to optimizing your Better Auth application for performance.](https://www.better-auth.com/docs/guides/optimizing-for-performance)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Setup & Installations](https://www.better-auth.com/docs/guides/browser-extension-guide#setup--installations) [Configure tsconfig](https://www.better-auth.com/docs/guides/browser-extension-guide#configure-tsconfig) [Create the client auth instance](https://www.better-auth.com/docs/guides/browser-extension-guide#create-the-client-auth-instance) [Configure the manifest](https://www.better-auth.com/docs/guides/browser-extension-guide#configure-the-manifest) [You're now ready!](https://www.better-auth.com/docs/guides/browser-extension-guide#youre-now-ready) [Bundle your extension](https://www.better-auth.com/docs/guides/browser-extension-guide#bundle-your-extension) [Configure the server auth instance](https://www.better-auth.com/docs/guides/browser-extension-guide#configure-the-server-auth-instance) [That's it!](https://www.better-auth.com/docs/guides/browser-extension-guide#thats-it) [Wrapping Up](https://www.better-auth.com/docs/guides/browser-extension-guide#wrapping-up)Docs

On this pageGet your Dropbox credentials

# Dropbox

### [Get your Dropbox credentials](https://www.better-auth.com/docs/authentication/dropbox\#get-your-dropbox-credentials)

To use Dropbox sign in, you need a client ID and client secret. You can get them from the [Dropbox Developer Portal](https://www.dropbox.com/developers). You can Allow "Implicit Grant & PKCE" for the application in the App Console.

Make sure to set the redirect URL to `http://localhost:3000/api/auth/callback/dropbox` for local development. For production, you should set it to the URL of your application. If you change the base path of the auth routes, you should update the redirect URL accordingly.

If you need deeper dive into Dropbox Authentication, you can check out the [official documentation](https://developers.dropbox.com/oauth-guide).

### [Configure the provider](https://www.better-auth.com/docs/authentication/dropbox\#configure-the-provider)

To configure the provider, you need to import the provider and pass it to the `socialProviders` option of the auth instance.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        dropbox: {
            clientId: process.env.DROPBOX_CLIENT_ID as string,
            clientSecret: process.env.DROPBOX_CLIENT_SECRET as string,
        },
    },
})
```

### [Sign In with Dropbox](https://www.better-auth.com/docs/authentication/dropbox\#sign-in-with-dropbox)

To sign in with Dropbox, you can use the `signIn.social` function provided by the client. The `signIn` function takes an object with the following properties:

- `provider`: The provider to use. It should be set to `dropbox`.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "dropbox"
    })
}
```

[**Twitter (X)** \\
Twitter provider setup and usage.](https://www.better-auth.com/docs/authentication/twitter) [**LinkedIn** \\
LinkedIn Provider](https://www.better-auth.com/docs/authentication/linkedin)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Get your Dropbox credentials](https://www.better-auth.com/docs/authentication/dropbox#get-your-dropbox-credentials) [Configure the provider](https://www.better-auth.com/docs/authentication/dropbox#configure-the-provider) [Sign In with Dropbox](https://www.better-auth.com/docs/authentication/dropbox#sign-in-with-dropbox)Docs

On this pageMount the handler

# Astro Integration

Better Auth comes with first class support for Astro. This guide will show you how to integrate Better Auth with Astro.

Before you start, make sure you have a Better Auth instance configured. If you haven't done that yet, check out the [installation](https://www.better-auth.com/docs/installation).

### [Mount the handler](https://www.better-auth.com/docs/integrations/astro\#mount-the-handler)

To enable Better Auth to handle requests, we need to mount the handler to a catch all API route. Create a file inside `/pages/api/auth` called `[...all].ts` and add the following code:

pages/api/auth/\[...all\].ts

```
import { auth } from "~/auth";
import type { APIRoute } from "astro";

export const ALL: APIRoute = async (ctx) => {
	return auth.handler(ctx.request);
};
```

You can change the path on your better-auth configuration but it's recommended to keep it as `/api/auth/[...all]`

## [Create a client](https://www.better-auth.com/docs/integrations/astro\#create-a-client)

Astro supports multiple frontend frameworks, so you can easily import your client based on the framework you're using.

If you're not using a frontend framework, you can still import the vanilla client.

vanillareactvuesveltesolid

lib/auth-client.ts

```
import { createAuthClient } from "better-auth/client"
export const authClient =  createAuthClient()
```

## [Auth Middleware](https://www.better-auth.com/docs/integrations/astro\#auth-middleware)

### [Astro Locals types](https://www.better-auth.com/docs/integrations/astro\#astro-locals-types)

To have types for your Astro locals, you need to set it inside the `env.d.ts` file.

env.d.ts

```

/// <reference path="../.astro/types.d.ts" />

declare namespace App {
    // Note: 'import {} from ""' syntax does not work in .d.ts files.
    interface Locals {
        user: import("better-auth").User | null;
        session: import("better-auth").Session | null;
    }
}
```

### [Middleware](https://www.better-auth.com/docs/integrations/astro\#middleware)

To protect your routes, you can check if the user is authenticated using the `getSession` method in middleware and set the user and session data using the Astro locals with the types we set before. Start by creating a `middleware.ts` file in the root of your project and follow the example below:

middleware.ts

```
import { auth } from "@/auth";
import { defineMiddleware } from "astro:middleware";

export const onRequest = defineMiddleware(async (context, next) => {
    const isAuthed = await auth.api
        .getSession({
            headers: context.request.headers,
        })

    if (isAuthed) {
        context.locals.user = isAuthed.user;
        context.locals.session = isAuthed.session;
    } else {
        context.locals.user = null;
        context.locals.session = null;
    }

    return next();
});
```

### [Getting session on the server inside `.astro` file](https://www.better-auth.com/docs/integrations/astro\#getting-session-on-the-server-inside-astro-file)

You can use `Astro.locals` to check if the user has session and get the user data from the server side. Here is an example of how you can get the session inside an `.astro` file:

```
---
import { UserCard } from "@/components/user-card";

const session = () => {
    if (Astro.locals.session) {
        return Astro.locals.session;
    } else {
        // Redirect to login page if the user is not authenticated
        return Astro.redirect("/login");
    }
}

---

<UserCard initialSession={session} />
```

[**Other Social Providers** \\
Other social providers setup and usage.](https://www.better-auth.com/docs/authentication/other-social-providers) [**Remix Integration** \\
Integrate Better Auth with Remix.](https://www.better-auth.com/docs/integrations/remix)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Mount the handler](https://www.better-auth.com/docs/integrations/astro#mount-the-handler) [Create a client](https://www.better-auth.com/docs/integrations/astro#create-a-client) [Auth Middleware](https://www.better-auth.com/docs/integrations/astro#auth-middleware) [Astro Locals types](https://www.better-auth.com/docs/integrations/astro#astro-locals-types) [Middleware](https://www.better-auth.com/docs/integrations/astro#middleware) [Getting session on the server inside `.astro` file](https://www.better-auth.com/docs/integrations/astro#getting-session-on-the-server-inside-astro-file)Docs

On this pageInstallation

# Admin

The Admin plugin provides a set of administrative functions for user management in your application. It allows administrators to perform various operations such as creating users, managing user roles, banning/unbanning users, impersonating users, and more.

## [Installation](https://www.better-auth.com/docs/plugins/admin\#installation)

### [Add the plugin to your auth config](https://www.better-auth.com/docs/plugins/admin\#add-the-plugin-to-your-auth-config)

To use the Admin plugin, add it to your auth config.

auth.ts

```
import { betterAuth } from "better-auth"
import { admin } from "better-auth/plugins"

export const auth = betterAuth({
    // ... other config options
    plugins: [\
        admin()\
    ]
})
```

### [Migrate the database](https://www.better-auth.com/docs/plugins/admin\#migrate-the-database)

Run the migration or generate the schema to add the necessary fields and tables to the database.

migrategenerate

```
npx @better-auth/cli migrate
```

See the [Schema](https://www.better-auth.com/docs/plugins/admin#schema) section to add the fields manually.

### [Add the client plugin](https://www.better-auth.com/docs/plugins/admin\#add-the-client-plugin)

Next, include the admin client plugin in your authentication client instance.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
import { adminClient } from "better-auth/client/plugins"

const authClient = createAuthClient({
    plugins: [\
        adminClient()\
    ]
})
```

## [Usage](https://www.better-auth.com/docs/plugins/admin\#usage)

Before performing any admin operations, the user must be authenticated with an admin account. An admin is any user assigned the `admin` role. For the first admin user, you'll need to manually assign the `admin` role to their account in your database.

### [Create User](https://www.better-auth.com/docs/plugins/admin\#create-user)

Allows an admin to create a new user.

admin.ts

```
const newUser = await authClient.admin.createUser({
  name: "Test User",
  email: "test@example.com",
  password: "password123",
  role: "user",
  data: {
    // any additional on the user table including plugin fields and custom fields
    customField: "customValue"
  }
});
```

### [List Users](https://www.better-auth.com/docs/plugins/admin\#list-users)

Allows an admin to list all users in the database.

admin.ts

```
const users = await authClient.admin.listUsers({
    query: {
        limit: 10,
    }
});
```

By default, 100 users are returned. You can adjust the limit and offset using the following query parameters:

- `search`: The search query to apply to the users. It can be an object with the following properties:
  - `field`: The field to search on, which can be `email` or `name`.
  - `operator`: The operator to use for the search. It can be `contains`, `starts_with`, or `ends_with`.
  - `value`: The value to search for.
- `limit`: The number of users to return.
- `offset`: The number of users to skip.
- `sortBy`: The field to sort the users by.
- `sortDirection`: The direction to sort the users by. Defaults to `asc`.
- `filter`: The filter to apply to the users. It can be an array of objects.

admin.ts

```
const users = await authClient.admin.listUsers({
    query: {
        searchField: "email",
        searchOperator: "contains",
        searchValue: "@example.com",
        limit: 10,
        offset: 0,
        sortBy: "createdAt",
        sortDirection: "desc"
        filterField: "role",
        filterOperator: "eq",
        filterValue: "admin"
    }
});
```

### [Set User Role](https://www.better-auth.com/docs/plugins/admin\#set-user-role)

Changes the role of a user.

admin.ts

```
const updatedUser = await authClient.admin.setRole({
  userId: "user_id_here",
  role: "admin"
});
```

### [Ban User](https://www.better-auth.com/docs/plugins/admin\#ban-user)

Bans a user, preventing them from signing in and revokes all of their existing sessions.

admin.ts

```
const bannedUser = await authClient.admin.banUser({
  userId: "user_id_here",
  banReason: "Spamming", // Optional (if not provided, the default ban reason will be used - No reason)
  banExpiresIn: 60 * 60 * 24 * 7 // Optional (if not provided, the ban will never expire)
});
```

### [Unban User](https://www.better-auth.com/docs/plugins/admin\#unban-user)

Removes the ban from a user, allowing them to sign in again.

admin.ts

```
const unbannedUser = await authClient.admin.unbanUser({
  userId: "user_id_here"
});
```

### [List User Sessions](https://www.better-auth.com/docs/plugins/admin\#list-user-sessions)

Lists all sessions for a user.

admin.ts

```
const sessions = await authClient.admin.listUserSessions({
  userId: "user_id_here"
});
```

### [Revoke User Session](https://www.better-auth.com/docs/plugins/admin\#revoke-user-session)

Revokes a specific session for a user.

admin.ts

```
const revokedSession = await authClient.admin.revokeUserSession({
 sessionToken: "session_token_here"
});
```

### [Revoke All Sessions for a User](https://www.better-auth.com/docs/plugins/admin\#revoke-all-sessions-for-a-user)

Revokes all sessions for a user.

admin.ts

```
const revokedSessions = await authClient.admin.revokeUserSessions({
  userId: "user_id_here"
});
```

### [Impersonate User](https://www.better-auth.com/docs/plugins/admin\#impersonate-user)

This feature allows an admin to create a session that mimics the specified user. The session will remain active until either the browser session ends or it reaches 1 hour. You can change this duration by setting the `impersonationSessionDuration` option.

admin.ts

```
const impersonatedSession = await authClient.admin.impersonateUser({
  userId: "user_id_here"
});
```

### [Stop Impersonating User](https://www.better-auth.com/docs/plugins/admin\#stop-impersonating-user)

To stop impersonating a user and continue with the admin account, you can use `stopImpersonating`

admin.ts

```
await authClient.admin.stopImpersonating();
```

### [Remove User](https://www.better-auth.com/docs/plugins/admin\#remove-user)

Hard deletes a user from the database.

admin.ts

```
const deletedUser = await authClient.admin.removeUser({
  userId: "user_id_here"
});
```

## [Schema](https://www.better-auth.com/docs/plugins/admin\#schema)

This plugin adds the following fields to the `user` table:

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| role | string | ? | The user's role. Defaults to \`user\`. Admins will have the \`admin\` role. |
| banned | boolean | ? | Indicates whether the user is banned. |
| banReason | string | ? | The reason for the user's ban. |
| banExpires | number | ? | The Unix timestamp when the user's ban will expire. |

And adds one field in the `session` table:

| Field Name | Type | Key | Description |
| --- | --- | --- | --- |
| impersonatedBy | string | ? | The ID of the admin that is impersonating this session. |

## [Options](https://www.better-auth.com/docs/plugins/admin\#options)

### [Default Role](https://www.better-auth.com/docs/plugins/admin\#default-role)

The default role for a user. Defaults to `user`.

auth.ts

```
admin({
    defaultRole: "regular"
})
```

you can pass `false` to disable assigning default role

auth.ts

```
admin({
    defaultRole: false //pass false to disable default role assignment
})
```

### [Admin role](https://www.better-auth.com/docs/plugins/admin\#admin-role)

You can specify what role should be consider admin. Default to `admin`

auth.ts

```
admin({
    adminRole: ["admin", "superAdmin"]
})
```

### [impersonationSessionDuration](https://www.better-auth.com/docs/plugins/admin\#impersonationsessionduration)

The duration of the impersonation session in seconds. Defaults to 1 hour.

auth.ts

```
admin({
    impersonationSessionDuration: 60 * 60 * 24 // 1 day
})
```

### [Default Ban Reason](https://www.better-auth.com/docs/plugins/admin\#default-ban-reason)

The default ban reason for a user created by the admin. Defaults to `No reason`.

auth.ts

```
admin({
    defaultBanReason: "Spamming"
})
```

### [Default Ban Expires In](https://www.better-auth.com/docs/plugins/admin\#default-ban-expires-in)

The default ban expires in for a user created by the admin in seconds. Defaults to `undefined` (meaning the ban never expires).

auth.ts

```
admin({
    defaultBanExpiresIn: 60 * 60 * 24 // 1 day
})
```

[**One Tap** \\
One Tap plugin for Better Auth](https://www.better-auth.com/docs/plugins/one-tap) [**Organization** \\
The organization plugin allows you to manage your organization's members and teams.](https://www.better-auth.com/docs/plugins/organization)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/admin#installation) [Add the plugin to your auth config](https://www.better-auth.com/docs/plugins/admin#add-the-plugin-to-your-auth-config) [Migrate the database](https://www.better-auth.com/docs/plugins/admin#migrate-the-database) [Add the client plugin](https://www.better-auth.com/docs/plugins/admin#add-the-client-plugin) [Usage](https://www.better-auth.com/docs/plugins/admin#usage) [Create User](https://www.better-auth.com/docs/plugins/admin#create-user) [List Users](https://www.better-auth.com/docs/plugins/admin#list-users) [Set User Role](https://www.better-auth.com/docs/plugins/admin#set-user-role) [Ban User](https://www.better-auth.com/docs/plugins/admin#ban-user) [Unban User](https://www.better-auth.com/docs/plugins/admin#unban-user) [List User Sessions](https://www.better-auth.com/docs/plugins/admin#list-user-sessions) [Revoke User Session](https://www.better-auth.com/docs/plugins/admin#revoke-user-session) [Revoke All Sessions for a User](https://www.better-auth.com/docs/plugins/admin#revoke-all-sessions-for-a-user) [Impersonate User](https://www.better-auth.com/docs/plugins/admin#impersonate-user) [Stop Impersonating User](https://www.better-auth.com/docs/plugins/admin#stop-impersonating-user) [Remove User](https://www.better-auth.com/docs/plugins/admin#remove-user) [Schema](https://www.better-auth.com/docs/plugins/admin#schema) [Options](https://www.better-auth.com/docs/plugins/admin#options) [Default Role](https://www.better-auth.com/docs/plugins/admin#default-role) [Admin role](https://www.better-auth.com/docs/plugins/admin#admin-role) [impersonationSessionDuration](https://www.better-auth.com/docs/plugins/admin#impersonationsessionduration) [Default Ban Reason](https://www.better-auth.com/docs/plugins/admin#default-ban-reason) [Default Ban Expires In](https://www.better-auth.com/docs/plugins/admin#default-ban-expires-in)Docs

On this pageInstallation

# Generic OAuth

The Generic OAuth plugin provides a flexible way to integrate authentication with any OAuth provider. It supports both OAuth 2.0 and OpenID Connect (OIDC) flows, allowing you to easily add social login or custom OAuth authentication to your application.

## [Installation](https://www.better-auth.com/docs/plugins/generic-oauth\#installation)

### [Add the plugin to your auth config](https://www.better-auth.com/docs/plugins/generic-oauth\#add-the-plugin-to-your-auth-config)

To use the Generic OAuth plugin, add it to your auth config.

auth.ts

```
import { betterAuth } from "better-auth"
import { genericOAuth } from "better-auth/plugins"

export const auth = betterAuth({
    // ... other config options
    plugins: [\
        genericOAuth({\
            config: [\
                {\
                    providerId: "provider-id",\
                    clientId: "test-client-id",\
                    clientSecret: "test-client-secret",\
                    discoveryUrl: "https://auth.example.com/.well-known/openid-configuration",\
                    // ... other config options\
                },\
                // Add more providers as needed\
            ]\
        })\
    ]
})
```

### [Add the client plugin](https://www.better-auth.com/docs/plugins/generic-oauth\#add-the-client-plugin)

Include the Generic OAuth client plugin in your authentication client instance.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
import { genericOAuthClient } from "better-auth/client/plugins"

const authClient = createAuthClient({
    plugins: [\
        genericOAuthClient()\
    ]
})
```

## [Usage](https://www.better-auth.com/docs/plugins/generic-oauth\#usage)

The Generic OAuth plugin provides endpoints for initiating the OAuth flow and handling the callback. Here's how to use them:

### [Initiate OAuth Sign-In](https://www.better-auth.com/docs/plugins/generic-oauth\#initiate-oauth-sign-in)

To start the OAuth sign-in process:

sign-in.ts

```
const response = await authClient.signIn.oauth2({
  providerId: "provider-id",
  callbackURL: "/dashboard" // the path to redirect to after the user is authenticated
});
```

### [Linking OAuth Accounts](https://www.better-auth.com/docs/plugins/generic-oauth\#linking-oauth-accounts)

To link an OAuth account to an existing user:

link-account.ts

```
const response = await authClient.oauth2.link({
  providerId: "provider-id",
  callbackURL: "/dashboard" // the path to redirect to after the account is linked
});
```

### [Handle OAuth Callback](https://www.better-auth.com/docs/plugins/generic-oauth\#handle-oauth-callback)

The plugin mounts a route to handle the OAuth callback `/oauth2/callback/:providerId`. This means by default `${baseURL}/api/auth/oauth2/callback/:providerId` will be used as the callback URL. Make sure your OAuth provider is configured to use this URL.

## [Configuration](https://www.better-auth.com/docs/plugins/generic-oauth\#configuration)

When adding the plugin to your auth config, you can configure multiple OAuth providers. Each provider configuration object supports the following options:

```
interface GenericOAuthConfig {
  providerId: string;
  discoveryUrl?: string;
  authorizationUrl?: string;
  tokenUrl?: string;
  userInfoUrl?: string;
  clientId: string;
  clientSecret: string;
  scopes?: string[];
  redirectURI?: string;
  responseType?: string;
  prompt?: string;
  pkce?: boolean;
  accessType?: string;
  getUserInfo?: (tokens: OAuth2Tokens) => Promise<User | null>;
}
```

- `providerId`: A unique identifier for the OAuth provider.
- `discoveryUrl`: URL to fetch OAuth 2.0 configuration (optional, but recommended for OIDC providers).
- `type`: Type of OAuth flow ("oauth2" or "oidc", defaults to "oauth2").
- `authorizationUrl`: URL for the authorization endpoint (optional if using discoveryUrl).
- `tokenUrl`: URL for the token endpoint (optional if using discoveryUrl).
- `userInfoUrl`: URL for the user info endpoint (optional if using discoveryUrl).
- `clientId`: OAuth client ID.
- `clientSecret`: OAuth client secret.
- `scopes`: Array of OAuth scopes to request.
- `redirectURI`: Custom redirect URI (optional).
- `responseType`: OAuth response type (defaults to "code").
- `prompt`: Controls the authentication experience for the user.
- `pkce`: Whether to use PKCE (Proof Key for Code Exchange, defaults to false).
- `accessType`: Access type for the authorization request.
- `getUserInfo`: Custom function to fetch user info (optional).

## [Advanced Usage](https://www.better-auth.com/docs/plugins/generic-oauth\#advanced-usage)

### [Custom User Info Fetching](https://www.better-auth.com/docs/plugins/generic-oauth\#custom-user-info-fetching)

You can provide a custom `getUserInfo` function to handle specific provider requirements:

```
genericOAuth({
  config: [\
    {\
      providerId: "custom-provider",\
      // ... other config options\
      getUserInfo: async (tokens) => {\
        // Custom logic to fetch and return user info\
        const userInfo = await fetchUserInfoFromCustomProvider(tokens);\
        return {\
          id: userInfo.sub,\
          email: userInfo.email,\
          name: userInfo.name,\
          // ... map other fields as needed\
        };\
      }\
    }\
  ]
})
```

### [Map User Info Fields](https://www.better-auth.com/docs/plugins/generic-oauth\#map-user-info-fields)

If the user info returned by the provider does not match the expected format, or you need to map additional fields, you can use the `mapProfileToUser`:

```
genericOAuth({
  config: [\
    {\
      providerId: "custom-provider",\
      // ... other config options\
      mapProfileToUser: async (profile) => {\
        return {\
          firstName: profile.given_name,\
          // ... map other fields as needed\
        };\
      }\
    }\
  ]
})
```

### [Error Handling](https://www.better-auth.com/docs/plugins/generic-oauth\#error-handling)

The plugin includes built-in error handling for common OAuth issues. Errors are typically redirected to your application's error page with an appropriate error message in the URL parameters. If the callback URL is not provided, the user will be redirected to Better Auth's default error page.

[**Passkey** \\
Passkey](https://www.better-auth.com/docs/plugins/passkey) [**One Tap** \\
One Tap plugin for Better Auth](https://www.better-auth.com/docs/plugins/one-tap)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/generic-oauth#installation) [Add the plugin to your auth config](https://www.better-auth.com/docs/plugins/generic-oauth#add-the-plugin-to-your-auth-config) [Add the client plugin](https://www.better-auth.com/docs/plugins/generic-oauth#add-the-client-plugin) [Usage](https://www.better-auth.com/docs/plugins/generic-oauth#usage) [Initiate OAuth Sign-In](https://www.better-auth.com/docs/plugins/generic-oauth#initiate-oauth-sign-in) [Linking OAuth Accounts](https://www.better-auth.com/docs/plugins/generic-oauth#linking-oauth-accounts) [Handle OAuth Callback](https://www.better-auth.com/docs/plugins/generic-oauth#handle-oauth-callback) [Configuration](https://www.better-auth.com/docs/plugins/generic-oauth#configuration) [Advanced Usage](https://www.better-auth.com/docs/plugins/generic-oauth#advanced-usage) [Custom User Info Fetching](https://www.better-auth.com/docs/plugins/generic-oauth#custom-user-info-fetching) [Map User Info Fields](https://www.better-auth.com/docs/plugins/generic-oauth#map-user-info-fields) [Error Handling](https://www.better-auth.com/docs/plugins/generic-oauth#error-handling)Docs

On this pageGenerate

# CLI

Better Auth comes with a built-in CLI to help you manage the database schema needed for both core functionality and plugins.

## [Generate](https://www.better-auth.com/docs/concepts/cli\#generate)

The `generate` command creates the schema required by Better Auth. If you're using a database adapter like Prisma or Drizzle, this command will generate the right schema for your ORM. If you're using the built-in Kysely adapter, it will generate an SQL file you can run directly on your database.

Terminal

```
npx @better-auth/cli@latest generate
```

### [Options](https://www.better-auth.com/docs/concepts/cli\#options)

- `--output` \- Where to save the generated schema. For Prisma, it will be saved in prisma/schema.prisma. For Drizzle, it goes to schema.ts in your project root. For Kysely, it’s an SQL file saved as schema.sql in your project root.
- `--config` \- The path to your Better Auth config file. By default, the CLI will search for a better-auth.ts file in **./**, **./utils**, **./lib**, or any of these directories under `src` directory.
- `--y` \- Skip the confirmation prompt and generate the schema directly.

## [Migrate](https://www.better-auth.com/docs/concepts/cli\#migrate)

The migrate command applies the Better Auth schema directly to your database. This is available if you’re using the built-in Kysely adapter.

Terminal

```
npx @better-auth/cli@latest migrate
```

### [Options](https://www.better-auth.com/docs/concepts/cli\#options-1)

- `--config` \- The path to your Better Auth config file. By default, the CLI will search for a better-auth.ts file in **./**, **./utils**, **./lib**, or any of these directories under `src` directory.
- `--y` \- Skip the confirmation prompt and apply the schema directly.

## [Common Issues](https://www.better-auth.com/docs/concepts/cli\#common-issues)

**Error: Cannot find module X**

If you see this error, it means the CLI can’t resolve imported modules in your Better Auth config file. We're working on a fix for many of these issues, but in the meantime, you can try the following:

- Remove any import aliases in your config file and use relative paths instead. After running the CLI, you can revert to using aliases.

## [Secret](https://www.better-auth.com/docs/concepts/cli\#secret)

The CLI also provides a way to generate a secret key for your Better Auth instance.

Terminal

```
npx @better-auth/cli@latest secret
```

[**API** \\
Better Auth API.](https://www.better-auth.com/docs/concepts/api) [**Client** \\
Better Auth client library for authentication.](https://www.better-auth.com/docs/concepts/client)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Generate](https://www.better-auth.com/docs/concepts/cli#generate) [Options](https://www.better-auth.com/docs/concepts/cli#options) [Migrate](https://www.better-auth.com/docs/concepts/cli#migrate) [Options](https://www.better-auth.com/docs/concepts/cli#options-1) [Common Issues](https://www.better-auth.com/docs/concepts/cli#common-issues) [Secret](https://www.better-auth.com/docs/concepts/cli#secret)# 500

## Internal Server Error.Docs

On this pageWhy Better Auth?

# Introduction

Better Auth is a framework-agnostic authentication and authorization framework for TypeScript. It provides a comprehensive set of features out of the box and includes a plugin ecosystem that simplifies adding advanced functionalities. Whether you need 2FA, multi-tenancy, multi-session support, or even enterprise features like SSO, it lets you focus on building your application instead of reinventing the wheel.

## [Why Better Auth?](https://www.better-auth.com/docs/introduction\#why-better-auth)

_Authentication in the TypeScript ecosystem has long been a half-solved problem. Other open-source libraries often require a lot of additional code for anything beyond basic authentication features. Rather than just pushing third-party services as the solution, I believe we can do better as a community—hence, Better Auth_

## [Features](https://www.better-auth.com/docs/introduction\#features)

Better Auth aims to be the most comprehensive auth library. It provides a wide range of features out of the box and allows you to extend it with plugins. Here are some of the features:

Framework Agnostic

Support for most popular frameworks

Email & Password

Built-in support for secure email and password authentication

Account & Session Management

Manage user accounts and sessions with ease

Built In Rate Limiter

Built in rate limiter with custom rules

Automatic Database Management

Automatic database management and migrations

Social Sign-on

Multiple social sign-on providers

Organization & Access Control

Manage organizations and access control

Two Factor Authentication

Secure your users with two factor authentication

Plugin Ecosystem

Even more capabilities with plugins

...and much more!

[**Comparison** \\
Comparison of Better Auth versus over other auth libraries and services.](https://www.better-auth.com/docs/comparison)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Why Better Auth?](https://www.better-auth.com/docs/introduction#why-better-auth) [Features](https://www.better-auth.com/docs/introduction#features)Docs

On this pageConfiguring Social Providers

# OAuth

Better Auth comes with built-in support for OAuth 2.0 and OpenID Connect. This allows you to authenticate users via popular OAuth providers like Google, Facebook, GitHub, and more.

If your desired provider isn’t directly supported, you can use the [Generic OAuth Plugin](https://www.better-auth.com/docs/plugins/generic-oauth) for custom integrations.

## [Configuring Social Providers](https://www.better-auth.com/docs/concepts/oauth\#configuring-social-providers)

To enable a social provider, you need to provide `clientId` and `clientSecret` for the provider.

Here’s an example of how to configure Google as a provider:

auth.ts

```
import { betterAuth } from 'better-auth';

export const auth = betterAuth({
    // Other configurations...
    socialProviders: {
        google: {
            clientId: 'YOUR_GOOGLE_CLIENT_ID',
            clientSecret: 'YOUR_GOOGLE_CLIENT_SECRET',
        }
    }
})
```

### [Other Provider Configurations](https://www.better-auth.com/docs/concepts/oauth\#other-provider-configurations)

**scope** The scope of the access request. For example, `email` or `profile`.

**redirectURI** Custom redirect URI for the provider. By default, it uses `/api/auth/callback/${providerName}`.

**disableIdTokenSignIn:** Disables the use of the ID token for sign-in. By default, it’s enabled for some providers like Google and Apple.

**verifyIdToken** A custom function to verify the ID token.

**getUserInfo** A custom function to fetch user information from the provider. Given the tokens returned from the provider, this function should return the user’s information.

**mapProfileToUser** A custom function to map the user profile returned from the provider to the user object in your database.

Useful, if you have additional fields in your user object you want to populate from the provider’s profile. Or if you want to change how by default the user object is mapped.

auth.ts

```
import { betterAuth } from 'better-auth';

export const auth = betterAuth({
    // Other configurations...
    socialProviders: {
        google: {
            clientId: 'YOUR_GOOGLE_CLIENT_ID',
            clientSecret: 'YOUR_GOOGLE_CLIENT_SECRET',
            mapProfileToUser: (profile) => {
                return {
                   firstName: profile.given_name,
                   lastName: profile.family_name,
                }
            }
        }
    }
})
```

## [How OAuth Works in Better Auth](https://www.better-auth.com/docs/concepts/oauth\#how-oauth-works-in-better-auth)

Here’s what happens when a user selects a provider to authenticate with:

1. **Configuration Check:** Ensure the necessary provider details (e.g., client ID, secret) are configured.
2. **State Generation:** Generate and save a state token in your database for CSRF protection.
3. **PKCE Support:** If applicable, create a PKCE code challenge and verifier for secure exchanges.
4. **Authorization URL Construction:** Build the provider’s authorization URL with parameters like client ID, redirect URI, state, etc. The callback URL usually follows the pattern `/api/auth/callback/${providerName}`.
5. **User Redirection:**
   - If redirection is enabled, users are redirected to the provider’s login page.
   - If redirection is disabled, the authorization URL is returned for the client to handle the redirection.

### [Post-Login Flow](https://www.better-auth.com/docs/concepts/oauth\#post-login-flow)

After the user completes the login process, the provider redirects them back to the callback URL with a code and state. Better Auth handles the rest:

1. **Token Exchange:** The code is exchanged for an access token and user information.
2. **User Handling:**
   - If the user doesn’t exist, a new account is created.
   - If the user exists, they are logged in.
   - If the user has multiple accounts across providers, Better Auth links them based on your configuration. Learn more about [account linking](https://www.better-auth.com/docs/concepts/users-accounts#account-linking).
3. **Session Creation:** A new session is created for the user.
4. **Redirect:** Users are redirected to the specified URL provided during the initial request or `/`.

If any error occurs during the process, Better Auth handles it and redirects the user to the error URL (if provided) or the callbackURL. And it includes the error message in the query string `?error=...`.

[**Plugins** \\
Learn how to use plugins with Better Auth.](https://www.better-auth.com/docs/concepts/plugins) [**Rate Limit** \\
How to limit the number of requests a user can make to the server in a given time period.](https://www.better-auth.com/docs/concepts/rate-limit)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Configuring Social Providers](https://www.better-auth.com/docs/concepts/oauth#configuring-social-providers) [Other Provider Configurations](https://www.better-auth.com/docs/concepts/oauth#other-provider-configurations) [How OAuth Works in Better Auth](https://www.better-auth.com/docs/concepts/oauth#how-oauth-works-in-better-auth) [Post-Login Flow](https://www.better-auth.com/docs/concepts/oauth#post-login-flow)Docs

On this pageInstallation

# Multi Session

The multi-session plugin allows users to maintain multiple active sessions across different accounts in the same browser. This plugin is useful for applications that require users to switch between multiple accounts without logging out.

## [Installation](https://www.better-auth.com/docs/plugins/multi-session\#installation)

### [Add the plugin to your **auth** config](https://www.better-auth.com/docs/plugins/multi-session\#add-the-plugin-to-your-auth-config)

auth.ts

```
import { betterAuth } from "better-auth"
import { multiSession } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [\
        multiSession(),\
    ]
})
```

### [Add the client Plugin](https://www.better-auth.com/docs/plugins/multi-session\#add-the-client-plugin)

Add the client plugin and Specify where the user should be redirected if they need to verify 2nd factor

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
import { multiSessionClient } from "better-auth/client/plugins"

const authClient =  createAuthClient({
    plugins: [\
        multiSessionClient()\
    ]
})
```

## [Usage](https://www.better-auth.com/docs/plugins/multi-session\#usage)

Whenever a user logs in, the plugin will add additional cookie to the browser. This cookie will be used to maintain multiple sessions across different accounts.

### [List all device sessions](https://www.better-auth.com/docs/plugins/multi-session\#list-all-device-sessions)

To list all active sessions for the current user, you can call the `listDeviceSessions` method.

```
await authClient.multiSession.listDeviceSessions()
```

on the server you can call `listDeviceSessions` method.

```
await auth.api.listDeviceSessions()
```

### [Set active session](https://www.better-auth.com/docs/plugins/multi-session\#set-active-session)

To set the active session, you can call the `setActive` method.

```
await authClient.multiSession.setActive({
    sessionToken: "session-token"
})
```

### [Revoke a session](https://www.better-auth.com/docs/plugins/multi-session\#revoke-a-session)

To revoke a session, you can call the `revoke` method.

```
await authClient.multiSession.revoke({
    sessionToken: "session-token"
})
```

### [Revoke all sessions](https://www.better-auth.com/docs/plugins/multi-session\#revoke-all-sessions)

To revoke all sessions, you can call the `revokeAll` method.

```
await authClient.multiSession.revokeAll();
```

### [Signout Behaviour](https://www.better-auth.com/docs/plugins/multi-session\#signout-behaviour)

When a user logs out, the plugin will revoke all active sessions for the user.

### [Max Sessions](https://www.better-auth.com/docs/plugins/multi-session\#max-sessions)

You can specify the maximum number of sessions a user can have by passing the `maximumSessions` option to the plugin. By default, the plugin allows 5 sessions per device.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    plugins: [\
        multiSession({\
            maximumSessions: 3\
        })\
    ]
})
```

[**Bearer Token Authentication** \\
Authenticate API requests using Bearer tokens instead of browser cookies](https://www.better-auth.com/docs/plugins/bearer) [**OAuth Proxy** \\
OAuth Proxy plugin for Better Auth](https://www.better-auth.com/docs/plugins/oauth-proxy)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installation](https://www.better-auth.com/docs/plugins/multi-session#installation) [Add the plugin to your **auth** config](https://www.better-auth.com/docs/plugins/multi-session#add-the-plugin-to-your-auth-config) [Add the client Plugin](https://www.better-auth.com/docs/plugins/multi-session#add-the-client-plugin) [Usage](https://www.better-auth.com/docs/plugins/multi-session#usage) [List all device sessions](https://www.better-auth.com/docs/plugins/multi-session#list-all-device-sessions) [Set active session](https://www.better-auth.com/docs/plugins/multi-session#set-active-session) [Revoke a session](https://www.better-auth.com/docs/plugins/multi-session#revoke-a-session) [Revoke all sessions](https://www.better-auth.com/docs/plugins/multi-session#revoke-all-sessions) [Signout Behaviour](https://www.better-auth.com/docs/plugins/multi-session#signout-behaviour) [Max Sessions](https://www.better-auth.com/docs/plugins/multi-session#max-sessions)Docs

On this pageGet your Twitch Credentials

# Twitch

### [Get your Twitch Credentials](https://www.better-auth.com/docs/authentication/twitch\#get-your-twitch-credentials)

To use Twitch sign in, you need a client ID and client secret. You can get them from the [Twitch Developer Portal](https://dev.twitch.tv/console/apps).

Make sure to set the redirect URL to `http://localhost:3000/api/auth/callback/twitch` for local development. For production, you should set it to the URL of your application. If you change the base path of the auth routes, you should update the redirect URL accordingly.

### [Configure the provider](https://www.better-auth.com/docs/authentication/twitch\#configure-the-provider)

To configure the provider, you need to import the provider and pass it to the `socialProviders` option of the auth instance.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        twitch: {
            clientId: process.env.TWITCH_CLIENT_ID as string,
            clientSecret: process.env.TWITCH_CLIENT_SECRET as string,
        },
    }
})
```

### [Sign In with Twitch](https://www.better-auth.com/docs/authentication/twitch\#sign-in-with-twitch)

To sign in with Twitch, you can use the `signIn.social` function provided by the client. The `signIn` function takes an object with the following properties:

- `provider`: The provider to use. It should be set to `twitch`.

auth-client.ts

```
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "twitch"
    })
}
```

[**Microsoft** \\
Microsoft provider setup and usage.](https://www.better-auth.com/docs/authentication/microsoft) [**Twitter (X)** \\
Twitter provider setup and usage.](https://www.better-auth.com/docs/authentication/twitter)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Get your Twitch Credentials](https://www.better-auth.com/docs/authentication/twitch#get-your-twitch-credentials) [Configure the provider](https://www.better-auth.com/docs/authentication/twitch#configure-the-provider) [Sign In with Twitch](https://www.better-auth.com/docs/authentication/twitch#sign-in-with-twitch)Docs

On this pageInstalling the Bearer Plugin

# Bearer Token Authentication

The Bearer plugin enables authentication using Bearer tokens as an alternative to browser cookies. It intercepts requests, adding the Bearer token to the Authorization header before forwarding them to your API.

Use this cautiously; it is intended only for APIs that don't support cookies or require Bearer tokens for authentication. Improper implementation could easily lead to security vulnerabilities.

## [Installing the Bearer Plugin](https://www.better-auth.com/docs/plugins/bearer\#installing-the-bearer-plugin)

Add the Bearer plugin to your authentication setup:

auth.ts

```
import { betterAuth } from "better-auth";
import { bearer } from "better-auth/plugins";

export const auth = betterAuth({
    plugins: [bearer()]
});
```

## [How to Use Bearer Tokens](https://www.better-auth.com/docs/plugins/bearer\#how-to-use-bearer-tokens)

### [1\. Obtain the Bearer Token](https://www.better-auth.com/docs/plugins/bearer\#1-obtain-the-bearer-token)

After a successful sign-in, you'll receive a session token in the response headers. Store this token securely (e.g., in `localStorage`):

auth-client.ts

```
const { data } = await authClient.signIn.email({
    email: "user@example.com",
    password: "securepassword"
}, {
  onSuccess: (ctx)=>{
    const authToken = ctx.response.headers.get("set-auth-token") // get the token from the response headers
    // Store the token securely (e.g., in localStorage)
    localStorage.setItem("bearer_token", authToken);
  }
});
```

You can also set this up globally in your auth client:

auth-client.ts

```
export const authClient = createAuthClient({
    fetchOptions: {
        onSuccess: (ctx) => {
            const authToken = ctx.response.headers.get("set-auth-token") // get the token from the response headers
            // Store the token securely (e.g., in localStorage)
            if(authToken){
              localStorage.setItem("bearer_token", authToken);
            }
        }
    }
});
```

You may want to clear the token based on the response status code or other conditions:

### [2\. Configure the Auth Client](https://www.better-auth.com/docs/plugins/bearer\#2-configure-the-auth-client)

Set up your auth client to include the Bearer token in all requests:

auth-client.ts

```
export const authClient = createAuthClient({
    fetchOptions: {
        auth: {
           type:"Bearer",
           token: () => localStorage.getItem("bearer_token") || "" // get the token from localStorage
        }
    }
});
```

### [3\. Make Authenticated Requests](https://www.better-auth.com/docs/plugins/bearer\#3-make-authenticated-requests)

Now you can make authenticated API calls:

auth-client.ts

```
// This request is automatically authenticated
const { data } = await authClient.listSessions();
```

### [4\. Per-Request Token (Optional)](https://www.better-auth.com/docs/plugins/bearer\#4-per-request-token-optional)

You can also provide the token for individual requests:

auth-client.ts

```
const { data } = await authClient.listSessions({
    fetchOptions: {
        headers: {
            Authorization: `Bearer ${token}`
        }
    }
});
```

### [5\. Using Bearer Tokens Outside the Auth Client](https://www.better-auth.com/docs/plugins/bearer\#5-using-bearer-tokens-outside-the-auth-client)

The Bearer token can be used to authenticate any request to your API, even when not using the auth client:

api-call.ts

```
const token = localStorage.getItem("bearer_token");

const response = await fetch("https://api.example.com/data", {
  headers: {
    Authorization: `Bearer ${token}`
  }
});

const data = await response.json();
```

And in the server, you can use the `auth.api.getSession` function to authenticate requests:

server.ts

```
import { auth } from "@/auth";

export async function handler(req, res) {
  const session = await auth.api.getSession({
    headers: req.headers
  });

  if (!session) {
    return res.status(401).json({ error: "Unauthorized" });
  }

  // Process authenticated request
  // ...
}
```

## [Options](https://www.better-auth.com/docs/plugins/bearer\#options)

**requireSignature** (boolean): Require the token to be signed. Default: `false`.

[**Single Sign-On (SSO)** \\
Integrate Single Sign-On (SSO) with your application.](https://www.better-auth.com/docs/plugins/sso) [**Multi Session** \\
Learn how to use multi-session plugin in Better Auth.](https://www.better-auth.com/docs/plugins/multi-session)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Installing the Bearer Plugin](https://www.better-auth.com/docs/plugins/bearer#installing-the-bearer-plugin) [How to Use Bearer Tokens](https://www.better-auth.com/docs/plugins/bearer#how-to-use-bearer-tokens) [1\. Obtain the Bearer Token](https://www.better-auth.com/docs/plugins/bearer#1-obtain-the-bearer-token) [2\. Configure the Auth Client](https://www.better-auth.com/docs/plugins/bearer#2-configure-the-auth-client) [3\. Make Authenticated Requests](https://www.better-auth.com/docs/plugins/bearer#3-make-authenticated-requests) [4\. Per-Request Token (Optional)](https://www.better-auth.com/docs/plugins/bearer#4-per-request-token-optional) [5\. Using Bearer Tokens Outside the Auth Client](https://www.better-auth.com/docs/plugins/bearer#5-using-bearer-tokens-outside-the-auth-client) [Options](https://www.better-auth.com/docs/plugins/bearer#options)Docs

On this pageCreate API Route

# Nuxt Integration

Before you start, make sure you have a Better Auth instance configured. If you haven't done that yet, check out the [installation](https://www.better-auth.com/docs/installation).

### [Create API Route](https://www.better-auth.com/docs/integrations/nuxt\#create-api-route)

We need to mount the handler to an API route. Create a file inside `/server/api` called `[...auth].ts` and add the following code:

server/api/\[...auth\].ts

```
import { auth } from "~/utils/auth"; // import your auth config

export default defineEventHandler((event) => {
	return auth.handler(toWebRequest(event));
});
```

You can change the path on your better-auth configuration but it's recommended to keep it as `/api/[...auth]`

### [Migrate the database](https://www.better-auth.com/docs/integrations/nuxt\#migrate-the-database)

Run the following command to create the necessary tables in your database:

```
npx @better-auth/cli migrate
```

## [Create a client](https://www.better-auth.com/docs/integrations/nuxt\#create-a-client)

Create a client instance. You can name the file anything you want. Here we are creating `client.ts` file inside the `lib/` directory.

auth-client.ts

```
import { createAuthClient } from "better-auth/vue" // make sure to import from better-auth/vue

export const authClient = createAuthClient({
    //you can pass client configuration here
})
```

Once you have created the client, you can use it to sign up, sign in, and perform other actions.
Some of the actions are reactive.

### [Example usage](https://www.better-auth.com/docs/integrations/nuxt\#example-usage)

index.vue

```
<script setup lang="ts">
import { authClient } from "~/lib/client"
const session = authClient.useSession()
</script>

<template>
    <div>
        <button v-if="!session?.data" @click="() => client.signIn.social({
            provider: 'github'
        })">
            Continue with github
        </button>
        <div>
            <pre>{{ session.data }}</pre>
            <button v-if="session.data" @click="client.signOut()">
                Sign out
            </button>
        </div>
    </div>
</template>
```

### [Server Usage](https://www.better-auth.com/docs/integrations/nuxt\#server-usage)

The `api` object exported from the auth instance contains all the actions that you can perform on the server. Every endpoint made inside Better Auth is a invocable as a function. Including plugins endpoints.

**Example: Getting Session on a server API route**

server/api/example.ts

```
import { auth } from "~/lib/auth";

export default defineEventHandler((event) => {
    const session = await auth.api.getSession({
      headers: event.headers
    });

   if(session) {
     // access the session.session && session.user
   }
});
```

### [SSR Usage](https://www.better-auth.com/docs/integrations/nuxt\#ssr-usage)

If you are using Nuxt with SSR, you can use the `useSession` function in the `setup` function of your page component and pass `useFetch` to make it work with SSR.

index.vue

```
<script setup lang="ts">
import { authClient } from "~/lib/auth-client";

const { data: session } = await authClient.useSession(useFetch);
</script>

<template>
    <p>
        {{ session }}
    </p>
</template>
```

### [Middleware](https://www.better-auth.com/docs/integrations/nuxt\#middleware)

To add middleware to your Nuxt project, you can use the `useSession` method from the client.

middleware/auth.global.ts

```
import { authClient } from "~/lib/auth-client";
export default defineNuxtRouteMiddleware(async (to, from) => {
	const { data: session } = await authClient.useSession(useFetch);
	if (!session.value) {
		if (to.path === "/dashboard") {
			return navigateTo("/");
		}
	}
});
```

### [Resources & Examples](https://www.better-auth.com/docs/integrations/nuxt\#resources--examples)

- [Nuxt and Nuxt Hub example](https://github.com/atinux/nuxthub-better-auth) on GitHub.
- [NuxtZzle is Nuxt,Drizzle ORM example](https://github.com/leamsigc/nuxt-better-auth-drizzle) on github [preview](https://nuxt-better-auth.giessen.dev/)
- [Nuxt example](https://stackblitz.com/github/better-auth/better-auth/tree/main/examples/nuxt-example) on StackBlitz.

[**Next.js integration** \\
Integrate Better Auth with Next.js.](https://www.better-auth.com/docs/integrations/next) [**SvelteKit Integration** \\
Integrate Better Auth with SvelteKit.](https://www.better-auth.com/docs/integrations/svelte-kit)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Create API Route](https://www.better-auth.com/docs/integrations/nuxt#create-api-route) [Migrate the database](https://www.better-auth.com/docs/integrations/nuxt#migrate-the-database) [Create a client](https://www.better-auth.com/docs/integrations/nuxt#create-a-client) [Example usage](https://www.better-auth.com/docs/integrations/nuxt#example-usage) [Server Usage](https://www.better-auth.com/docs/integrations/nuxt#server-usage) [SSR Usage](https://www.better-auth.com/docs/integrations/nuxt#ssr-usage) [Middleware](https://www.better-auth.com/docs/integrations/nuxt#middleware) [Resources & Examples](https://www.better-auth.com/docs/integrations/nuxt#resources--examples)Docs

On this pageEmail & Password

# Basic Usage

Better Auth provides built-in authentication support for:

- **Email and password**
- **Social provider (Google, GitHub, Apple, and more)**

But also can easily be extended using plugins, such as: [username](https://beta.better-auth.com/docs/plugins/username), [magic link](https://beta.better-auth.com/docs/plugins/magic-link), [passkey](https://beta.better-auth.com/docs/plugins/passkey), [email-otp](https://beta.better-auth.com/docs/plugins/email-otp), and more.

## [Email & Password](https://beta.better-auth.com/docs/basic-usage\#email--password)

To enable email and password authentication:

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    emailAndPassword: {
        enabled: true
    }
})
```

### [Sign Up](https://beta.better-auth.com/docs/basic-usage\#sign-up)

To sign up a user you need to call the client method `signUp.email` with the user's information.

sign-up.ts

```
import { authClient } from "@/lib/auth-client"; //import the auth client

const { data, error } = await authClient.signUp.email({
        email, // user email address
        password, // user password -> min 8 characters by default
        name, // user display name
        image, // user image url (optional)
        callbackURL: "/dashboard" // a url to redirect to after the user verifies their email (optional)
    }, {
        onRequest: (ctx) => {
            //show loading
        },
        onSuccess: (ctx) => {
            //redirect to the dashboard or sign in page
        },
        onError: (ctx) => {
            // display the error message
            alert(ctx.error.message);
        },
});
```

By default, the users are automatically signed in after they successfully sign up. To disable this behavior you can set `autoSignIn` to `false`.

auth.ts

```
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    emailAndPassword: {
    	enabled: true,
    	autoSignIn: false //defaults to true
  },
})
```

### [Sign In](https://beta.better-auth.com/docs/basic-usage\#sign-in)

To sign a user in, you can use the `signIn.email` function provided by the client.

sign-in

```
const { data, error } = await authClient.signIn.email({
        /**
         * The user email
         */
        email,
        /**
         * The user password
         */
        password,
        /**
         * a url to redirect to after the user verifies their email (optional)
         */
        callbackURL: "/dashboard",
        /**
         * remember the user session after the browser is closed.
         * @default true
         */
        rememberMe: false
}, {
    //callbacks
})
```

Always invoke client methods from the client side. Don't call them from the server.

### [Server-Side Authentication](https://beta.better-auth.com/docs/basic-usage\#server-side-authentication)

To authenticate a user on the server, you can use the `auth.api` methods.

server.ts

```
import { auth } from "./auth"; // path to your Better Auth server instance

const response = await auth.api.signInEmail({
    body: {
        email,
        password
    },
    asResponse: true // returns a response object instead of data
});
```

If the server cannot return a response object, you'll need to manually parse and set cookies. But for frameworks like Next.js we provide [a plugin](https://beta.better-auth.com/docs/integrations/next#server-action-cookies) to handle this automatically

## [Social Sign-On](https://beta.better-auth.com/docs/basic-usage\#social-sign-on)

Better Auth supports multiple social providers, including Google, GitHub, Apple, Discord, and more. To use a social provider, you need to configure the ones you need in the `socialProviders` option on your `auth` object.

auth.ts

```
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    socialProviders: {
        github: {
            clientId: process.env.GITHUB_CLIENT_ID!,
            clientSecret: process.env.GITHUB_CLIENT_SECRET!,
        }
    },
})
```

### [Signin with social providers](https://beta.better-auth.com/docs/basic-usage\#signin-with-social-providers)

To sign in using a social provider you need to call `signIn.social`. It takes an object with the following properties:

sign-in.ts

```
import { authClient } from "@/lib/auth-client"; //import the auth client

await authClient.signIn.social({
    /**
     * The social provider id
     * @example "github", "google", "apple"
     */
    provider: "github",
    /**
     * a url to redirect after the user authenticates with the provider
     * @default "/"
     */
    callbackURL: "/dashboard",
    /**
     * a url to redirect if an error occurs during the sign in process
     */
    errorCallbackURL: "/error",
    /**
     * a url to redirect if the user is newly registered
     */
    newUserCallbackURL: "/welcome",
    /**
     * disable the automatic redirect to the provider.
     * @default false
     */
    disableRedirect: true,
});
```

You can also authenticate using `idToken` or `accessToken` from the social provider instead of redirecting the user to the provider's site. See social providers documentation for more details.

## [Signout](https://beta.better-auth.com/docs/basic-usage\#signout)

To signout a user, you can use the `signOut` function provided by the client.

user-card.tsx

```
await authClient.signOut();
```

you can pass `fetchOptions` to redirect onSuccess

user-card.tsx

```
await authClient.signOut({
  fetchOptions: {
    onSuccess: () => {
      router.push("/login"); // redirect to login page
    },
  },
});
```

## [Session](https://beta.better-auth.com/docs/basic-usage\#session)

Once a user is signed in, you'll want to access the user session. Better Auth allows you easily to access the session data from the server and client side.

### [Client Side](https://beta.better-auth.com/docs/basic-usage\#client-side)

#### [Use Session](https://beta.better-auth.com/docs/basic-usage\#use-session)

Better Auth provides a `useSession` hook to easily access session data on the client side. This hook is implemented using nanostore and has support for each supported framework and vanilla client, ensuring that any changes to the session (such as signing out) are immediately reflected in your UI.

ReactVueSvelteSolidVanilla

user.tsx

```
import { authClient } from "@/lib/auth-client" // import the auth client

export function User(){

    const {
        data: session,
        isPending, //loading state
        error, //error object
        refetch //refetch the session
    } = authClient.useSession()

    return (
        //...
    )
}
```

#### [Get Session](https://beta.better-auth.com/docs/basic-usage\#get-session)

If you prefer not to use the hook, you can use the `getSession` method provided by the client.

user.tsx

```
import { authClient } from "@/lib/auth-client" // import the auth client

const { data: session, error } = await authClient.getSession()
```

You can also use it with client-side data-fetching libraries like [TanStack Query](https://tanstack.com/query/latest).

### [Server Side](https://beta.better-auth.com/docs/basic-usage\#server-side)

The server provides a `session` object that you can use to access the session data. It requires request headers object to be passed to the `getSession` method.

**Example: Using some popular frameworks**

NextJsNuxtSvelteAstroHonoTanStack

server.ts

```
import { auth } from "./auth"; // path to your Better Auth server instance
import { headers } from "next/headers";

const session = await auth.api.getSession({
    headers: await headers() // you need to pass the headers object.
})
```

For more details check [session-management](https://beta.better-auth.com/docs/concepts/session-management) documentation.

## [Using Plugins](https://beta.better-auth.com/docs/basic-usage\#using-plugins)

One of the unique features of Better Auth is a plugins ecosystem. It allows you to add complex auth related functionality with small lines of code.

Below is an example of how to add two factor authentication using two factor plugin.

### [Server Configuration](https://beta.better-auth.com/docs/basic-usage\#server-configuration)

To add a plugin, you need to import the plugin and pass it to the `plugins` option of the auth instance. For example, to add two factor authentication, you can use the following code:

auth.ts

```
import { betterAuth } from "better-auth"
import { twoFactor } from "better-auth/plugins"

export const auth = betterAuth({
    //...rest of the options
    plugins: [\
        twoFactor()\
    ]
})
```

now two factor related routes and method will be available on the server.

### [Migrate Database](https://beta.better-auth.com/docs/basic-usage\#migrate-database)

After adding the plugin, you'll need to add the required tables to your database. You can do this by running the `migrate` command, or by using the `generate` command to create the schema and handle the migration manually.

generating the schema:

terminal

```
npx @better-auth/cli generate
```

using the `migrate` command:

terminal

```
npx @better-auth/cli migrate
```

If you prefer adding the schema manually, you can check the schema required on the [two factor plugin](https://beta.better-auth.com/docs/plugins/2fa#schema) documentation.

### [Client Configuration](https://beta.better-auth.com/docs/basic-usage\#client-configuration)

Once we're done with the server, we need to add the plugin to the client. To do this, you need to import the plugin and pass it to the `plugins` option of the auth client. For example, to add two factor authentication, you can use the following code:

auth-client.ts

```
import { createAuthClient } from "better-auth/client";
import { twoFactorClient } from "better-auth/client/plugins";

const authClient = createAuthClient({
    plugins: [\
        twoFactorClient({\
            twoFactorPage: "/two-factor" // the page to redirect if a user need to verify 2nd factor\
        })\
    ]
})
```

now two factor related methods will be available on the client.

profile.ts

```
import { authClient } from "./auth-client"

const enableTwoFactor = async() => {
    const data = await authClient.twoFactor.enable({
        password // the user password is required
    }) // this will enable two factor
}

const disableTwoFactor = async() => {
    const data = await authClient.twoFactor.disable({
        password // the user password is required
    }) // this will disable two factor
}

const signInWith2Factor = async() => {
    const data = await authClient.signIn.email({
        //...
    })
    //if the user has two factor enabled, it will redirect to the two factor page
}

const verifyTOTP = async() => {
    const data = await authClient.twoFactor.verifyTOTP({
        code: "123456", // the code entered by the user
        /**
         * If the device is trusted, the user won't
         * need to pass 2FA again on the same device
         */
        trustDevice: true
    })
}
```

Next step: See the [the two factor plugin documentation](https://beta.better-auth.com/docs/plugins/2fa).

[**Installation** \\
Learn how to configure Better Auth in your project.](https://beta.better-auth.com/docs/installation) [**API** \\
Better Auth API.](https://beta.better-auth.com/docs/concepts/api)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

[Email & Password](https://beta.better-auth.com/docs/basic-usage#email--password) [Sign Up](https://beta.better-auth.com/docs/basic-usage#sign-up) [Sign In](https://beta.better-auth.com/docs/basic-usage#sign-in) [Server-Side Authentication](https://beta.better-auth.com/docs/basic-usage#server-side-authentication) [Social Sign-On](https://beta.better-auth.com/docs/basic-usage#social-sign-on) [Signin with social providers](https://beta.better-auth.com/docs/basic-usage#signin-with-social-providers) [Signout](https://beta.better-auth.com/docs/basic-usage#signout) [Session](https://beta.better-auth.com/docs/basic-usage#session) [Client Side](https://beta.better-auth.com/docs/basic-usage#client-side) [Use Session](https://beta.better-auth.com/docs/basic-usage#use-session) [Get Session](https://beta.better-auth.com/docs/basic-usage#get-session) [Server Side](https://beta.better-auth.com/docs/basic-usage#server-side) [Using Plugins](https://beta.better-auth.com/docs/basic-usage#using-plugins) [Server Configuration](https://beta.better-auth.com/docs/basic-usage#server-configuration) [Migrate Database](https://beta.better-auth.com/docs/basic-usage#migrate-database) [Client Configuration](https://beta.better-auth.com/docs/basic-usage#client-configuration)Docs

On this page

# FAQ

This page contains frequently asked questions, common issues, and other helpful information about Better Auth.

### Auth client not working

### getSession not working

### Adding custom fields to the users table

### Difference between getSession and useSession

### Common Typescript Errors

[**Security** \\
Better Auth security features.](https://www.better-auth.com/docs/reference/security) [**Contributing to BetterAuth** \\
Getting started to contribute to BetterAuth](https://www.better-auth.com/docs/contribute/getting-started)

[Edit on GitHub](https://github.com/better-auth/better-auth/blob/main/docs/content/docs)

### On this page

No Headings
